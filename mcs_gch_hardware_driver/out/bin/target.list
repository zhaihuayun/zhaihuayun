
C:\myproject\motor_driver_gch_v1.00\out\bin\target.elf:     file format elf32-littleriscv


Disassembly of section .text.entry:

03000004 <_start>:

    .section      .text.entry
    .global _start
    .option norvc
_start:
    j handle_reset
 3000004:	50c0006f          	j	3000510 <handle_reset>

03000008 <TrapHandler>:
.endm

/* The interrupt vector table must be aligned with 4 bytes */
.align 2
TrapHandler:
    j     TrapVector        /* trap and INT 0 */
 3000008:	4780006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 1 */
 300000c:	4740006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 2 */
 3000010:	4700006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 3 */
 3000014:	46c0006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 4 */
 3000018:	4680006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 5 */
 300001c:	4640006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 6 */
 3000020:	4600006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 7 */
 3000024:	45c0006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 8 */
 3000028:	4580006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 9 */
 300002c:	4540006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 10 */
 3000030:	4500006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 11 */
 3000034:	44c0006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 12 */
 3000038:	4480006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 13 */
 300003c:	4440006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 14 */
 3000040:	4400006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 15 */
 3000044:	43c0006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 16 */
 3000048:	4380006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 17 */
 300004c:	4340006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 18 */
 3000050:	4300006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 19 */
 3000054:	42c0006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 20 */
 3000058:	4280006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 21 */
 300005c:	4240006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 22 */
 3000060:	4200006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 23 */
 3000064:	41c0006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 24 */
 3000068:	4180006f          	j	3000480 <TrapVector>
    j     TrapVector        /* INT 25 */
 300006c:	4140006f          	j	3000480 <TrapVector>

    j     IntHandler        /* INT 26 */
 3000070:	2640006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 27 */
 3000074:	2600006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 28 */
 3000078:	25c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 29 */
 300007c:	2580006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 30 */
 3000080:	2540006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 31 */
 3000084:	2500006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 32 */
 3000088:	24c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 33 */
 300008c:	2480006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 34 */
 3000090:	2440006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 35 */
 3000094:	2400006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 36 */
 3000098:	23c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 37 */
 300009c:	2380006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 38 */
 30000a0:	2340006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 39 */
 30000a4:	2300006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 40 */
 30000a8:	22c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 41 */
 30000ac:	2280006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 42 */
 30000b0:	2240006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 43 */
 30000b4:	2200006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 44 */
 30000b8:	21c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 45 */
 30000bc:	2180006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 46 */
 30000c0:	2140006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 47 */
 30000c4:	2100006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 48 */
 30000c8:	20c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 49 */
 30000cc:	2080006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 50 */
 30000d0:	2040006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 51 */
 30000d4:	2000006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 52 */
 30000d8:	1fc0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 53 */
 30000dc:	1f80006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 54 */
 30000e0:	1f40006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 55 */
 30000e4:	1f00006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 56 */
 30000e8:	1ec0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 57 */
 30000ec:	1e80006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 58 */
 30000f0:	1e40006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 59 */
 30000f4:	1e00006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 60 */
 30000f8:	1dc0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 61 */
 30000fc:	1d80006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 62 */
 3000100:	1d40006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 63 */
 3000104:	1d00006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 64 */
 3000108:	1cc0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 65 */
 300010c:	1c80006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 66 */
 3000110:	1c40006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 67 */
 3000114:	1c00006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 68 */
 3000118:	1bc0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 69 */
 300011c:	1b80006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 70 */
 3000120:	1b40006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 71 */
 3000124:	1b00006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 72 */
 3000128:	1ac0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 73 */
 300012c:	1a80006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 74 */
 3000130:	1a40006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 75 */
 3000134:	1a00006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 76 */
 3000138:	19c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 77 */
 300013c:	1980006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 78 */
 3000140:	1940006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 79 */
 3000144:	1900006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 80 */
 3000148:	18c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 81 */
 300014c:	1880006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 82 */
 3000150:	1840006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 83 */
 3000154:	1800006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 84 */
 3000158:	17c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 85 */
 300015c:	1780006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 86 */
 3000160:	1740006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 87 */
 3000164:	1700006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 88 */
 3000168:	16c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 89 */
 300016c:	1680006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 90 */
 3000170:	1640006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 91 */
 3000174:	1600006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 92 */
 3000178:	15c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 93 */
 300017c:	1580006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 94 */
 3000180:	1540006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 95 */
 3000184:	1500006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 96 */
 3000188:	14c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 97 */
 300018c:	1480006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 98 */
 3000190:	1440006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 99 */
 3000194:	1400006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 100 */
 3000198:	13c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 101 */
 300019c:	1380006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 102 */
 30001a0:	1340006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 103 */
 30001a4:	1300006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 104 */
 30001a8:	12c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 105 */
 30001ac:	1280006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 106 */
 30001b0:	1240006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 107 */
 30001b4:	1200006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 108 */
 30001b8:	11c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 109 */
 30001bc:	1180006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 110 */
 30001c0:	1140006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 111 */
 30001c4:	1100006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 112 */
 30001c8:	10c0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 113 */
 30001cc:	1080006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 114 */
 30001d0:	1040006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 115 */
 30001d4:	1000006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 116 */
 30001d8:	0fc0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 117 */
 30001dc:	0f80006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 118 */
 30001e0:	0f40006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 119 */
 30001e4:	0f00006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 120 */
 30001e8:	0ec0006f          	j	30002d4 <IntHandler>
    j     IntHandler        /* INT 121 */
 30001ec:	0e80006f          	j	30002d4 <IntHandler>

030001f0 <NmiEntry>:

.align 2
NmiEntry:
    SAVE_SYSERR_REGS
 30001f0:	f9010113          	addi	sp,sp,-112
 30001f4:	04812023          	sw	s0,64(sp)
 30001f8:	04912223          	sw	s1,68(sp)
 30001fc:	05212423          	sw	s2,72(sp)
 3000200:	05312623          	sw	s3,76(sp)
 3000204:	05412823          	sw	s4,80(sp)
 3000208:	05512a23          	sw	s5,84(sp)
 300020c:	05612c23          	sw	s6,88(sp)
 3000210:	05712e23          	sw	s7,92(sp)
 3000214:	07812023          	sw	s8,96(sp)
 3000218:	07912223          	sw	s9,100(sp)
 300021c:	07a12423          	sw	s10,104(sp)
 3000220:	07b12623          	sw	s11,108(sp)
 3000224:	11010593          	addi	a1,sp,272
 3000228:	06b12823          	sw	a1,112(sp)
 300022c:	06312a23          	sw	gp,116(sp)
 3000230:	06412c23          	sw	tp,120(sp)
 3000234:	34102573          	csrr	a0,mepc
 3000238:	300025f3          	csrr	a1,mstatus
 300023c:	34302673          	csrr	a2,mtval
 3000240:	342026f3          	csrr	a3,mcause
 3000244:	06a12e23          	sw	a0,124(sp)
 3000248:	08b12023          	sw	a1,128(sp)
 300024c:	08c12223          	sw	a2,132(sp)
 3000250:	08d12423          	sw	a3,136(sp)
 3000254:	00010513          	mv	a0,sp
    call SysErrNmiEntry
 3000258:	7de010ef          	jal	ra,3001a36 <SysErrNmiEntry>

0300025c <deadLoop1>:
deadLoop1:
    tail deadLoop1
 300025c:	a001                	j	300025c <deadLoop1>
    nop
 300025e:	00000013          	nop

03000262 <TrapEntry>:

.align 2
TrapEntry:
    SAVE_SYSERR_REGS
 3000262:	f9010113          	addi	sp,sp,-112
 3000266:	04812023          	sw	s0,64(sp)
 300026a:	04912223          	sw	s1,68(sp)
 300026e:	05212423          	sw	s2,72(sp)
 3000272:	05312623          	sw	s3,76(sp)
 3000276:	05412823          	sw	s4,80(sp)
 300027a:	05512a23          	sw	s5,84(sp)
 300027e:	05612c23          	sw	s6,88(sp)
 3000282:	05712e23          	sw	s7,92(sp)
 3000286:	07812023          	sw	s8,96(sp)
 300028a:	07912223          	sw	s9,100(sp)
 300028e:	07a12423          	sw	s10,104(sp)
 3000292:	07b12623          	sw	s11,108(sp)
 3000296:	11010593          	addi	a1,sp,272
 300029a:	06b12823          	sw	a1,112(sp)
 300029e:	06312a23          	sw	gp,116(sp)
 30002a2:	06412c23          	sw	tp,120(sp)
 30002a6:	34102573          	csrr	a0,mepc
 30002aa:	300025f3          	csrr	a1,mstatus
 30002ae:	34302673          	csrr	a2,mtval
 30002b2:	342026f3          	csrr	a3,mcause
 30002b6:	06a12e23          	sw	a0,124(sp)
 30002ba:	08b12023          	sw	a1,128(sp)
 30002be:	08c12223          	sw	a2,132(sp)
 30002c2:	08d12423          	sw	a3,136(sp)
 30002c6:	00010513          	mv	a0,sp
    /* Exception run with interrupts masked */
    csrc mstatus, MSTATUS_MIE
 30002ca:	30047073          	csrci	mstatus,8
    call SysErrExcEntry
 30002ce:	766010ef          	jal	ra,3001a34 <SysErrExcEntry>

030002d2 <deadLoop2>:
deadLoop2:
    tail deadLoop2
 30002d2:	a001                	j	30002d2 <deadLoop2>

030002d4 <IntHandler>:

.align 2
IntHandler:
    addi  sp, sp, -(TOTAL_INT_SIZE_ON_STACK)
 30002d4:	f6010113          	addi	sp,sp,-160

    SREG  a0, 3 * REGBYTES(sp)
 30002d8:	00a12623          	sw	a0,12(sp)
    SREG  a1, 4 * REGBYTES(sp)
 30002dc:	00b12823          	sw	a1,16(sp)
    lw    a1, (a0)
    addi  a1, a1, 1
    sw    a1, (a0)
#endif

    csrr  a0, cipri
 30002e0:	7ed02573          	csrr	a0,0x7ed
    csrr  a1, prithd
 30002e4:	bfe025f3          	csrr	a1,0xbfe
    csrw  prithd, a0                /* read prithd */
 30002e8:	bfe51073          	csrw	0xbfe,a0
    SREG  a1, 6 * REGBYTES(sp)      /* save prithd */
 30002ec:	00b12c23          	sw	a1,24(sp)
    csrr  a1, mstatus               /* read mstatus */
 30002f0:	300025f3          	csrr	a1,mstatus
    SREG  a1, 7 * REGBYTES(sp)      /* save mstatus */
 30002f4:	00b12e23          	sw	a1,28(sp)
    csrr  a1, mepc                  /* read mepc */
 30002f8:	341025f3          	csrr	a1,mepc
    SREG  a1, 8 * REGBYTES(sp)      /* save mepc */
 30002fc:	02b12023          	sw	a1,32(sp)

    csrr  a0, mcause
 3000300:	34202573          	csrr	a0,mcause

    li  a1, (3<<11)
 3000304:	000025b7          	lui	a1,0x2
 3000308:	80058593          	addi	a1,a1,-2048 # 1800 <STACK_SIZE+0x400>
    csrs  mstatus, a1
 300030c:	3005a073          	csrs	mstatus,a1
    la    a1, custom_nested_irq_main_handler_entry
 3000310:	00000597          	auipc	a1,0x0
 3000314:	01058593          	addi	a1,a1,16 # 3000320 <custom_nested_irq_main_handler_entry>
    csrw  mepc, a1
 3000318:	34159073          	csrw	mepc,a1
    mret
 300031c:	30200073          	mret

03000320 <custom_nested_irq_main_handler_entry>:

.align 2
custom_nested_irq_main_handler_entry:
    SREG  t0, 0 * REGBYTES(sp)
 3000320:	00512023          	sw	t0,0(sp)
    SREG  t1, 1 * REGBYTES(sp)
 3000324:	00612223          	sw	t1,4(sp)
    SREG  t2, 2 * REGBYTES(sp)
 3000328:	00712423          	sw	t2,8(sp)
    SREG  a2, 5 * REGBYTES(sp)
 300032c:	00c12a23          	sw	a2,20(sp)
    SREG  ra, 9 * REGBYTES(sp)
 3000330:	02112223          	sw	ra,36(sp)
    SREG  a3, 10 * REGBYTES(sp)
 3000334:	02d12423          	sw	a3,40(sp)
    SREG  a4, 11 * REGBYTES(sp)
 3000338:	02e12623          	sw	a4,44(sp)
    SREG  a5, 12 * REGBYTES(sp)
 300033c:	02f12823          	sw	a5,48(sp)
    SREG  a6, 13 * REGBYTES(sp)
 3000340:	03012a23          	sw	a6,52(sp)
    SREG  a7, 14 * REGBYTES(sp)
 3000344:	03112c23          	sw	a7,56(sp)
    SREG  t3, 15 * REGBYTES(sp)
 3000348:	03c12e23          	sw	t3,60(sp)
    SREG  t4, 16 * REGBYTES(sp)
 300034c:	05d12023          	sw	t4,64(sp)
    SREG  t5, 17 * REGBYTES(sp)
 3000350:	05e12223          	sw	t5,68(sp)
    SREG  t6, 18 * REGBYTES(sp)
 3000354:	05f12423          	sw	t6,72(sp)
    FSREG  f30, 41 * REGBYTES(sp)
    FSREG  f31, 42 * REGBYTES(sp)
    frcsr  t0
    SREG   t0, 43 * REGBYTES(sp)
#else
    FSREG  f0, 19 * REGBYTES(sp)
 3000358:	04012627          	fsw	ft0,76(sp)
    FSREG  f1, 20 * REGBYTES(sp)
 300035c:	04112827          	fsw	ft1,80(sp)
    FSREG  f2, 21 * REGBYTES(sp)
 3000360:	04212a27          	fsw	ft2,84(sp)
    FSREG  f3, 22 * REGBYTES(sp)
 3000364:	04312c27          	fsw	ft3,88(sp)
    FSREG  f4, 23 * REGBYTES(sp)
 3000368:	04412e27          	fsw	ft4,92(sp)
    FSREG  f5, 24 * REGBYTES(sp)
 300036c:	06512027          	fsw	ft5,96(sp)
    FSREG  f6, 25 * REGBYTES(sp)
 3000370:	06612227          	fsw	ft6,100(sp)
    FSREG  f7, 26 * REGBYTES(sp)
 3000374:	06712427          	fsw	ft7,104(sp)
    FSREG  f10, 27 * REGBYTES(sp)
 3000378:	06a12627          	fsw	fa0,108(sp)
    FSREG  f11, 28 * REGBYTES(sp)
 300037c:	06b12827          	fsw	fa1,112(sp)
    FSREG  f12, 29 * REGBYTES(sp)
 3000380:	06c12a27          	fsw	fa2,116(sp)
    FSREG  f13, 30 * REGBYTES(sp)
 3000384:	06d12c27          	fsw	fa3,120(sp)
    FSREG  f14, 31 * REGBYTES(sp)
 3000388:	06e12e27          	fsw	fa4,124(sp)
    FSREG  f15, 32 * REGBYTES(sp)
 300038c:	08f12027          	fsw	fa5,128(sp)
    FSREG  f16, 33 * REGBYTES(sp)
 3000390:	09012227          	fsw	fa6,132(sp)
    FSREG  f17, 34 * REGBYTES(sp)
 3000394:	09112427          	fsw	fa7,136(sp)
    FSREG  f28, 35 * REGBYTES(sp)
 3000398:	09c12627          	fsw	ft8,140(sp)
    FSREG  f29, 36 * REGBYTES(sp)
 300039c:	09d12827          	fsw	ft9,144(sp)
    FSREG  f30, 37 * REGBYTES(sp)
 30003a0:	09e12a27          	fsw	ft10,148(sp)
    FSREG  f31, 38 * REGBYTES(sp)
 30003a4:	09f12c27          	fsw	ft11,152(sp)
    frcsr  t0
 30003a8:	003022f3          	frcsr	t0
    SREG   t0, 39 * REGBYTES(sp) /* save fcsr */
 30003ac:	08512e23          	sw	t0,156(sp)

    bnez  a2, BacktoIrq
    csrr  sp, mscratch
    tail  NOS_HwiPostDispatch /* Should determine whether need to reschedule */
#else
    andi  a0, a0, MCAUSE_MASK_INT_NUM
 30003b0:	0ff57513          	andi	a0,a0,255
    call  InterruptEntry
 30003b4:	5ae010ef          	jal	ra,3001962 <InterruptEntry>

030003b8 <BacktoIrq>:
#endif

BacktoIrq:
    LREG  t1, 1 * REGBYTES(sp)
 30003b8:	00412303          	lw	t1,4(sp)
    LREG  t2, 2 * REGBYTES(sp)
 30003bc:	00812383          	lw	t2,8(sp)
    LREG  a2, 5 * REGBYTES(sp)
 30003c0:	01412603          	lw	a2,20(sp)
    LREG  ra, 9 * REGBYTES(sp)
 30003c4:	02412083          	lw	ra,36(sp)
    LREG  a3, 10 * REGBYTES(sp)
 30003c8:	02812683          	lw	a3,40(sp)
    LREG  a4, 11 * REGBYTES(sp)
 30003cc:	02c12703          	lw	a4,44(sp)
    LREG  a5, 12 * REGBYTES(sp)
 30003d0:	03012783          	lw	a5,48(sp)
    LREG  a6, 13 * REGBYTES(sp)
 30003d4:	03412803          	lw	a6,52(sp)
    LREG  a7, 14 * REGBYTES(sp)
 30003d8:	03812883          	lw	a7,56(sp)
    LREG  t3, 15 * REGBYTES(sp)
 30003dc:	03c12e03          	lw	t3,60(sp)
    LREG  t4, 16 * REGBYTES(sp)
 30003e0:	04012e83          	lw	t4,64(sp)
    LREG  t5, 17 * REGBYTES(sp)
 30003e4:	04412f03          	lw	t5,68(sp)
    LREG  t6, 18 * REGBYTES(sp)
 30003e8:	04812f83          	lw	t6,72(sp)
    FLREG  f30, 41 * REGBYTES(sp)
    FLREG  f31, 42 * REGBYTES(sp)
    LREG   t0,  43 * REGBYTES(sp)
    fscsr  t0
#else
    FLREG  f0, 19 * REGBYTES(sp)
 30003ec:	04c12007          	flw	ft0,76(sp)
    FLREG  f1, 20 * REGBYTES(sp)
 30003f0:	05012087          	flw	ft1,80(sp)
    FLREG  f2, 21 * REGBYTES(sp)
 30003f4:	05412107          	flw	ft2,84(sp)
    FLREG  f3, 22 * REGBYTES(sp)
 30003f8:	05812187          	flw	ft3,88(sp)
    FLREG  f4, 23 * REGBYTES(sp)
 30003fc:	05c12207          	flw	ft4,92(sp)
    FLREG  f5, 24 * REGBYTES(sp)
 3000400:	06012287          	flw	ft5,96(sp)
    FLREG  f6, 25 * REGBYTES(sp)
 3000404:	06412307          	flw	ft6,100(sp)
    FLREG  f7, 26 * REGBYTES(sp)
 3000408:	06812387          	flw	ft7,104(sp)
    FLREG  f10, 27 * REGBYTES(sp)
 300040c:	06c12507          	flw	fa0,108(sp)
    FLREG  f11, 28 * REGBYTES(sp)
 3000410:	07012587          	flw	fa1,112(sp)
    FLREG  f12, 29 * REGBYTES(sp)
 3000414:	07412607          	flw	fa2,116(sp)
    FLREG  f13, 30 * REGBYTES(sp)
 3000418:	07812687          	flw	fa3,120(sp)
    FLREG  f14, 31 * REGBYTES(sp)
 300041c:	07c12707          	flw	fa4,124(sp)
    FLREG  f15, 32 * REGBYTES(sp)
 3000420:	08012787          	flw	fa5,128(sp)
    FLREG  f16, 33 * REGBYTES(sp)
 3000424:	08412807          	flw	fa6,132(sp)
    FLREG  f17, 34 * REGBYTES(sp)
 3000428:	08812887          	flw	fa7,136(sp)
    FLREG  f28, 35 * REGBYTES(sp)
 300042c:	08c12e07          	flw	ft8,140(sp)
    FLREG  f29, 36 * REGBYTES(sp)
 3000430:	09012e87          	flw	ft9,144(sp)
    FLREG  f30, 37 * REGBYTES(sp)
 3000434:	09412f07          	flw	ft10,148(sp)
    FLREG  f31, 38 * REGBYTES(sp)
 3000438:	09812f87          	flw	ft11,152(sp)
    LREG   t0,  39 * REGBYTES(sp) /* restore fcsr */
 300043c:	09c12283          	lw	t0,156(sp)
    fscsr  t0
 3000440:	00329073          	fscsr	t0

03000444 <quit_int>:
    /*
     *  Since the interrupt is already turned off when loading mstatus (after entering the interrupt,
     *  the hardware will turn off the interrupt, so when saving mstatus, the interrupt is already turned off),
     *  so there is no need to turn off the interrupt separately.
     */
    LREG  a0, 7 * REGBYTES(sp)  /* load mstatus */
 3000444:	01c12503          	lw	a0,28(sp)
    csrr  t0, mstatus
 3000448:	300022f3          	csrr	t0,mstatus
    LREG  a1, 8 * REGBYTES(sp)  /* load mepc */
 300044c:	02012583          	lw	a1,32(sp)
    andi  t0, t0, MSTATUS_MIE
 3000450:	0082f293          	andi	t0,t0,8
    bnei  t0, 0, restore_mstatus
 3000454:	0002923b          	bnei	t0,0,300045c <restore_mstatus>
    andi  a0, a0, ~(MSTATUS_MIE | MSTATUS_MPIE)
 3000458:	f7757513          	andi	a0,a0,-137

0300045c <restore_mstatus>:
restore_mstatus:
    csrw  mstatus, a0
 300045c:	30051073          	csrw	mstatus,a0

    LREG  t0, 0 * REGBYTES(sp)
 3000460:	00012283          	lw	t0,0(sp)
    csrw  mepc, a1
 3000464:	34159073          	csrw	mepc,a1
    LREG  a0, 6 * REGBYTES(sp)  /* load prithd */
 3000468:	01812503          	lw	a0,24(sp)
    csrw  prithd, a0
 300046c:	bfe51073          	csrw	0xbfe,a0
    lw    a1, (a0)
    addi  a1, a1, -1
    sw    a1, (a0)
#endif

    LREG  a1, 4 * REGBYTES(sp)   /* 2 consecutive csrw instructions will have a bubble */
 3000470:	01012583          	lw	a1,16(sp)

    LREG  a0, 3 * REGBYTES(sp)
 3000474:	00c12503          	lw	a0,12(sp)

    addi  sp, sp, TOTAL_INT_SIZE_ON_STACK
 3000478:	0a010113          	addi	sp,sp,160

    mret
 300047c:	30200073          	mret

03000480 <TrapVector>:
    LREG  a2, 4(sp)
    LREG  a1, 0(sp)
    addi  sp, sp, 8
#endif

    push_reg
 3000480:	f6010113          	addi	sp,sp,-160
 3000484:	fff11f8b          	stmia	{ra,t0-t6,a0-a7},(sp)
 3000488:	f6010113          	addi	sp,sp,-160
    csrr  a0, mcause
 300048c:	34202573          	csrr	a0,mcause
    li    t1, MCAUSE_ECALL_FROM_MMODE
 3000490:	00b00313          	li	t1,11
#if defined(USER_MODE_ENABLE) && (USER_MODE_ENABLE == 1)
    beq   a0, t1, switch_to_umode
#else
    beq   a0, t1, switch_to_mmode
 3000494:	02650c63          	beq	a0,t1,30004cc <switch_to_mmode>
#endif
    li    t1, MCAUSE_ECALL_FROM_UMODE
 3000498:	00800313          	li	t1,8
    beq   a0, t1, switch_to_mmode
 300049c:	02650863          	beq	a0,t1,30004cc <switch_to_mmode>

    li    a1, MCAUSE_MASK_INT_BIT
 30004a0:	800005b7          	lui	a1,0x80000
    li    a2, MCAUSE_MASK_INT_NUM
 30004a4:	0ff00613          	li	a2,255
    and   a1, a0, a1
 30004a8:	00b575b3          	and	a1,a0,a1
    and   a0, a0, a2
 30004ac:	00c57533          	and	a0,a0,a2

    li    a2, 0xc
 30004b0:	00c00613          	li	a2,12
    beq   a0, a2, NmiEntry
 30004b4:	d2c50ee3          	beq	a0,a2,30001f0 <NmiEntry>
    beqz  a1, TrapEntry
 30004b8:	da0585e3          	beqz	a1,3000262 <TrapEntry>
    pop_reg
 30004bc:	0a010113          	addi	sp,sp,160
 30004c0:	fff10f8b          	ldmia	{ra,t0-t6,a0-a7},(sp)
 30004c4:	0a010113          	addi	sp,sp,160
    mret
 30004c8:	30200073          	mret

030004cc <switch_to_mmode>:
    mret
#endif

.align 2
switch_to_mmode:
    li    t2,  MSTATUS_MPP_MACHINE
 30004cc:	000023b7          	lui	t2,0x2
 30004d0:	80038393          	addi	t2,t2,-2048 # 1800 <STACK_SIZE+0x400>
    csrs  mstatus, t2
 30004d4:	3003a073          	csrs	mstatus,t2
    csrr  t0,  mepc
 30004d8:	341022f3          	csrr	t0,mepc
    addi  t0,  t0,  4
 30004dc:	00428293          	addi	t0,t0,4
    csrw  mepc, t0
 30004e0:	34129073          	csrw	mepc,t0
    pop_reg
 30004e4:	0a010113          	addi	sp,sp,160
 30004e8:	fff10f8b          	ldmia	{ra,t0-t6,a0-a7},(sp)
 30004ec:	0a010113          	addi	sp,sp,160
    mret
 30004f0:	30200073          	mret

030004f4 <mem_cpy>:

.align 2
mem_cpy:
    bge t0, t2, cpy_done
 30004f4:	0072dc63          	bge	t0,t2,300050c <cpy_done>
    lw  t3, (t1)
 30004f8:	00032e03          	lw	t3,0(t1)
    sw  t3, (t0)
 30004fc:	01c2a023          	sw	t3,0(t0)
    addi t0, t0, 4
 3000500:	00428293          	addi	t0,t0,4
    addi t1, t1, 4
 3000504:	00430313          	addi	t1,t1,4
    j mem_cpy
 3000508:	fedff06f          	j	30004f4 <mem_cpy>

0300050c <cpy_done>:
cpy_done:
    ret
 300050c:	00008067          	ret

03000510 <handle_reset>:

.align 2
handle_reset:
    csrwi mstatus, 0
 3000510:	30005073          	csrwi	mstatus,0
    csrwi mie,  0
 3000514:	30405073          	csrwi	mie,0
    csrci mstatus, 0x08
 3000518:	30047073          	csrci	mstatus,8
    la    t0,  TrapHandler
 300051c:	00000297          	auipc	t0,0x0
 3000520:	aec28293          	addi	t0,t0,-1300 # 3000008 <TrapHandler>
    addi  t0,  t0, 1
 3000524:	00128293          	addi	t0,t0,1
    csrw  mtvec, t0
 3000528:	30529073          	csrw	mtvec,t0
    csrwi 0x7EF, 0x1               /* lock mtvec */
 300052c:	7ef0d073          	csrwi	0x7ef,1

03000530 <flash_init>:

flash_init:
/* eflash prefetch enable */
    li  t0, EFC_BASE_ADDR
 3000530:	147102b7          	lui	t0,0x14710
    lw  t1, 0x120(t0)
 3000534:	1202a303          	lw	t1,288(t0) # 14710120 <RAM_END+0x1070c120>
    ori t1, t1, 1
 3000538:	00136313          	ori	t1,t1,1
    sw  t1, 0x120(t0)
 300053c:	1262a023          	sw	t1,288(t0)

/* eflash cache enable */
    lw  t1, 0x124(t0)
 3000540:	1242a303          	lw	t1,292(t0)
    ori t1, t1, 1
 3000544:	00136313          	ori	t1,t1,1
    sw  t1, 0x124(t0)
 3000548:	1262a223          	sw	t1,292(t0)

/* enable flash cmd */
    li t0, EFC_MAGIC_NUMBER
 300054c:	fedcc2b7          	lui	t0,0xfedcc
 3000550:	a9828293          	addi	t0,t0,-1384 # fedcba98 <RAM_END+0xfadc7a98>
    li t1, EFC_MAGIC_LOCK_RW
 3000554:	14710337          	lui	t1,0x14710
 3000558:	20030313          	addi	t1,t1,512 # 14710200 <RAM_END+0x1070c200>
    sw t0, (t1)
 300055c:	00532023          	sw	t0,0(t1)

/* initialize global pointer */
    .option push
    .option norelax
    la gp, __global_pointer$
 3000560:	01000197          	auipc	gp,0x1000
 3000564:	0f418193          	addi	gp,gp,244 # 4000654 <__global_pointer$>

/* initialize stack pointer */
#ifdef NOS_TASK_SUPPORT /* Support Multi-task needs to use irq stack */
    la sp, __init_stack_top
#else
    la sp, __stack_top
 3000568:	01003117          	auipc	sp,0x1003
 300056c:	69810113          	addi	sp,sp,1688 # 4003c00 <__INTERRUPT_STACK_BEGIN__>
#endif

/* timer0 interrupt enable */
    li t0, TIMER0_CONTROL
 3000570:	143002b7          	lui	t0,0x14300
 3000574:	00828293          	addi	t0,t0,8 # 14300008 <RAM_END+0x102fc008>
    lw t1, (t0)
 3000578:	0002a303          	lw	t1,0(t0)
    andi t1, t1, TIMER0_INTENABLE
 300057c:	02037313          	andi	t1,t1,32
    sw t1, (t0)
 3000580:	0062a023          	sw	t1,0(t0)

/* uart0 deinit */
    li t0, 0x14000000
 3000584:	140002b7          	lui	t0,0x14000
    li t1, 0
 3000588:	00000313          	li	t1,0
    sw t1, IBRD_OFFSET(t0)
 300058c:	0262a223          	sw	t1,36(t0) # 14000024 <RAM_END+0xfffc024>
    sw t1, FBRD_OFFSET(t0)
 3000590:	0262a423          	sw	t1,40(t0)
    sw t1, LCR_H_OFFSET(t0)
 3000594:	0262a623          	sw	t1,44(t0)
    sw t1, CR_OFFSET(t0)
 3000598:	0262a823          	sw	t1,48(t0)
    sw t1, DMACR_OFFSET(t0)
 300059c:	0462a423          	sw	t1,72(t0)

030005a0 <clear_sram>:

/* perform the rest of initialization in C */
clear_sram:
    /* clear sysram parity error */
    li  t0, SYSRAM_ERROR
 30005a0:	101082b7          	lui	t0,0x10108
 30005a4:	30028293          	addi	t0,t0,768 # 10108300 <RAM_END+0xc104300>
    lw  t1, (t0)
 30005a8:	0002a303          	lw	t1,0(t0)
    ori t1, t1, 1
 30005ac:	00136313          	ori	t1,t1,1
    sw  t1, (t0)
 30005b0:	0062a023          	sw	t1,0(t0)

    la t0, SRAM_START
 30005b4:	9ac18293          	addi	t0,gp,-1620 # 4000000 <g_hosc_ctrim>
    la t1, SRAM_END
 30005b8:	01004317          	auipc	t1,0x1004
 30005bc:	a4830313          	addi	t1,t1,-1464 # 4004000 <RAM_END>
    li t2, 0
 30005c0:	00000393          	li	t2,0

030005c4 <clear_sram_loop>:

clear_sram_loop:
    sw      t2, (t0)            /* clear all sram */
 30005c4:	0072a023          	sw	t2,0(t0)
    addi    t0, t0, 4           /* increment clear index pointer */
 30005c8:	00428293          	addi	t0,t0,4
    blt     t0, t1, clear_sram_loop /* are we at the end yet, if not , continue till the end */
 30005cc:	fe62cce3          	blt	t0,t1,30005c4 <clear_sram_loop>

030005d0 <ramdcode_copy>:

ramdcode_copy:
    la t0, __sram_code_start         /* SRAM addr */
 30005d0:	ff000297          	auipc	t0,0xff000
 30005d4:	a3028293          	addi	t0,t0,-1488 # 2000000 <RAM_CODE_START>
    la t1, __sram_code_load          /* ROM addr  */
 30005d8:	00000317          	auipc	t1,0x0
 30005dc:	0b830313          	addi	t1,t1,184 # 3000690 <Chip_Init>
    la t2, __sram_code_end
 30005e0:	ff000397          	auipc	t2,0xff000
 30005e4:	a2038393          	addi	t2,t2,-1504 # 2000000 <RAM_CODE_START>
    jal mem_cpy
 30005e8:	f0dff0ef          	jal	ra,30004f4 <mem_cpy>

030005ec <reserved_data_copy>:

reserved_data_copy:
    la t0, __reserved_code_start_addr  /* SRAM addr */
 30005ec:	9ac18293          	addi	t0,gp,-1620 # 4000000 <g_hosc_ctrim>
    la t1, __reserved_code_load_addr   /* ROM addr  */
 30005f0:	00000317          	auipc	t1,0x0
 30005f4:	0a030313          	addi	t1,t1,160 # 3000690 <Chip_Init>
    la t2, __reserved_code_end_addr
 30005f8:	9ac18393          	addi	t2,gp,-1620 # 4000000 <g_hosc_ctrim>
    jal mem_cpy
 30005fc:	ef9ff0ef          	jal	ra,30004f4 <mem_cpy>

03000600 <coderom_data_copy>:

coderom_data_copy:
    la t0, __data_start              /* SRAM addr */
 3000600:	9ac18293          	addi	t0,gp,-1620 # 4000000 <g_hosc_ctrim>
    la t1, __data_load               /* ROM addr  */
 3000604:	00004317          	auipc	t1,0x4
 3000608:	8e830313          	addi	t1,t1,-1816 # 3003eec <__data_load>
    la t2, __data_end
 300060c:	9b418393          	addi	t2,gp,-1612 # 4000008 <g_tsensor>
    jal mem_cpy
 3000610:	ee5ff0ef          	jal	ra,30004f4 <mem_cpy>

03000614 <pmp_init>:
    li t0,0x0b0b0d08
    csrw pmpcfg1,t0
#endif

/* disable Icache */
    csrwi  0x7C0, 0x0 /* disable ICACHE */
 3000614:	7c005073          	csrwi	0x7c0,0
    fence
 3000618:	0ff0000f          	fence

/* disable Dcache */
    csrwi  0x7C1, 0x0 /* disable DCACHE */
 300061c:	7c105073          	csrwi	0x7c1,0
    fence
 3000620:	0ff0000f          	fence

/* support float and mie */
    li t0,0x2008
 3000624:	000022b7          	lui	t0,0x2
 3000628:	00828293          	addi	t0,t0,8 # 2008 <STACK_SIZE+0xc08>
    csrs mstatus,t0
 300062c:	3002a073          	csrs	mstatus,t0
    li t0,0x20
 3000630:	02000293          	li	t0,32
    csrs misa,t0
 3000634:	3012a073          	csrs	misa,t0

/* Interrupt set default priority = 1*/
    li t0, 0x11111111
 3000638:	111112b7          	lui	t0,0x11111
 300063c:	11128293          	addi	t0,t0,273 # 11111111 <RAM_END+0xd10d111>
    csrw locipri0, t0
 3000640:	bc029073          	csrw	0xbc0,t0
    csrw locipri1, t0
 3000644:	bc129073          	csrw	0xbc1,t0
    csrw locipri2, t0
 3000648:	bc229073          	csrw	0xbc2,t0
    csrw locipri3, t0
 300064c:	bc329073          	csrw	0xbc3,t0
    csrw locipri4, t0
 3000650:	bc429073          	csrw	0xbc4,t0
    csrw locipri5, t0
 3000654:	bc529073          	csrw	0xbc5,t0
    csrw locipri6, t0
 3000658:	bc629073          	csrw	0xbc6,t0
    csrw locipri7, t0
 300065c:	bc729073          	csrw	0xbc7,t0
    csrw locipri8, t0
 3000660:	bc829073          	csrw	0xbc8,t0
    csrw locipri9, t0
 3000664:	bc929073          	csrw	0xbc9,t0
    csrw locipri10, t0
 3000668:	bca29073          	csrw	0xbca,t0
    csrw locipri11, t0
 300066c:	bcb29073          	csrw	0xbcb,t0
    csrw locipri12, t0
 3000670:	bcc29073          	csrw	0xbcc,t0
    csrw locipri13, t0
 3000674:	bcd29073          	csrw	0xbcd,t0
    csrw locipri14, t0
 3000678:	bce29073          	csrw	0xbce,t0
    csrw locipri15, t0
 300067c:	bcf29073          	csrw	0xbcf,t0

    ecall
 3000680:	00000073          	ecall

#ifdef NOS_TASK_SUPPORT
    jal Chip_Init
#else
    jal Chip_Init
 3000684:	00c000ef          	jal	ra,3000690 <Chip_Init>

/* jump to C func. */
    jal main
 3000688:	71d010ef          	jal	ra,30025a4 <main>

0300068c <dead_loop>:
#endif

dead_loop:
    j dead_loop
 300068c:	0000006f          	j	300068c <dead_loop>

Disassembly of section .text:

03000690 <Chip_Init>:
 * @brief Chip Init
 * @param None
 * @retval None
 */
void Chip_Init(void)
{
 3000690:	8118                	push	{ra},-32
    CRG_CoreClkSelect coreClkSelect;
    /* Config CRG */
    if (CRG_Config(&coreClkSelect) != BASE_STATUS_OK) {
 3000692:	0068                	addi	a0,sp,12
 3000694:	72b010ef          	jal	ra,30025be <CRG_Config>
 3000698:	c111                	beqz	a0,300069c <Chip_Init+0xc>
 300069a:	a001                	j	300069a <Chip_Init+0xa>
        Chip_InitFail();
    }

    /* Config FLASH Clock */
    FLASH_ClockConfig(coreClkSelect);
 300069c:	4532                	lw	a0,12(sp)
 300069e:	2629                	jal	ra,30009a8 <FLASH_ClockConfig>

    /* Set CoreClock Select after FLASH Config Done */
    CRG_SetCoreClockSelect(coreClkSelect);
 30006a0:	4532                	lw	a0,12(sp)
 30006a2:	2cd5                	jal	ra,3000996 <CRG_SetCoreClockSelect>

    /* Waiting CRG Config Done */
    if (HAL_CRG_GetCoreClkFreq() != HOSC_FREQ) {
 30006a4:	275010ef          	jal	ra,3002118 <HAL_CRG_GetCoreClkFreq>
 30006a8:	017d 7840 079f      	l.li	a5,0x17d7840
 30006ae:	00f50363          	beq	a0,a5,30006b4 <Chip_Init+0x24>
        FLASH_WaitClockConfigDone();
 30006b2:	26e9                	jal	ra,3000a7c <FLASH_WaitClockConfigDone>
    }

    IRQ_Init();
 30006b4:	2bc010ef          	jal	ra,3001970 <IRQ_Init>
    SYSTICK_Init();
 30006b8:	219d                	jal	ra,3000b1e <SYSTICK_Init>
    ADC_InitVref();
 30006ba:	2871                	jal	ra,3000756 <ADC_InitVref>
    TSENSOR_InitVrefList();
 30006bc:	2021                	jal	ra,30006c4 <TSENSOR_InitVrefList>
    PGA_InitVref();
 30006be:	2ec1                	jal	ra,3000a8e <PGA_InitVref>
    PMC_InitVref();
 30006c0:	2921                	jal	ra,3000ad8 <PMC_InitVref>
    /* User Add Code Here */

#ifdef NOS_TASK_SUPPORT
    NOS_Init();
#endif
 30006c2:	8114                	popret	{ra},32

030006c4 <TSENSOR_InitVrefList>:
 * @brief ADC initialize vref power.
 * @param None.
 * @retval None.
 */
void TSENSOR_InitVrefList(void)
{
 30006c4:	8218                	push	{ra},-48
    FOTP_INFO_RGN0_NUMBER_1 tsensorRef;
    FOTP_InfoGet(FOTP_INFO_RNG0, 1, &tsensorRef.comData);   /* 1 is the index of tsensorRef in otp */
 30006c6:	860a                	mv	a2,sp
 30006c8:	2891                	jal	ra,300071c <TSENSOR_InitVrefList+0x58>
    unsigned int t = tsensorRef.REG.data3.ts_ref_t0_ft_rt - 57;  /* offset temperature is -57 */
 30006ca:	47b2                	lw	a5,12(sp)
    float slope = (v) / (float)(t + 273);  /* reference temperature is -273 */
    g_tsensor->vrefTemp = t;
    g_tsensor->vrefVoltage = v;
    g_tsensor->slope = slope;
    FOTP_INFO_RGN0_NUMBER_1 trimDate;
    FOTP_InfoGet(FOTP_INFO_RNG0, 1, &trimDate.comData);   /* 1 is the number of adc_vref in otp */
 30006cc:	0810                	addi	a2,sp,16
    unsigned int t = tsensorRef.REG.data3.ts_ref_t0_ft_rt - 57;  /* offset temperature is -57 */
 30006ce:	7ff7f693          	andi	a3,a5,2047
    float v = tsensorRef.REG.data3.ts_ref_v0_ft_rt * 0.0031f + 0.65f;  /* offset Voltage is 0.65, degree is 0.0031 */
 30006d2:	83ad                	srli	a5,a5,0xb
 30006d4:	7ff7f793          	andi	a5,a5,2047
 30006d8:	d007f7d3          	fcvt.s.w	fa5,a5
 30006dc:	030047b7          	lui	a5,0x3004
 30006e0:	b787a707          	flw	fa4,-1160(a5) # 3003b78 <__rodata_start>
 30006e4:	030047b7          	lui	a5,0x3004
 30006e8:	b7c7a687          	flw	fa3,-1156(a5) # 3003b7c <__rodata_start+0x4>
    unsigned int t = tsensorRef.REG.data3.ts_ref_t0_ft_rt - 57;  /* offset temperature is -57 */
 30006ec:	fc768713          	addi	a4,a3,-57
    float slope = (v) / (float)(t + 273);  /* reference temperature is -273 */
 30006f0:	0d868693          	addi	a3,a3,216
    float v = tsensorRef.REG.data3.ts_ref_v0_ft_rt * 0.0031f + 0.65f;  /* offset Voltage is 0.65, degree is 0.0031 */
 30006f4:	68e7f7c3          	fmadd.s	fa5,fa5,fa4,fa3
    float slope = (v) / (float)(t + 273);  /* reference temperature is -273 */
 30006f8:	d006f753          	fcvt.s.w	fa4,a3
    g_tsensor->vrefTemp = t;
 30006fc:	9b418793          	addi	a5,gp,-1612 # 4000008 <g_tsensor>
 3000700:	a79a                	sh	a4,8(a5)
    g_tsensor->vrefVoltage = v;
 3000702:	e39c                	fsw	fa5,0(a5)
    float slope = (v) / (float)(t + 273);  /* reference temperature is -273 */
 3000704:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    g_tsensor->slope = slope;
 3000708:	e3dc                	fsw	fa5,4(a5)
    FOTP_InfoGet(FOTP_INFO_RNG0, 1, &trimDate.comData);   /* 1 is the number of adc_vref in otp */
 300070a:	2809                	jal	ra,300071c <TSENSOR_InitVrefList+0x58>
    g_hosc_ctrim = trimDate.REG.data2.hosc_ctrim_ft_rt;
 300070c:	47e2                	lw	a5,24(sp)
 300070e:	9ac18713          	addi	a4,gp,-1620 # 4000000 <g_hosc_ctrim>
 3000712:	83c9                	srli	a5,a5,0x12
 3000714:	1ff7f793          	andi	a5,a5,511
 3000718:	c31c                	sw	a5,0(a4)
    return;
 300071a:	8214                	popret	{ra},48
    FOTP_InfoGet(FOTP_INFO_RNG0, 1, &trimDate.comData);   /* 1 is the number of adc_vref in otp */
 300071c:	4585                	li	a1,1
 300071e:	4501                	li	a0,0
 3000720:	a135                	j	3000b4c <FOTP_InfoGet>

03000722 <ADC_GetOffsetTrim>:
 * @param None.
 * @retval offset value.
 */
float ADC_GetOffsetTrim(unsigned int index)
{
    unsigned temp = g_adcTrimList[index].offset;
 3000722:	a8018793          	addi	a5,gp,-1408 # 40000d4 <g_adcTrimList>
 3000726:	04a7851b          	addshf	a0,a5,a0,sll,2
 300072a:	213e                	lhu	a5,2(a0)
 300072c:	030046b7          	lui	a3,0x3004
    float ret;
    if ((temp & 0x2000) == 0x2000) {      /* determine the sign bit[13] */
 3000730:	01279713          	slli	a4,a5,0x12
 3000734:	00075b63          	bgez	a4,300074a <ADC_GetOffsetTrim+0x28>
        temp |= 0xFFFFC000;
 3000738:	7771                	lui	a4,0xffffc
 300073a:	8fd9                	or	a5,a5,a4
        unsigned int tmp = ~(temp - 1);
        ret = (0 - (int)tmp) / (float)2;  /* 2 for decimal conversion */
 300073c:	d007f553          	fcvt.s.w	fa0,a5
    } else {
        temp &= 0x1FFF;
        ret = (float)temp / (float)2;  /* 2 for decimal conversion */
 3000740:	b846a787          	flw	fa5,-1148(a3) # 3003b84 <__rodata_start+0xc>
 3000744:	10f57553          	fmul.s	fa0,fa0,fa5
    }
    return ret;
}
 3000748:	8082                	ret
        ret = (float)temp / (float)2;  /* 2 for decimal conversion */
 300074a:	6709                	lui	a4,0x2
 300074c:	177d                	addi	a4,a4,-1
 300074e:	8ff9                	and	a5,a5,a4
 3000750:	d017f553          	fcvt.s.wu	fa0,a5
 3000754:	b7f5                	j	3000740 <ADC_GetOffsetTrim+0x1e>

03000756 <ADC_InitVref>:
{
 3000756:	7131                	addi	sp,sp,-192
 3000758:	0a810293          	addi	t0,sp,168
 300075c:	00e2968b          	stmia	{ra,s0-s4},(t0)
 3000760:	ef22                	fsw	fs0,156(sp)
    FOTP_InfoGet(FOTP_INFO_RNG0, 4, &trimDate.comData);   /* 4 is the number of fotp_empty_flag in otp */
 3000762:	860a                	mv	a2,sp
 3000764:	4591                	li	a1,4
 3000766:	2405                	jal	ra,3000986 <ADC_InitVref+0x230>
    if (trimDate.REG.fotp_empty_flag == 0x5AA59669) {     /* fotp_empty_flag is 0x5AA59669 */
 3000768:	4782                	lw	a5,0(sp)
 300076a:	5aa5 9669 071f      	l.li	a4,0x5aa59669
 3000770:	ab018493          	addi	s1,gp,-1360 # 4000104 <g_trimEnable>
 3000774:	00e79463          	bne	a5,a4,300077c <ADC_InitVref+0x26>
        g_trimEnable = true;
 3000778:	4785                	li	a5,1
 300077a:	a09c                	sb	a5,0(s1)
    FOTP_InfoGet(FOTP_INFO_RNG0, 2, &idInfo.comData);   /* 2 is the number of in otp */
 300077c:	0810                	addi	a2,sp,16
 300077e:	4589                	li	a1,2
 3000780:	2419                	jal	ra,3000986 <ADC_InitVref+0x230>
    g_versionId = idInfo.REG.data2.version_id;
 3000782:	01814783          	lbu	a5,24(sp)
 3000786:	9b018713          	addi	a4,gp,-1616 # 4000004 <g_versionId>
 300078a:	c31c                	sw	a5,0(a4)
    if (g_trimEnable == true) {
 300078c:	209c                	lbu	a5,0(s1)
 300078e:	1a078b63          	beqz	a5,3000944 <ADC_InitVref+0x1ee>
        FOTP_InfoGet(FOTP_INFO_RNG0, 21, &adcVrefTrim.comData);   /* 21 is the number of adc_vref in otp */
 3000792:	1010                	addi	a2,sp,32
 3000794:	45d5                	li	a1,21
 3000796:	2ac5                	jal	ra,3000986 <ADC_InitVref+0x230>
    SYSCTRL1->ADCVREF_CTRL0.BIT.adcvref_bg_trim = adcVrefTrim.REG.data1.adcvref_bg_trim;
 3000798:	1010b437          	lui	s0,0x1010b
 300079c:	5692                	lw	a3,36(sp)
 300079e:	401c                	lw	a5,0(s0)
 30007a0:	ffe0 ffff 071f      	l.li	a4,0xffe0ffff
 30007a6:	8afd                	andi	a3,a3,31
 30007a8:	2ad9                	jal	ra,300097e <ADC_InitVref+0x228>
 30007aa:	c01c                	sw	a5,0(s0)
    SYSCTRL1->ADCVREF_CTRL0.BIT.adcvref_bg_en = BASE_CFG_ENABLE;
 30007ac:	401c                	lw	a5,0(s0)
 30007ae:	0017e793          	ori	a5,a5,1
 30007b2:	c01c                	sw	a5,0(s0)
    SYSCTRL1->ADCVREF_CTRL1.BIT.adcvref_adcldo_trim = adcVrefTrim.REG.data1.adcvref_adcldo_trim;
 30007b4:	5692                	lw	a3,36(sp)
 30007b6:	405c                	lw	a5,4(s0)
 30007b8:	8295                	srli	a3,a3,0x5
 30007ba:	22c9                	jal	ra,300097c <ADC_InitVref+0x226>
 30007bc:	c05c                	sw	a5,4(s0)
    SYSCTRL1->ADCVREF_CTRL1.BIT.adcvref_adcldo_en = BASE_CFG_ENABLE;
 30007be:	405c                	lw	a5,4(s0)
 30007c0:	0017e793          	ori	a5,a5,1
 30007c4:	c05c                	sw	a5,4(s0)
 30007c6:	441c                	lw	a5,8(s0)
    SYSCTRL1->ADC0_VREF_CTRL.BIT.adcvref_refbuf_trim0_2p0v = adcVrefTrim.REG.data2.adcvref_refbuf0_trim_2p0v;
 30007c8:	56a2                	lw	a3,40(sp)
 30007ca:	2a4d                	jal	ra,300097c <ADC_InitVref+0x226>
 30007cc:	c41c                	sw	a5,8(s0)
 30007ce:	441c                	lw	a5,8(s0)
    SYSCTRL1->ADC0_VREF_CTRL.BIT.adcvref_refbuf_trim0_2p5v = adcVrefTrim.REG.data3.adcvref_refbuf0_trim_2p5v;
 30007d0:	56b2                	lw	a3,44(sp)
 30007d2:	e0ff ffff 061f      	l.li	a2,0xe0ffffff
 30007d8:	8ff1                	and	a5,a5,a2
 30007da:	8afd                	andi	a3,a3,31
 30007dc:	30d7a79b          	orshf	a5,a5,a3,sll,24
 30007e0:	c41c                	sw	a5,8(s0)
    SYSCTRL1->ADC1_VREF_CTRL.BIT.adcvref_refbuf_trim1_2p0v = adcVrefTrim.REG.data2.adcvref_refbuf1_trim_2p0v;
 30007e2:	56a2                	lw	a3,40(sp)
 30007e4:	445c                	lw	a5,12(s0)
 30007e6:	8295                	srli	a3,a3,0x5
 30007e8:	2a51                	jal	ra,300097c <ADC_InitVref+0x226>
 30007ea:	c45c                	sw	a5,12(s0)
    SYSCTRL1->ADC1_VREF_CTRL.BIT.adcvref_refbuf_trim1_2p5v = adcVrefTrim.REG.data3.adcvref_refbuf1_trim_2p5v;
 30007ec:	56b2                	lw	a3,44(sp)
 30007ee:	445c                	lw	a5,12(s0)
 30007f0:	8295                	srli	a3,a3,0x5
 30007f2:	8afd                	andi	a3,a3,31
 30007f4:	8ff1                	and	a5,a5,a2
 30007f6:	30d7a79b          	orshf	a5,a5,a3,sll,24
 30007fa:	c45c                	sw	a5,12(s0)
    SYSCTRL1->ADC2_VREF_CTRL.BIT.adcvref_refbuf_trim2_2p0v = adcVrefTrim.REG.data2.adcvref_refbuf2_trim_2p0v;
 30007fc:	56a2                	lw	a3,40(sp)
 30007fe:	481c                	lw	a5,16(s0)
 3000800:	82a9                	srli	a3,a3,0xa
 3000802:	2aad                	jal	ra,300097c <ADC_InitVref+0x226>
 3000804:	c81c                	sw	a5,16(s0)
    SYSCTRL1->ADC2_VREF_CTRL.BIT.adcvref_refbuf_trim2_2p5v = adcVrefTrim.REG.data3.adcvref_refbuf2_trim_2p5v;
 3000806:	5732                	lw	a4,44(sp)
 3000808:	481c                	lw	a5,16(s0)
    BASE_FUNC_DELAY_MS(10);     /* Wait for 10 ms until the LDO becomes stable */
 300080a:	3e800593          	li	a1,1000
    SYSCTRL1->ADC2_VREF_CTRL.BIT.adcvref_refbuf_trim2_2p5v = adcVrefTrim.REG.data3.adcvref_refbuf2_trim_2p5v;
 300080e:	8329                	srli	a4,a4,0xa
 3000810:	8b7d                	andi	a4,a4,31
 3000812:	8ff1                	and	a5,a5,a2
 3000814:	30e7a79b          	orshf	a5,a5,a4,sll,24
 3000818:	c81c                	sw	a5,16(s0)
    BASE_FUNC_DELAY_MS(10);     /* Wait for 10 ms until the LDO becomes stable */
 300081a:	4529                	li	a0,10
 300081c:	126010ef          	jal	ra,3001942 <BASE_FUNC_Delay>
    unsigned int ldoStatu = SYSCTRL1->ADCVREF_CTRL1.BIT.adcvref_adcldo_ok;
 3000820:	405c                	lw	a5,4(s0)
    if (ldoStatu == BASE_CFG_ENABLE) {
 3000822:	0007d3bb          	bgei	a5,0,3000830 <ADC_InitVref+0xda>
        SYSCTRL1->ADCVREF_CTRL6.reg |= 0x800000;
 3000826:	4c1c                	lw	a5,24(s0)
 3000828:	00800737          	lui	a4,0x800
 300082c:	8fd9                	or	a5,a5,a4
 300082e:	cc1c                	sw	a5,24(s0)
    if (g_trimEnable == true) {
 3000830:	209c                	lbu	a5,0(s1)
 3000832:	10078663          	beqz	a5,300093e <ADC_InitVref+0x1e8>
    FOTP_InfoGet(FOTP_INFO_RNG0, 22, &adc0Sh0.comData);   /* 22 is the number of adc calibration trim in otp */
 3000836:	1810                	addi	a2,sp,48
 3000838:	45d9                	li	a1,22
 300083a:	22b1                	jal	ra,3000986 <ADC_InitVref+0x230>
    FOTP_InfoGet(FOTP_INFO_RNG0, 23, &adc0Sh1.comData);   /* 23 is the number of adc calibration trim in otp */
 300083c:	0090                	addi	a2,sp,64
 300083e:	45dd                	li	a1,23
 3000840:	2299                	jal	ra,3000986 <ADC_InitVref+0x230>
    g_adcTrimList[index].gain = adc0Sh0.REG.data0.adc0_sh0_g0p6_ge_trim;
 3000842:	6489                	lui	s1,0x2
 3000844:	a8018413          	addi	s0,gp,-1408 # 40000d4 <g_adcTrimList>
 3000848:	57c2                	lw	a5,48(sp)
 300084a:	14fd                	addi	s1,s1,-1
 300084c:	2a3d                	jal	ra,300098a <ADC_InitVref+0x234>
    g_adcTrimList[index++].offset = adc0Sh0.REG.data0.adc0_sh0_g0p6_oe_trim;
 300084e:	6911                	lui	s2,0x4
    g_adcTrimList[index].gain = adc0Sh0.REG.data0.adc0_sh0_g0p6_ge_trim;
 3000850:	a01a                	sh	a4,0(s0)
    g_adcTrimList[index++].offset = adc0Sh0.REG.data0.adc0_sh0_g0p6_oe_trim;
 3000852:	197d                	addi	s2,s2,-1
 3000854:	2a35                	jal	ra,3000990 <ADC_InitVref+0x23a>
 3000856:	a03e                	sh	a5,2(s0)
    g_adcTrimList[index].gain = adc0Sh1.REG.data0.adc0_sh1_g0p6_ge_trim;
 3000858:	4786                	lw	a5,64(sp)
 300085a:	2a05                	jal	ra,300098a <ADC_InitVref+0x234>
 300085c:	a05a                	sh	a4,4(s0)
 300085e:	2a0d                	jal	ra,3000990 <ADC_InitVref+0x23a>
    g_adcTrimList[index++].offset = adc0Sh1.REG.data0.adc0_sh1_g0p6_oe_trim;
 3000860:	a07e                	sh	a5,6(s0)
    g_adcTrimList[index].gain = adc0Sh0.REG.data2.adc0_sh0_g0p75_ge_trim;
 3000862:	57e2                	lw	a5,56(sp)
 3000864:	221d                	jal	ra,300098a <ADC_InitVref+0x234>
 3000866:	a41a                	sh	a4,8(s0)
 3000868:	2225                	jal	ra,3000990 <ADC_InitVref+0x23a>
    g_adcTrimList[index++].offset = adc0Sh0.REG.data2.adc0_sh0_g0p75_oe_trim;
 300086a:	a43e                	sh	a5,10(s0)
    g_adcTrimList[index].gain = adc0Sh1.REG.data2.adc0_sh1_g0p75_ge_trim ;
 300086c:	47a6                	lw	a5,72(sp)
 300086e:	2a31                	jal	ra,300098a <ADC_InitVref+0x234>
 3000870:	a45a                	sh	a4,12(s0)
 3000872:	2a39                	jal	ra,3000990 <ADC_InitVref+0x23a>
    g_adcTrimList[index++].offset = adc0Sh1.REG.data2.adc0_sh1_g0p75_oe_trim;
 3000874:	a47e                	sh	a5,14(s0)
    FOTP_InfoGet(FOTP_INFO_RNG0, 24, &adc1Sh0.comData);   /* 24 is the number of adc calibration trim in otp */
 3000876:	0890                	addi	a2,sp,80
 3000878:	45e1                	li	a1,24
 300087a:	2231                	jal	ra,3000986 <ADC_InitVref+0x230>
    FOTP_InfoGet(FOTP_INFO_RNG0, 25, &adc1Sh1.comData);   /* 25 is the number of adc calibration trim in otp */
 300087c:	1090                	addi	a2,sp,96
 300087e:	45e5                	li	a1,25
 3000880:	2219                	jal	ra,3000986 <ADC_InitVref+0x230>
    g_adcTrimList[index].gain = adc1Sh0.REG.data0.adc1_sh0_g0p6_ge_trim;
 3000882:	47c6                	lw	a5,80(sp)
 3000884:	2219                	jal	ra,300098a <ADC_InitVref+0x234>
 3000886:	a81a                	sh	a4,16(s0)
 3000888:	2221                	jal	ra,3000990 <ADC_InitVref+0x23a>
    g_adcTrimList[index++].offset = adc1Sh0.REG.data0.adc1_sh0_g0p6_oe_trim;
 300088a:	a83e                	sh	a5,18(s0)
    g_adcTrimList[index].gain = adc1Sh1.REG.data0.adc1_sh1_g0p6_ge_trim;
 300088c:	5786                	lw	a5,96(sp)
 300088e:	28f5                	jal	ra,300098a <ADC_InitVref+0x234>
 3000890:	a85a                	sh	a4,20(s0)
 3000892:	28fd                	jal	ra,3000990 <ADC_InitVref+0x23a>
    g_adcTrimList[index++].offset = adc1Sh1.REG.data0.adc1_sh1_g0p6_oe_trim;
 3000894:	a87e                	sh	a5,22(s0)
    g_adcTrimList[index].gain = adc1Sh0.REG.data2.adc1_sh0_g0p75_ge_trim ;
 3000896:	47e6                	lw	a5,88(sp)
 3000898:	28cd                	jal	ra,300098a <ADC_InitVref+0x234>
 300089a:	ac1a                	sh	a4,24(s0)
 300089c:	28d5                	jal	ra,3000990 <ADC_InitVref+0x23a>
    g_adcTrimList[index++].offset = adc1Sh0.REG.data2.adc1_sh0_g0p75_oe_trim;
 300089e:	ac3e                	sh	a5,26(s0)
    g_adcTrimList[index].gain = adc1Sh1.REG.data2.adc1_sh1_g0p75_ge_trim ;
 30008a0:	57a6                	lw	a5,104(sp)
 30008a2:	20e5                	jal	ra,300098a <ADC_InitVref+0x234>
 30008a4:	ac5a                	sh	a4,28(s0)
 30008a6:	20ed                	jal	ra,3000990 <ADC_InitVref+0x23a>
    g_adcTrimList[index++].offset = adc1Sh1.REG.data2.adc1_sh1_g0p75_oe_trim;
 30008a8:	ac7e                	sh	a5,30(s0)
    FOTP_InfoGet(FOTP_INFO_RNG0, 26, &adc2Sh0.comData);   /* 26 is the number of adc calibration trim in otp */
 30008aa:	1890                	addi	a2,sp,112
 30008ac:	45e9                	li	a1,26
 30008ae:	28e1                	jal	ra,3000986 <ADC_InitVref+0x230>
    FOTP_InfoGet(FOTP_INFO_RNG0, 27, &adc2Sh1.comData);   /* 27 is the number of adc calibration trim in otp */
 30008b0:	0110                	addi	a2,sp,128
 30008b2:	45ed                	li	a1,27
 30008b4:	28c9                	jal	ra,3000986 <ADC_InitVref+0x230>
    g_adcTrimList[index].gain = adc2Sh0.REG.data0.adc2_sh0_g0p6_ge_trim;
 30008b6:	57c6                	lw	a5,112(sp)
 30008b8:	28c9                	jal	ra,300098a <ADC_InitVref+0x234>
 30008ba:	b01a                	sh	a4,32(s0)
 30008bc:	28d1                	jal	ra,3000990 <ADC_InitVref+0x23a>
    g_adcTrimList[index++].offset = adc2Sh0.REG.data0.adc2_sh0_g0p6_oe_trim;
 30008be:	b03e                	sh	a5,34(s0)
    g_adcTrimList[index].gain = adc2Sh1.REG.data0.adc2_sh1_g0p6_ge_trim;
 30008c0:	478a                	lw	a5,128(sp)
 30008c2:	20e1                	jal	ra,300098a <ADC_InitVref+0x234>
 30008c4:	b05a                	sh	a4,36(s0)
 30008c6:	20e9                	jal	ra,3000990 <ADC_InitVref+0x23a>
    g_adcTrimList[index++].offset = adc2Sh1.REG.data0.adc2_sh1_g0p6_oe_trim;
 30008c8:	b07e                	sh	a5,38(s0)
    g_adcTrimList[index].gain = adc2Sh0.REG.data2.adc2_sh0_g0p75_ge_trim ;
 30008ca:	57e6                	lw	a5,120(sp)
 30008cc:	287d                	jal	ra,300098a <ADC_InitVref+0x234>
 30008ce:	b41a                	sh	a4,40(s0)
 30008d0:	20c1                	jal	ra,3000990 <ADC_InitVref+0x23a>
    g_adcTrimList[index++].offset = adc2Sh0.REG.data2.adc2_sh0_g0p75_oe_trim;
 30008d2:	b43e                	sh	a5,42(s0)
    g_adcTrimList[index].gain = adc2Sh1.REG.data2.adc2_sh1_g0p75_ge_trim ;
 30008d4:	47aa                	lw	a5,136(sp)
 30008d6:	8cfd                	and	s1,s1,a5
    g_adcTrimList[index++].offset = adc2Sh1.REG.data2.adc2_sh1_g0p75_oe_trim;
 30008d8:	5af9491b          	andshf	s2,s2,a5,srl,13
    g_adcTrimList[index].gain = adc2Sh1.REG.data2.adc2_sh1_g0p75_ge_trim ;
 30008dc:	b446                	sh	s1,44(s0)
    g_adcTrimList[index++].offset = adc2Sh1.REG.data2.adc2_sh1_g0p75_oe_trim;
 30008de:	03241723          	sh	s2,46(s0) # 1010b02e <RAM_END+0xc10702e>
 */
static void ADC_CreateParmList(void)
{
    float gain, offset, tmpk2;
    unsigned int addrIndex, vrefIndex, shIndex, tmpIndex;
    for (unsigned int index = 0; index < LIST_NUM; ++index) {
 30008e2:	4481                	li	s1,0
        addrIndex = index / 4;   /* 4 used to create list */
        tmpIndex = index % 4;    /* 4 used to create list */
 30008e4:	0034f793          	andi	a5,s1,3
        vrefIndex = ((tmpIndex / 2) == 1) ? 1 : 2;  /* index of vref2.0 is 2, index of vref2.0 is 1 */
 30008e8:	17f9                	addi	a5,a5,-2
        addrIndex = index / 4;   /* 4 used to create list */
 30008ea:	0024d913          	srli	s2,s1,0x2
        vrefIndex = ((tmpIndex / 2) == 1) ? 1 : 2;  /* index of vref2.0 is 2, index of vref2.0 is 1 */
 30008ee:	4a05                	li	s4,1
 30008f0:	0207e1bb          	bltui	a5,2,30008f6 <ADC_InitVref+0x1a0>
 30008f4:	4a09                	li	s4,2
    unsigned int temp = g_adcTrimList[index].gain;
 30008f6:	0494079b          	addshf	a5,s0,s1,sll,2
    float ret = (float)temp / (float)4096;  /* 4096 for decimal conversion */
 30008fa:	239e                	lhu	a5,0(a5)
        shIndex = index % 2;     /* 2 used to create list */
        gain = ADC_GetGainTrim(index);
        offset = ADC_GetOffsetTrim(index);
 30008fc:	8526                	mv	a0,s1
        shIndex = index % 2;     /* 2 used to create list */
 30008fe:	0014f993          	andi	s3,s1,1
    float ret = (float)temp / (float)4096;  /* 4096 for decimal conversion */
 3000902:	d017f453          	fcvt.s.wu	fs0,a5
 3000906:	030047b7          	lui	a5,0x3004
 300090a:	b807a787          	flw	fa5,-1152(a5) # 3003b80 <__rodata_start+0x8>
        tmpk2 = (float)(2048 - (2048 - offset) * gain);     /* 2048 is formula parameters */
        g_adcParmList[addrIndex][vrefIndex][shIndex].k1 = gain;
 300090e:	032a595b          	muliadd	s2,s4,s2,3
 3000912:	0329891b          	addshf	s2,s3,s2,sll,1
    float ret = (float)temp / (float)4096;  /* 4096 for decimal conversion */
 3000916:	10f47453          	fmul.s	fs0,fs0,fa5
        offset = ADC_GetOffsetTrim(index);
 300091a:	3521                	jal	ra,3000722 <ADC_GetOffsetTrim>
        tmpk2 = (float)(2048 - (2048 - offset) * gain);     /* 2048 is formula parameters */
 300091c:	03004737          	lui	a4,0x3004
 3000920:	b8872707          	flw	fa4,-1144(a4) # 3003b88 <__rodata_start+0x10>
        g_adcParmList[addrIndex][vrefIndex][shIndex].k1 = gain;
 3000924:	9c018793          	addi	a5,gp,-1600 # 4000014 <g_adcParmList>
 3000928:	0727879b          	addshf	a5,a5,s2,sll,3
        tmpk2 = (float)(2048 - (2048 - offset) * gain);     /* 2048 is formula parameters */
 300092c:	08a777d3          	fsub.s	fa5,fa4,fa0
        g_adcParmList[addrIndex][vrefIndex][shIndex].k1 = gain;
 3000930:	e380                	fsw	fs0,0(a5)
    for (unsigned int index = 0; index < LIST_NUM; ++index) {
 3000932:	0485                	addi	s1,s1,1
        tmpk2 = (float)(2048 - (2048 - offset) * gain);     /* 2048 is formula parameters */
 3000934:	7087f44b          	fnmsub.s	fs0,fa5,fs0,fa4
        g_adcParmList[addrIndex][vrefIndex][shIndex].k2 = tmpk2;
 3000938:	e3c0                	fsw	fs0,4(a5)
    for (unsigned int index = 0; index < LIST_NUM; ++index) {
 300093a:	0ce49abb          	bnei	s1,12,30008e4 <ADC_InitVref+0x18e>
}
 300093e:	647a                	flw	fs0,156(sp)
 3000940:	610d                	addi	sp,sp,160
 3000942:	8064                	popret	{ra,s0-s4},32
        adcVrefTrim.REG.data1.adcvref_bg_trim = 0x10;             /* Use the default value 0x10 */
 3000944:	5792                	lw	a5,36(sp)
        adcVrefTrim.REG.data3.adcvref_refbuf0_trim_2p5v = 0x10;
 3000946:	5732                	lw	a4,44(sp)
        adcVrefTrim.REG.data2.adcvref_refbuf2_trim_2p0v = 0x10;
 3000948:	ffff 83ff 069f      	l.li	a3,0xffff83ff
        adcVrefTrim.REG.data1.adcvref_bg_trim = 0x10;             /* Use the default value 0x10 */
 300094e:	c007f793          	andi	a5,a5,-1024
        adcVrefTrim.REG.data1.adcvref_adcldo_trim = 0x10;
 3000952:	2107e793          	ori	a5,a5,528
 3000956:	d23e                	sw	a5,36(sp)
        adcVrefTrim.REG.data2.adcvref_refbuf0_trim_2p0v = 0x10;
 3000958:	57a2                	lw	a5,40(sp)
        adcVrefTrim.REG.data2.adcvref_refbuf2_trim_2p0v = 0x10;
 300095a:	6611                	lui	a2,0x4
        adcVrefTrim.REG.data3.adcvref_refbuf0_trim_2p5v = 0x10;
 300095c:	c0077713          	andi	a4,a4,-1024
        adcVrefTrim.REG.data2.adcvref_refbuf0_trim_2p0v = 0x10;
 3000960:	c007f793          	andi	a5,a5,-1024
        adcVrefTrim.REG.data2.adcvref_refbuf1_trim_2p0v = 0x10;
 3000964:	2107e793          	ori	a5,a5,528
        adcVrefTrim.REG.data2.adcvref_refbuf2_trim_2p0v = 0x10;
 3000968:	8ff5                	and	a5,a5,a3
 300096a:	8fd1                	or	a5,a5,a2
        adcVrefTrim.REG.data3.adcvref_refbuf1_trim_2p5v = 0x10;
 300096c:	21076713          	ori	a4,a4,528
        adcVrefTrim.REG.data2.adcvref_refbuf2_trim_2p0v = 0x10;
 3000970:	d43e                	sw	a5,40(sp)
        adcVrefTrim.REG.data3.adcvref_refbuf2_trim_2p5v = 0x10;
 3000972:	00d777b3          	and	a5,a4,a3
 3000976:	8fd1                	or	a5,a5,a2
 3000978:	d63e                	sw	a5,44(sp)
 300097a:	bd39                	j	3000798 <ADC_InitVref+0x42>
    SYSCTRL1->ADC2_VREF_CTRL.BIT.adcvref_refbuf_trim2_2p0v = adcVrefTrim.REG.data2.adcvref_refbuf2_trim_2p0v;
 300097c:	8afd                	andi	a3,a3,31
 300097e:	8ff9                	and	a5,a5,a4
 3000980:	20d7a79b          	orshf	a5,a5,a3,sll,16
 3000984:	8082                	ret
    FOTP_InfoGet(FOTP_INFO_RNG0, 27, &adc2Sh1.comData);   /* 27 is the number of adc calibration trim in otp */
 3000986:	4501                	li	a0,0
 3000988:	a2d1                	j	3000b4c <FOTP_InfoGet>
    g_adcTrimList[index].gain = adc2Sh0.REG.data2.adc2_sh0_g0p75_ge_trim ;
 300098a:	0097f733          	and	a4,a5,s1
 300098e:	8082                	ret
    g_adcTrimList[index++].offset = adc2Sh0.REG.data2.adc2_sh0_g0p75_oe_trim;
 3000990:	5af9479b          	andshf	a5,s2,a5,srl,13
 3000994:	8082                	ret

03000996 <CRG_SetCoreClockSelect>:
 * @brief Set Crg Core clock select
 * @param coreClkSelect Input core clock select value
 * @retval None
 */
void CRG_SetCoreClockSelect(CRG_CoreClkSelect coreClkSelect)
{
 3000996:	8218                	push	{ra},-48
    CRG_Handle crg;
    crg.baseAddress = CRG;
 3000998:	100007b7          	lui	a5,0x10000
    crg.coreClkSelect = coreClkSelect;
 300099c:	ce2a                	sw	a0,28(sp)
    HAL_CRG_SetCoreClockSelect(&crg);
 300099e:	0048                	addi	a0,sp,4
    crg.baseAddress = CRG;
 30009a0:	c23e                	sw	a5,4(sp)
    HAL_CRG_SetCoreClockSelect(&crg);
 30009a2:	738010ef          	jal	ra,30020da <HAL_CRG_SetCoreClockSelect>
 30009a6:	8214                	popret	{ra},48

030009a8 <FLASH_ClockConfig>:
 * @brief Set flash clock frequence base on hclk
 * @param coreClkSelect core clock select
 * @retval None
 */
void FLASH_ClockConfig(CRG_CoreClkSelect coreClkSelect)
{
 30009a8:	8018                	push	{ra},-16
    switch (coreClkSelect) {
 30009aa:	010504bb          	beqi	a0,1,30009bc <FLASH_ClockConfig+0x14>
 30009ae:	c161                	beqz	a0,3000a6e <FLASH_ClockConfig+0xc6>
 30009b0:	02250e3b          	beqi	a0,2,3000a68 <FLASH_ClockConfig+0xc0>
            hclk = LOSC_FREQ;
 30009b4:	0000 7d00 051f      	l.li	a0,0x7d00
 30009ba:	a021                	j	30009c2 <FLASH_ClockConfig+0x1a>
            hclk = XTRAIL_FREQ;
 30009bc:	01c9 c380 051f      	l.li	a0,0x1c9c380
    unsigned int smwTimerOptVal;

    hclk = GetFlashFreq(coreClkSelect);
    pclk = hclk >> 1;

    cfg.reg = efc->EFLASH_CLK_CFG.reg;
 30009c2:	147117b7          	lui	a5,0x14711
 30009c6:	9407a783          	lw	a5,-1728(a5) # 14710940 <RAM_END+0x1070c940>
    cfg.BIT.busclk_switch_protect_enable = BASE_CFG_SET;
    cfg.BIT.busclk_sw_req = BASE_CFG_SET;
 30009ca:	00300737          	lui	a4,0x300
    return (val + modulo - 1) / modulo;
 30009ce:	000f46b7          	lui	a3,0xf4
    cfg.BIT.busclk_sw_req = BASE_CFG_SET;
 30009d2:	8fd9                	or	a5,a5,a4
    pclk = hclk >> 1;
 30009d4:	00155613          	srli	a2,a0,0x1
    return (val + modulo - 1) / modulo;
 30009d8:	23f68713          	addi	a4,a3,575 # f423f <FLASH_SIZE+0xcc243>
 30009dc:	9732                	add	a4,a4,a2
 30009de:	24068693          	addi	a3,a3,576
 30009e2:	02d75733          	divu	a4,a4,a3

    cfg.BIT.ef_timer_option_unit = RoundingUp(pclk, FREQ_1MHz);
 30009e6:	f0000693          	li	a3,-256
 30009ea:	e8d7c79b          	andshf	a5,a5,a3,ror,20
    freq = hclk;
    sreadDiv = 0;
    while (freq > SREAD_DIV_STEP) {
 30009ee:	004c 4b40 059f      	l.li	a1,0x4c4b40
    freq = hclk;
 30009f4:	86aa                	mv	a3,a0
    cfg.BIT.ef_timer_option_unit = RoundingUp(pclk, FREQ_1MHz);
 30009f6:	9f01                	uxtb	a4
 30009f8:	18e7a79b          	orshf	a5,a5,a4,sll,12
    sreadDiv = 0;
 30009fc:	4701                	li	a4,0
    while (freq > SREAD_DIV_STEP) {
 30009fe:	06d5ec63          	bltu	a1,a3,3000a76 <FLASH_ClockConfig+0xce>
        sreadDiv++;
        freq >>= 1;
    }
    cfg.BIT.sread_div = sreadDiv;
 3000a02:	8b1d                	andi	a4,a4,7
    return (val + modulo - 1) / modulo;
 3000a04:	02faf6b7          	lui	a3,0x2faf
    cfg.BIT.sread_div = sreadDiv;
 3000a08:	8ff7f793          	andi	a5,a5,-1793
 3000a0c:	10e7a79b          	orshf	a5,a5,a4,sll,8
    return (val + modulo - 1) / modulo;
 3000a10:	07f68713          	addi	a4,a3,127 # 2faf07f <RAM_CODE_START+0xfaf07f>
 3000a14:	972a                	add	a4,a4,a0
 3000a16:	08068693          	addi	a3,a3,128
 3000a1a:	02d75733          	divu	a4,a4,a3
    cfg.BIT.nread_div = RoundingUp(hclk, NREAD_DIV_STEP) - 1;
 3000a1e:	f0f7f793          	andi	a5,a5,-241
    cfg.BIT.m20ns_div = cfg.BIT.nread_div;
    efc->EFLASH_CLK_CFG.reg = cfg.reg;
 3000a22:	147116b7          	lui	a3,0x14711
    cfg.BIT.nread_div = RoundingUp(hclk, NREAD_DIV_STEP) - 1;
 3000a26:	177d                	addi	a4,a4,-1
 3000a28:	8b3d                	andi	a4,a4,15
 3000a2a:	08e7a79b          	orshf	a5,a5,a4,sll,4
    cfg.BIT.m20ns_div = cfg.BIT.nread_div;
 3000a2e:	9bc1                	andi	a5,a5,-16
 3000a30:	8fd9                	or	a5,a5,a4
    efc->EFLASH_CLK_CFG.reg = cfg.reg;
 3000a32:	94f6a023          	sw	a5,-1728(a3) # 14710940 <RAM_END+0x1070c940>
    return (val + modulo - 1) / modulo;
 3000a36:	009897b7          	lui	a5,0x989
 3000a3a:	67f78713          	addi	a4,a5,1663 # 98967f <FLASH_SIZE+0x961683>
 3000a3e:	963a                	add	a2,a2,a4
 3000a40:	68078793          	addi	a5,a5,1664
 3000a44:	02f65733          	divu	a4,a2,a5
 3000a48:	8636                	mv	a2,a3
    smwTimerOptVal = RoundingUp(pclk, SWMTIMER_OPTVAL_STEP);
    if (smwTimerOptVal < SMWTIMER_OPTVAL_MIN_VAL) {
        smwTimerOptVal = SMWTIMER_OPTVAL_MIN_VAL;
    }
    efc->SMW_TIMER_OPTION.BIT.smw_timer_option_value = smwTimerOptVal;
 3000a4a:	020771bb          	bgeui	a4,2,3000a50 <FLASH_ClockConfig+0xa8>
 3000a4e:	4709                	li	a4,2
 3000a50:	e1062783          	lw	a5,-496(a2) # 3e10 <RAM_SIZE+0x1610>
 3000a54:	01f77693          	andi	a3,a4,31
 3000a58:	5701                	li	a4,-32
 3000a5a:	f0e7c79b          	andshf	a5,a5,a4,ror,24
 3000a5e:	10d7a79b          	orshf	a5,a5,a3,sll,8
 3000a62:	e0f62823          	sw	a5,-496(a2)
}
 3000a66:	8014                	popret	{ra},16
            hclk = HAL_CRG_GetPllFreq();
 3000a68:	690010ef          	jal	ra,30020f8 <HAL_CRG_GetPllFreq>
 3000a6c:	bf99                	j	30009c2 <FLASH_ClockConfig+0x1a>
            hclk = HOSC_FREQ;
 3000a6e:	017d 7840 051f      	l.li	a0,0x17d7840
 3000a74:	b7b9                	j	30009c2 <FLASH_ClockConfig+0x1a>
        sreadDiv++;
 3000a76:	0705                	addi	a4,a4,1
        freq >>= 1;
 3000a78:	8285                	srli	a3,a3,0x1
 3000a7a:	b751                	j	30009fe <FLASH_ClockConfig+0x56>

03000a7c <FLASH_WaitClockConfigDone>:
 * @retval None
 */
void FLASH_WaitClockConfigDone(void)
{
    EFC_RegStruct *efc = EFC;
    while (efc->EFLASH_CLK_CFG.BIT.busclk_sw_req == BASE_CFG_SET) {
 3000a7c:	147117b7          	lui	a5,0x14711
 3000a80:	9407a783          	lw	a5,-1728(a5) # 14710940 <RAM_END+0x1070c940>
 3000a84:	00b79713          	slli	a4,a5,0xb
 3000a88:	fe074ae3          	bltz	a4,3000a7c <FLASH_WaitClockConfigDone>
        ; /* Wait Eflash frequency switching completes configuration query */
    }
 3000a8c:	8082                	ret

03000a8e <PGA_InitVref>:
#include "fotp_info_read.h"
#include "pga_ip.h"
#include "pgainit.h"

void PGA_InitVref(void)
{
 3000a8e:	8118                	push	{ra},-32
    FOTP_INFO_RGN0_NUMBER_31 trimPga;
    
    FOTP_InfoGet(FOTP_INFO_RNG0, 31, &trimPga.comData);  /* 31 is the number of pga_vref in otp */
 3000a90:	860a                	mv	a2,sp
 3000a92:	45fd                	li	a1,31
 3000a94:	4501                	li	a0,0
 3000a96:	285d                	jal	ra,3000b4c <FOTP_InfoGet>
    if (g_trimEnable == true) { /* if trim enable */
 3000a98:	ab01c783          	lbu	a5,-1360(gp) # 4000104 <g_trimEnable>
 3000a9c:	c78d                	beqz	a5,3000ac6 <PGA_InitVref+0x38>
        PGA0->PGA_CTRL1.BIT.pga_trim_ofstp = trimPga.REG.data0.pga0_poffset_trim;
 3000a9e:	182006b7          	lui	a3,0x18200
 3000aa2:	4782                	lw	a5,0(sp)
 3000aa4:	42d8                	lw	a4,4(a3)
 3000aa6:	01f7f613          	andi	a2,a5,31
 3000aaa:	fe077793          	andi	a5,a4,-32
 3000aae:	8fd1                	or	a5,a5,a2
 3000ab0:	c2dc                	sw	a5,4(a3)
        PGA1->PGA_CTRL1.BIT.pga_trim_ofstp = trimPga.REG.data0.pga1_poffset_trim;
 3000ab2:	4782                	lw	a5,0(sp)
 3000ab4:	18201637          	lui	a2,0x18201
 3000ab8:	83a9                	srli	a5,a5,0xa
 3000aba:	2039                	jal	ra,3000ac8 <PGA_InitVref+0x3a>
        PGA2->PGA_CTRL1.BIT.pga_trim_ofstp = trimPga.REG.data0.pga2_poffset_trim;
 3000abc:	4782                	lw	a5,0(sp)
 3000abe:	18202637          	lui	a2,0x18202
 3000ac2:	83d1                	srli	a5,a5,0x14
 3000ac4:	2011                	jal	ra,3000ac8 <PGA_InitVref+0x3a>
    }
 3000ac6:	8114                	popret	{ra},32
        PGA2->PGA_CTRL1.BIT.pga_trim_ofstp = trimPga.REG.data0.pga2_poffset_trim;
 3000ac8:	4258                	lw	a4,4(a2)
 3000aca:	01f7f693          	andi	a3,a5,31
 3000ace:	fe077793          	andi	a5,a4,-32
 3000ad2:	8fd5                	or	a5,a5,a3
 3000ad4:	c25c                	sw	a5,4(a2)
 3000ad6:	8082                	ret

03000ad8 <PMC_InitVref>:
#include "fotp_info_read.h"
#include "pmc_ip.h"
#include "pmcinit.h"

void PMC_InitVref(void)
{
 3000ad8:	8118                	push	{ra},-32
    FOTP_INFO_RGN0_NUMBER_21 trimPmc;

    if (g_trimEnable == true) { /* if trim enable */
 3000ada:	ab01c783          	lbu	a5,-1360(gp) # 4000104 <g_trimEnable>
 3000ade:	c39d                	beqz	a5,3000b04 <PMC_InitVref+0x2c>
        FOTP_InfoGet(FOTP_INFO_RNG0, 21, &trimPmc.comData);  /* 21 is the number of pmc_vref in otp */
 3000ae0:	860a                	mv	a2,sp
 3000ae2:	45d5                	li	a1,21
 3000ae4:	4501                	li	a0,0
 3000ae6:	209d                	jal	ra,3000b4c <FOTP_InfoGet>
        PMC->PMU_CLDO.BIT.pmu_cldo_trim = trimPmc.REG.data0.pmu_cldo_trim;
 3000ae8:	4782                	lw	a5,0(sp)
 3000aea:	147e1637          	lui	a2,0x147e1
 3000aee:	a0c62703          	lw	a4,-1524(a2) # 147e0a0c <RAM_END+0x107dca0c>
 3000af2:	83a9                	srli	a5,a5,0xa
 3000af4:	5685                	li	a3,-31
 3000af6:	8bbd                	andi	a5,a5,15
 3000af8:	e2d7471b          	andshf	a4,a4,a3,ror,17
 3000afc:	20f7279b          	orshf	a5,a4,a5,sll,16
 3000b00:	a0f62623          	sw	a5,-1524(a2)
    }
 3000b04:	8114                	popret	{ra},32

03000b06 <SYSTICK_GetCRGHZ>:
{
    /* Get the Systick IP */
#ifdef NOS_TASK_SUPPORT
    return HAL_CRG_GetCoreClkFreq();
#else
    return HAL_CRG_GetIpFreq(SYSTICK_BASE);
 3000b06:	1430 1020 051f      	l.li	a0,0x14301020
 3000b0c:	63a0106f          	j	3002146 <HAL_CRG_GetIpFreq>

03000b10 <DCL_SYSTICK_GetTick>:
#ifdef NOS_TASK_SUPPORT
    /* Return the load value(period) and the counter value, make the returned counter in count up mode */
    return DCL_GetCpuCycle();
#else
    /* Invert the counter value, make the returned counter in count up mode */
    return ~SYSTICK->timer_value;
 3000b10:	1430 1020 079f      	l.li	a5,0x14301020
 3000b16:	43c8                	lw	a0,4(a5)
#endif
}
 3000b18:	fff54513          	not	a0,a0
 3000b1c:	8082                	ret

03000b1e <SYSTICK_Init>:
  * @brief   Init the systick
  * @param   None
  * @retval  None
  */
void SYSTICK_Init()
{
 3000b1e:	8028                	push	{ra,s0},-16
    /* Choose the config to support GetTick and Delay */
    g_systickHandle.baseAddress = SYSTICK;
 3000b20:	ab418413          	addi	s0,gp,-1356 # 4000108 <g_systickHandle>
 3000b24:	1430 1020 079f      	l.li	a5,0x14301020
 3000b2a:	c01c                	sw	a5,0(s0)
#ifdef NOS_TASK_SUPPORT
    /* Change the period load to the user defined usecond */
    g_systickHandle.load        = (HAL_CRG_GetIpFreq(SYSTICK_BASE) / CRG_FREQ_1MHz) * CFG_SYSTICK_TICKINTERVAL_US;
    g_systickHandle.bgLoad      = (HAL_CRG_GetIpFreq(SYSTICK_BASE) / CRG_FREQ_1MHz) * CFG_SYSTICK_TICKINTERVAL_US;
#else
    g_systickHandle.load        = SYSTICK_MAX_VALUE;
 3000b2c:	57fd                	li	a5,-1
    g_systickHandle.bgLoad      = SYSTICK_MAX_VALUE;
#endif
    g_systickHandle.mode        = TIMER_MODE_RUN_PERIODIC;
    g_systickHandle.prescaler   = TIMERPRESCALER_NO_DIV;
 3000b2e:	4701                	li	a4,0
    g_systickHandle.load        = SYSTICK_MAX_VALUE;
 3000b30:	c05c                	sw	a5,4(s0)
    g_systickHandle.bgLoad      = SYSTICK_MAX_VALUE;
 3000b32:	cc1c                	sw	a5,24(s0)
    g_systickHandle.size        = TIMER_SIZE_32BIT;
    /* Don't Support IRQ because only needs to read the value of systick */
    g_systickHandle.interruptEn = BASE_CFG_DISABLE;
    HAL_TIMER_Init(&g_systickHandle);
 3000b34:	8522                	mv	a0,s0
    g_systickHandle.mode        = TIMER_MODE_RUN_PERIODIC;
 3000b36:	4785                	li	a5,1
 3000b38:	c41c                	sw	a5,8(s0)
    g_systickHandle.prescaler   = TIMERPRESCALER_NO_DIV;
 3000b3a:	c818                	sw	a4,16(s0)
    g_systickHandle.size        = TIMER_SIZE_32BIT;
 3000b3c:	c85c                	sw	a5,20(s0)
    g_systickHandle.interruptEn = BASE_CFG_DISABLE;
 3000b3e:	c458                	sw	a4,12(s0)
    HAL_TIMER_Init(&g_systickHandle);
 3000b40:	0c7010ef          	jal	ra,3002406 <HAL_TIMER_Init>
#ifdef NOS_TASK_SUPPORT
    /* Support IRQ to upload the totalCycle and detect the timeout lists */
    SYSTICK_IRQ_Enable();
#endif
    HAL_TIMER_Start(&g_systickHandle);
 3000b44:	8522                	mv	a0,s0
 3000b46:	8020                	pop	{ra,s0},16
    HAL_TIMER_Start(&g_systickHandle);
 3000b48:	1530106f          	j	300249a <HAL_TIMER_Start>

03000b4c <FOTP_InfoGet>:
  * @param buf   Buffer of read data
  * @retval BASE_STATUS_ERROR fail.
  * @retval BASE_STATUS_OK success.
  */
unsigned int FOTP_InfoGet(FOTP_InfoRngType type, unsigned int index, FOTP_CommonData *buf)
{
 3000b4c:	86aa                	mv	a3,a0
    EFC_RegStruct *p = EFC;
    unsigned int addr;

    if (buf == NULL) {
        return BASE_STATUS_ERROR;
 3000b4e:	4505                	li	a0,1
    if (buf == NULL) {
 3000b50:	10060763          	beqz	a2,3000c5e <FOTP_InfoGet+0x112>
    }
    
    if ((type >= FOTP_INFO_MAXTYPE) || (index > FOTP_INFO_REG_MAX_ID)) {
 3000b54:	0246f2bb          	bgeui	a3,2,3000c5e <FOTP_InfoGet+0x112>
 3000b58:	1ff00793          	li	a5,511
 3000b5c:	10b7e163          	bltu	a5,a1,3000c5e <FOTP_InfoGet+0x112>
        return BASE_STATUS_ERROR;
    }

    /* If there is a read command, return */
    if (p->EFLASH_CMD.BIT.cmd_start) {
 3000b60:	14710837          	lui	a6,0x14710
 3000b64:	00082703          	lw	a4,0(a6) # 14710000 <RAM_END+0x1070c000>
 3000b68:	8f69                	and	a4,a4,a0
 3000b6a:	eb75                	bnez	a4,3000c5e <FOTP_InfoGet+0x112>
        return BASE_STATUS_ERROR;
    }

    p->MAGIC_LOCK = FLASH_KEY_REGISTER_UNLOCK_VALUE;
 3000b6c:	fedc ba98 079f      	l.li	a5,0xfedcba98
 3000b72:	20f82023          	sw	a5,512(a6)

    /* Configure the read command parameters and start the read command */
    addr = (type == FOTP_INFO_RNG0) ? FOTP_INFO_RNG0_BASEADDR : FOTP_INFO_RNG1_BASEADDR;
 3000b76:	008007b7          	lui	a5,0x800
 3000b7a:	c299                	beqz	a3,3000b80 <FOTP_InfoGet+0x34>
 3000b7c:	008027b7          	lui	a5,0x802
    addr += index * REG_WORDS_NUM;
    p->EFLASH_ADDR.BIT.cmd_addr = addr >> 2; /* Right shift 2 bit change to word */
 3000b80:	14710737          	lui	a4,0x14710
    addr += index * REG_WORDS_NUM;
 3000b84:	08b7859b          	addshf	a1,a5,a1,sll,4
    p->EFLASH_ADDR.BIT.cmd_addr = addr >> 2; /* Right shift 2 bit change to word */
 3000b88:	56fd                	li	a3,-1
 3000b8a:	435c                	lw	a5,4(a4)
 3000b8c:	82a9                	srli	a3,a3,0xa
 3000b8e:	44b6c59b          	andshf	a1,a3,a1,srl,2
 3000b92:	3ff00693          	li	a3,1023
 3000b96:	d0d7c79b          	andshf	a5,a5,a3,ror,8
 3000b9a:	04b7a79b          	orshf	a5,a5,a1,sll,2
 3000b9e:	c35c                	sw	a5,4(a4)
    p->EFLASH_CMD.BIT.cmd_code = FLASH_OPERATION_READ;
 3000ba0:	431c                	lw	a5,0(a4)
    p->EFLASH_CMD.BIT.cmd_read_size = FLASH_READ_128BIT;
 3000ba2:	569d                	li	a3,-25
    p->EFLASH_CMD.BIT.cmd_code = FLASH_OPERATION_READ;
 3000ba4:	8ff7f793          	andi	a5,a5,-1793
 3000ba8:	1007e793          	ori	a5,a5,256
 3000bac:	c31c                	sw	a5,0(a4)
    p->EFLASH_CMD.BIT.cmd_read_size = FLASH_READ_128BIT;
 3000bae:	431c                	lw	a5,0(a4)
 3000bb0:	ced7c79b          	andshf	a5,a5,a3,ror,7
 3000bb4:	100006b7          	lui	a3,0x10000
 3000bb8:	8fd5                	or	a5,a5,a3
 3000bba:	c31c                	sw	a5,0(a4)
    p->EFLASH_CMD.BIT.cmd_start = BASE_CFG_SET;
 3000bbc:	431c                	lw	a5,0(a4)
 3000bbe:	0017e793          	ori	a5,a5,1
 3000bc2:	c31c                	sw	a5,0(a4)

    while (p->EFLASH_CMD.BIT.cmd_start) {
 3000bc4:	147107b7          	lui	a5,0x14710
 3000bc8:	439c                	lw	a5,0(a5)
 3000bca:	8b85                	andi	a5,a5,1
 3000bcc:	ffe5                	bnez	a5,3000bc4 <FOTP_InfoGet+0x78>
        ;
    }
    while (p->EFLASH_CMD.BIT.exec_state) {
 3000bce:	14710737          	lui	a4,0x14710
 3000bd2:	431c                	lw	a5,0(a4)
 3000bd4:	8399                	srli	a5,a5,0x6
 3000bd6:	8b8d                	andi	a5,a5,3
 3000bd8:	fbfd                	bnez	a5,3000bce <FOTP_InfoGet+0x82>
    if (efc->INT_RAW_STATUS.BIT.int_raw_err_illegal ||
 3000bda:	10072783          	lw	a5,256(a4) # 14710100 <RAM_END+0x1070c100>
 3000bde:	00f79693          	slli	a3,a5,0xf
 3000be2:	0406c463          	bltz	a3,3000c2a <FOTP_InfoGet+0xde>
        efc->INT_RAW_STATUS.BIT.int_raw_err_ecc_corr ||
 3000be6:	10072783          	lw	a5,256(a4)
    if (efc->INT_RAW_STATUS.BIT.int_raw_err_illegal ||
 3000bea:	00c79693          	slli	a3,a5,0xc
 3000bee:	0206ce63          	bltz	a3,3000c2a <FOTP_InfoGet+0xde>
        efc->INT_RAW_STATUS.BIT.int_raw_err_ecc_chk) {
 3000bf2:	10072783          	lw	a5,256(a4)
        efc->INT_RAW_STATUS.BIT.int_raw_err_ecc_corr ||
 3000bf6:	00b79693          	slli	a3,a5,0xb
 3000bfa:	0206c863          	bltz	a3,3000c2a <FOTP_InfoGet+0xde>
    if (FOTP_CheckReadStatus(p) != BASE_STATUS_OK) {
        return BASE_STATUS_ERROR;
    }
    /* Read data from FIFO to buffer */
    for (unsigned int i = 0; i < sizeof(buf->data) / sizeof(buf->data[0]); ++i) {
        buf->data[i] = p->FLASH_RDATA;
 3000bfe:	60072783          	lw	a5,1536(a4)
    }
    p->INT_CLEAR.BIT.int_clr_finish = BASE_CFG_SET;
    p->MAGIC_LOCK = FLASH_KEY_REGISTER_LOCK_VALUE;
    return BASE_STATUS_OK;
 3000c02:	4501                	li	a0,0
        buf->data[i] = p->FLASH_RDATA;
 3000c04:	c21c                	sw	a5,0(a2)
 3000c06:	60072783          	lw	a5,1536(a4)
 3000c0a:	c25c                	sw	a5,4(a2)
 3000c0c:	60072783          	lw	a5,1536(a4)
 3000c10:	c61c                	sw	a5,8(a2)
 3000c12:	60072783          	lw	a5,1536(a4)
 3000c16:	c65c                	sw	a5,12(a2)
    p->INT_CLEAR.BIT.int_clr_finish = BASE_CFG_SET;
 3000c18:	10c72783          	lw	a5,268(a4)
 3000c1c:	0107e793          	ori	a5,a5,16
 3000c20:	10f72623          	sw	a5,268(a4)
    p->MAGIC_LOCK = FLASH_KEY_REGISTER_LOCK_VALUE;
 3000c24:	20072023          	sw	zero,512(a4)
    return BASE_STATUS_OK;
 3000c28:	8082                	ret
        efc->INT_CLEAR.BIT.int_clr_err_ecc_corr = BASE_CFG_SET;
 3000c2a:	147106b7          	lui	a3,0x14710
 3000c2e:	10c6a783          	lw	a5,268(a3) # 1471010c <RAM_END+0x1070c10c>
 3000c32:	00080737          	lui	a4,0x80
        return BASE_STATUS_ERROR;
 3000c36:	4505                	li	a0,1
        efc->INT_CLEAR.BIT.int_clr_err_ecc_corr = BASE_CFG_SET;
 3000c38:	8fd9                	or	a5,a5,a4
 3000c3a:	10f6a623          	sw	a5,268(a3)
 3000c3e:	10c6a783          	lw	a5,268(a3)
        efc->INT_CLEAR.BIT.int_clr_err_illegal = BASE_CFG_SET;
 3000c42:	6741                	lui	a4,0x10
 3000c44:	8fd9                	or	a5,a5,a4
 3000c46:	10f6a623          	sw	a5,268(a3)
 3000c4a:	10c6a783          	lw	a5,268(a3)
        efc->INT_CLEAR.BIT.int_clr_err_ecc_chk = BASE_CFG_SET;
 3000c4e:	00100737          	lui	a4,0x100
 3000c52:	8fd9                	or	a5,a5,a4
 3000c54:	10f6a623          	sw	a5,268(a3)
        efc->MAGIC_LOCK = FLASH_KEY_REGISTER_LOCK_VALUE;
 3000c58:	2006a023          	sw	zero,512(a3)
 3000c5c:	8082                	ret
 3000c5e:	8082                	ret

03000c60 <GetCrgIpMatchInfo>:
  * @param baseAddr The ip base address
  * @retval The Address(offset) in g_crgIpMatch if match success
  * @retval 0 if match fail
  */
CHIP_CrgIpMatchInfo *GetCrgIpMatchInfo(const void *baseAddr)
{
 3000c60:	0300 3b8c 071f      	l.li	a4,0x3003b8c
    unsigned int i;
    for (i = 0; i < sizeof(g_crgIpMatch) / sizeof(g_crgIpMatch[0]); ++i) {
 3000c66:	4681                	li	a3,0
 3000c68:	863a                	mv	a2,a4
        if (baseAddr == g_crgIpMatch[i].ipBaseAddr) {
 3000c6a:	431c                	lw	a5,0(a4)
 3000c6c:	00a79563          	bne	a5,a0,3000c76 <GetCrgIpMatchInfo+0x16>
            return (CHIP_CrgIpMatchInfo *)&g_crgIpMatch[i];
 3000c70:	0cd6155b          	muliadd	a0,a2,a3,12
 3000c74:	8082                	ret
    for (i = 0; i < sizeof(g_crgIpMatch) / sizeof(g_crgIpMatch[0]); ++i) {
 3000c76:	0685                	addi	a3,a3,1
 3000c78:	0731                	addi	a4,a4,12
 3000c7a:	33f69c3b          	bnei	a3,51,3000c6a <GetCrgIpMatchInfo+0xa>
        }
    }
    return (CHIP_CrgIpMatchInfo *)0;
 3000c7e:	4501                	li	a0,0
}
 3000c80:	8082                	ret

03000c82 <HAL_ACMP_Init>:
    ACMP_PARAM_CHECK_WITH_RET(acmpHandle->hysteresisVol <= ACMP_HYS_VOL_30MV, BASE_STATUS_ERROR);
    ACMP_PARAM_CHECK_WITH_RET(acmpHandle->filterCtrl.desharkByStep >= 0, BASE_STATUS_ERROR);
    ACMP_PARAM_CHECK_WITH_RET(acmpHandle->filterCtrl.desharkByStep <= ACMP_DESHARK_BY_CLK_MAX, BASE_STATUS_ERROR);
    ACMP_PARAM_CHECK_WITH_RET(acmpHandle->filterCtrl.desharkByTimes >= 0, BASE_STATUS_ERROR);
    ACMP_PARAM_CHECK_WITH_RET(acmpHandle->filterCtrl.desharkByTimes <= ACMP_DESHARK_BY_CMP_MAX, BASE_STATUS_ERROR);
    if (acmpHandle->enable == false) {
 3000c82:	02b54703          	lbu	a4,43(a0)
 3000c86:	411c                	lw	a5,0(a0)
 3000c88:	eb11                	bnez	a4,3000c9c <HAL_ACMP_Init+0x1a>
        acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_ana_en = BASE_CFG_DISABLE;
 3000c8a:	4398                	lw	a4,0(a5)
 3000c8c:	9b79                	andi	a4,a4,-2
 3000c8e:	c398                	sw	a4,0(a5)
        acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_dig_en = BASE_CFG_DISABLE;
 3000c90:	4398                	lw	a4,0(a5)
 3000c92:	fdf77713          	andi	a4,a4,-33
 3000c96:	c398                	sw	a4,0(a5)
    }
    /* set hysteresis voltage */
    HAL_ACMP_SetHystVol(acmpHandle, acmpHandle->hysteresisVol);

    return BASE_STATUS_OK;
}
 3000c98:	4501                	li	a0,0
 3000c9a:	8082                	ret
        acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_ana_en = BASE_CFG_ENABLE;
 3000c9c:	4398                	lw	a4,0(a5)
 3000c9e:	00176713          	ori	a4,a4,1
 3000ca2:	c398                	sw	a4,0(a5)
        acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_dig_en = BASE_CFG_ENABLE;
 3000ca4:	4398                	lw	a4,0(a5)
 3000ca6:	02076713          	ori	a4,a4,32
 3000caa:	c398                	sw	a4,0(a5)
    acmpHandle->baseAddress->CMP_CTRL1.BIT.cmp_mux_p =  acmpHandle->inOutConfig.vinPNum;
 3000cac:	43d4                	lw	a3,4(a5)
 3000cae:	4d18                	lw	a4,24(a0)
 3000cb0:	f0f6f693          	andi	a3,a3,-241
 3000cb4:	8b3d                	andi	a4,a4,15
 3000cb6:	08e6a71b          	orshf	a4,a3,a4,sll,4
 3000cba:	c3d8                	sw	a4,4(a5)
    acmpHandle->baseAddress->CMP_CTRL1.BIT.cmp_mux_n = acmpHandle->inOutConfig.vinNNum;
 3000cbc:	43d4                	lw	a3,4(a5)
 3000cbe:	4d58                	lw	a4,28(a0)
 3000cc0:	00f77613          	andi	a2,a4,15
 3000cc4:	ff06f713          	andi	a4,a3,-16
 3000cc8:	8f51                	or	a4,a4,a2
 3000cca:	c3d8                	sw	a4,4(a5)
    acmpHandle->baseAddress->CMP_SW.BIT.cmp_sw_enlv_p = acmpHandle->inOutConfig.swVinPNum;
 3000ccc:	4b94                	lw	a3,16(a5)
 3000cce:	5118                	lw	a4,32(a0)
 3000cd0:	f0f6f693          	andi	a3,a3,-241
 3000cd4:	8b3d                	andi	a4,a4,15
 3000cd6:	08e6a71b          	orshf	a4,a3,a4,sll,4
 3000cda:	cb98                	sw	a4,16(a5)
    acmpHandle->baseAddress->CMP_SW.BIT.cmp_sw_enlv_n = acmpHandle->inOutConfig.swVinNNum;
 3000cdc:	4b94                	lw	a3,16(a5)
 3000cde:	5158                	lw	a4,36(a0)
 3000ce0:	00f77613          	andi	a2,a4,15
 3000ce4:	ff06f713          	andi	a4,a3,-16
 3000ce8:	8f51                	or	a4,a4,a2
 3000cea:	cb98                	sw	a4,16(a5)
    acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_rslt_inv = acmpHandle->inOutConfig.polarity;
 3000cec:	4954                	lw	a3,20(a0)
 3000cee:	4398                	lw	a4,0(a5)
 3000cf0:	8a85                	andi	a3,a3,1
 3000cf2:	9b75                	andi	a4,a4,-3
 3000cf4:	02d7271b          	orshf	a4,a4,a3,sll,1
 3000cf8:	c398                	sw	a4,0(a5)
    switch (acmpHandle->filterCtrl.filterMode) {
 3000cfa:	4158                	lw	a4,4(a0)
 3000cfc:	010708bb          	beqi	a4,1,3000d1e <HAL_ACMP_Init+0x9c>
 3000d00:	c709                	beqz	a4,3000d0a <HAL_ACMP_Init+0x88>
 3000d02:	02070fbb          	beqi	a4,2,3000d40 <HAL_ACMP_Init+0xbe>
 3000d06:	03070abb          	beqi	a4,3,3000d30 <HAL_ACMP_Init+0xae>
 3000d0a:	4398                	lw	a4,0(a5)
            acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_blking_en = BASE_CFG_DISABLE; /* Disable Blking */
 3000d0c:	76fd                	lui	a3,0xfffff
 3000d0e:	16fd                	addi	a3,a3,-1
 3000d10:	8f75                	and	a4,a4,a3
 3000d12:	c398                	sw	a4,0(a5)
 3000d14:	4398                	lw	a4,0(a5)
            acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_qual_en = BASE_CFG_DISABLE; /* Disable Deshark */
 3000d16:	76f9                	lui	a3,0xffffe
 3000d18:	16fd                	addi	a3,a3,-1
 3000d1a:	8f75                	and	a4,a4,a3
 3000d1c:	a801                	j	3000d2c <HAL_ACMP_Init+0xaa>
 3000d1e:	4398                	lw	a4,0(a5)
            acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_blking_en = BASE_CFG_ENABLE; /* Enable Blking */
 3000d20:	6685                	lui	a3,0x1
 3000d22:	06a0036f          	jal	t1,3000d8c <HAL_ACMP_Init+0x10a>
            if (blkingSrc == ACMP_BLKING_SRC_APT) {
 3000d26:	e331                	bnez	a4,3000d6a <HAL_ACMP_Init+0xe8>
 3000d28:	07e0036f          	jal	t1,3000da6 <HAL_ACMP_Init+0x124>
            acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_qual_en = BASE_CFG_DISABLE; /* Disable Deshark */
 3000d2c:	c398                	sw	a4,0(a5)
 3000d2e:	a835                	j	3000d6a <HAL_ACMP_Init+0xe8>
            acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_blking_en = BASE_CFG_ENABLE; /* Enable Blking */
 3000d30:	4398                	lw	a4,0(a5)
 3000d32:	6685                	lui	a3,0x1
 3000d34:	0580036f          	jal	t1,3000d8c <HAL_ACMP_Init+0x10a>
            if (blkingSrc == ACMP_BLKING_SRC_APT) {
 3000d38:	e701                	bnez	a4,3000d40 <HAL_ACMP_Init+0xbe>
 3000d3a:	06c0036f          	jal	t1,3000da6 <HAL_ACMP_Init+0x124>
                acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_apt_sel = acmpHandle->filterCtrl.blkingFromAptNum;
 3000d3e:	c398                	sw	a4,0(a5)
 3000d40:	4398                	lw	a4,0(a5)
            acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_qual_en = BASE_CFG_ENABLE; /* Enable Deshark */
 3000d42:	6689                	lui	a3,0x2
            acmpHandle->baseAddress->CMP_QUALI2.BIT.cmp_qual_step = acmpHandle->filterCtrl.desharkByStep;
 3000d44:	5601                	li	a2,-32
            acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_qual_en = BASE_CFG_ENABLE; /* Enable Deshark */
 3000d46:	8f55                	or	a4,a4,a3
 3000d48:	c398                	sw	a4,0(a5)
            acmpHandle->baseAddress->CMP_QUALI2.BIT.cmp_qual_step = acmpHandle->filterCtrl.desharkByStep;
 3000d4a:	2574                	lbu	a3,14(a0)
 3000d4c:	47d8                	lw	a4,12(a5)
 3000d4e:	8afd                	andi	a3,a3,31
 3000d50:	f0c7471b          	andshf	a4,a4,a2,ror,24
 3000d54:	05e0036f          	jal	t1,3000db2 <HAL_ACMP_Init+0x130>
 3000d58:	c7d8                	sw	a4,12(a5)
            acmpHandle->baseAddress->CMP_QUALI2.BIT.cmp_qual_sel = acmpHandle->filterCtrl.desharkByTimes;
 3000d5a:	2918                	lbu	a4,16(a0)
 3000d5c:	47d4                	lw	a3,12(a5)
 3000d5e:	01f77613          	andi	a2,a4,31
 3000d62:	fe06f713          	andi	a4,a3,-32
 3000d66:	8f51                	or	a4,a4,a2
 3000d68:	c7d8                	sw	a4,12(a5)
    if (acmpHandle->syncEn == true) {
 3000d6a:	02a54783          	lbu	a5,42(a0)
 3000d6e:	4118                	lw	a4,0(a0)
 3000d70:	c7a1                	beqz	a5,3000db8 <HAL_ACMP_Init+0x136>
        acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_sync_sel = BASE_CFG_ENABLE;
 3000d72:	431c                	lw	a5,0(a4)
 3000d74:	0107e793          	ori	a5,a5,16
        acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_sync_sel = BASE_CFG_DISABLE;
 3000d78:	c31c                	sw	a5,0(a4)
{
    ACMP_ASSERT_PARAM(acmpHandle != NULL);
    ACMP_ASSERT_PARAM(IsACMPInstance(acmpHandle->baseAddress));
    ACMP_PARAM_CHECK_NO_RET(voltage >=  ACMP_HYS_VOL_ZERO);
    ACMP_PARAM_CHECK_NO_RET(voltage <= ACMP_HYS_VOL_30MV);
    acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_hy_vol_sel = voltage;
 3000d7a:	02854683          	lbu	a3,40(a0)
 3000d7e:	431c                	lw	a5,0(a4)
 3000d80:	8a8d                	andi	a3,a3,3
 3000d82:	9bcd                	andi	a5,a5,-13
 3000d84:	04d7a79b          	orshf	a5,a5,a3,sll,2
 3000d88:	c31c                	sw	a5,0(a4)
 3000d8a:	b739                	j	3000c98 <HAL_ACMP_Init+0x16>
            acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_blking_en = BASE_CFG_ENABLE; /* Enable Blking */
 3000d8c:	8f55                	or	a4,a4,a3
 3000d8e:	c398                	sw	a4,0(a5)
            blkingSrc = acmpHandle->filterCtrl.blkingSrcSelect;
 3000d90:	4518                	lw	a4,8(a0)
            acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_blking_sel = blkingSrc; /* Setting Blking source */
 3000d92:	4394                	lw	a3,0(a5)
 3000d94:	00177613          	andi	a2,a4,1
 3000d98:	f7f6f693          	andi	a3,a3,-129
 3000d9c:	0ec6a69b          	orshf	a3,a3,a2,sll,7
 3000da0:	c394                	sw	a3,0(a5)
            if (blkingSrc == ACMP_BLKING_SRC_APT) {
 3000da2:	9f21                	uxth	a4
 3000da4:	8302                	jr	t1
                acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_apt_sel = acmpHandle->filterCtrl.blkingFromAptNum;
 3000da6:	2554                	lbu	a3,12(a0)
 3000da8:	4398                	lw	a4,0(a5)
 3000daa:	5605                	li	a2,-31
 3000dac:	8abd                	andi	a3,a3,15
 3000dae:	f2c7471b          	andshf	a4,a4,a2,ror,25
 3000db2:	10d7271b          	orshf	a4,a4,a3,sll,8
 3000db6:	8302                	jr	t1
        acmpHandle->baseAddress->CMP_CTRL.BIT.cmp_sync_sel = BASE_CFG_DISABLE;
 3000db8:	431c                	lw	a5,0(a4)
 3000dba:	9bbd                	andi	a5,a5,-17
 3000dbc:	bf75                	j	3000d78 <HAL_ACMP_Init+0xf6>

03000dbe <HAL_ADC_IrqHandler>:
  * @brief ADC Interrupt service processing function. Including completion interrupts and overflow interrupt.
  * @param handle ADC handle.
  * @retval None.
  */
void HAL_ADC_IrqHandler(void *handle)
{
 3000dbe:	8048                	push	{ra,s0-s2},-16
    ADC_ASSERT_PARAM(handle != NULL);
    ADC_Handle *adcHandle = (ADC_Handle *)handle;
    ADC_ASSERT_PARAM(IsADCInstance(adcHandle->baseAddress));
    unsigned int intFlag = adcHandle->baseAddress->ADC_INT_FLAG.reg;
 3000dc0:	411c                	lw	a5,0(a0)
{
 3000dc2:	84aa                	mv	s1,a0
    for (unsigned int i = 0; i < INT_MAX_NUM; i++) {
 3000dc4:	4901                	li	s2,0
    unsigned int intFlag = adcHandle->baseAddress->ADC_INT_FLAG.reg;
 3000dc6:	4ba0                	lw	s0,80(a5)
        if (intFlag & (1 << i)) {
 3000dc8:	4785                	li	a5,1
 3000dca:	012797b3          	sll	a5,a5,s2
 3000dce:	8fe1                	and	a5,a5,s0
 3000dd0:	cfa9                	beqz	a5,3000e2a <HAL_ADC_IrqHandler+0x6c>
 3000dd2:	4098                	lw	a4,0(s1)
    unsigned int eocFlag = adcHandle->baseAddress->ADC_EOC_FLAG.reg;
 3000dd4:	4b74                	lw	a3,84(a4)
    switch (intx) {
 3000dd6:	0219083b          	beqi	s2,2,3000e36 <HAL_ADC_IrqHandler+0x78>
 3000dda:	0319083b          	beqi	s2,3,3000e3a <HAL_ADC_IrqHandler+0x7c>
 3000dde:	0119053b          	beqi	s2,1,3000e32 <HAL_ADC_IrqHandler+0x74>
            int1Ctrl.reg = adcHandle->baseAddress->ADC_INT1_CTRL.reg;
 3000de2:	533c                	lw	a5,96(a4)
            eocMask = int4Ctrl.BIT.int4_eoc_en;
 3000de4:	83c1                	srli	a5,a5,0x10
    unsigned int eoc = eocFlag & eocMask;
 3000de6:	8ff5                	and	a5,a5,a3
 3000de8:	0724869b          	addshf	a3,s1,s2,sll,3
    adcHandle->ADC_IntxParam[intx].socxFinish.stateVal = eoc;
 3000dec:	d2fc                	sw	a5,100(a3)
    for (int i = 0; i < SOC_MAX_NUM; i++) {
 3000dee:	4801                	li	a6,0
        unsigned int val = (1 << i);
 3000df0:	4605                	li	a2,1
 3000df2:	010615b3          	sll	a1,a2,a6
        if (eoc & val) {
 3000df6:	00b7f533          	and	a0,a5,a1
 3000dfa:	c111                	beqz	a0,3000dfe <HAL_ADC_IrqHandler+0x40>
            adcHandle->baseAddress->ADC_EOC_FLAG.reg = val;  /* Clear the EOC flag */
 3000dfc:	cb6c                	sw	a1,84(a4)
    for (int i = 0; i < SOC_MAX_NUM; i++) {
 3000dfe:	0805                	addi	a6,a6,1
 3000e00:	10f81c3b          	bnei	a6,16,3000df0 <HAL_ADC_IrqHandler+0x32>
  */
static inline void DCL_ADC_ClearIntx(ADC_RegStruct * const adcx, ADC_IntNumber intx)
{
    ADC_ASSERT_PARAM(IsADCInstance(adcx));
    ADC_PARAM_CHECK_NO_RET(IsADCIntx(intx));
    adcx->ADC_INT_FLAG.reg = (1U << (unsigned int)intx);
 3000e04:	012617b3          	sll	a5,a2,s2
 3000e08:	cb3c                	sw	a5,80(a4)
    IRQ_ClearN(adcHandle->ADC_IntxParam[intx].irqNum);
 3000e0a:	52bc                	lw	a5,96(a3)
  * @param irqNum external interrupt number
  * @retval BASE_STATUS_OK or IRQ_ERRNO_NUM_INVALID or IRQ_ERRNO_NOT_CREATED
  */
static inline void IRQ_ClearN(unsigned int irqNum)
{
    asm volatile("fence");
 3000e0c:	0ff0000f          	fence
    WRITE_CUSTOM_CSR_VAL(LOCIPCLR, irqNum);
 3000e10:	82be                	mv	t0,a5
 3000e12:	bf029073          	csrw	0xbf0,t0
    switch (intx) {
 3000e16:	02090d3b          	beqi	s2,2,3000e4a <HAL_ADC_IrqHandler+0x8c>
 3000e1a:	03090f3b          	beqi	s2,3,3000e56 <HAL_ADC_IrqHandler+0x98>
 3000e1e:	0109083b          	beqi	s2,1,3000e3e <HAL_ADC_IrqHandler+0x80>
            if (adcHandle->Int1FinishCallBack != NULL) {
 3000e22:	0804a783          	lw	a5,128(s1) # 2080 <STACK_SIZE+0xc80>
 3000e26:	c391                	beqz	a5,3000e2a <HAL_ADC_IrqHandler+0x6c>
 3000e28:	2079                	jal	ra,3000eb6 <HAL_ADC_IrqHandler+0xf8>
    for (unsigned int i = 0; i < INT_MAX_NUM; i++) {
 3000e2a:	0905                	addi	s2,s2,1
 3000e2c:	04e9173b          	bnei	s2,4,3000dc8 <HAL_ADC_IrqHandler+0xa>
 3000e30:	a03d                	j	3000e5e <HAL_ADC_IrqHandler+0xa0>
            int2Ctrl.reg = adcHandle->baseAddress->ADC_INT2_CTRL.reg;
 3000e32:	537c                	lw	a5,100(a4)
 3000e34:	bf45                	j	3000de4 <HAL_ADC_IrqHandler+0x26>
            int3Ctrl.reg = adcHandle->baseAddress->ADC_INT3_CTRL.reg;
 3000e36:	573c                	lw	a5,104(a4)
 3000e38:	b775                	j	3000de4 <HAL_ADC_IrqHandler+0x26>
            int4Ctrl.reg = adcHandle->baseAddress->ADC_INT4_CTRL.reg;
 3000e3a:	577c                	lw	a5,108(a4)
 3000e3c:	b765                	j	3000de4 <HAL_ADC_IrqHandler+0x26>
            if (adcHandle->Int2FinishCallBack != NULL) {
 3000e3e:	0844a783          	lw	a5,132(s1)
 3000e42:	cfa5                	beqz	a5,3000eba <HAL_ADC_IrqHandler+0xfc>
 3000e44:	288d                	jal	ra,3000eb6 <HAL_ADC_IrqHandler+0xf8>
 3000e46:	4909                	li	s2,2
 3000e48:	b741                	j	3000dc8 <HAL_ADC_IrqHandler+0xa>
            if (adcHandle->Int3FinishCallBack != NULL) {
 3000e4a:	0884a783          	lw	a5,136(s1)
 3000e4e:	c7b5                	beqz	a5,3000eba <HAL_ADC_IrqHandler+0xfc>
 3000e50:	209d                	jal	ra,3000eb6 <HAL_ADC_IrqHandler+0xf8>
 3000e52:	490d                	li	s2,3
 3000e54:	bf95                	j	3000dc8 <HAL_ADC_IrqHandler+0xa>
            if (adcHandle->Int4FinishCallBack != NULL) {
 3000e56:	08c4a783          	lw	a5,140(s1)
 3000e5a:	c391                	beqz	a5,3000e5e <HAL_ADC_IrqHandler+0xa0>
 3000e5c:	28a9                	jal	ra,3000eb6 <HAL_ADC_IrqHandler+0xf8>
            ADC_IRQHandlerIntx(adcHandle, i);
        }
    }
    unsigned int overFlag = adcHandle->baseAddress->ADC_INT_OVFL.reg;
 3000e5e:	409c                	lw	a5,0(s1)
 3000e60:	4fa0                	lw	s0,88(a5)
    if (overFlag != 0) {
 3000e62:	cc31                	beqz	s0,3000ebe <HAL_ADC_IrqHandler+0x100>
    unsigned int eocOver = adcHandle->baseAddress->ADC_EOC_OVFL.reg;
 3000e64:	4ff8                	lw	a4,92(a5)
    adcHandle->baseAddress->ADC_INT_OVFL.reg = overFlag;
 3000e66:	cfa0                	sw	s0,88(a5)
    adcHandle->baseAddress->ADC_EOC_OVFL.reg = eocOver;
 3000e68:	cff8                	sw	a4,92(a5)
    IRQ_ClearN(adcHandle->irqNumOver);
 3000e6a:	489c                	lw	a5,16(s1)
    asm volatile("fence");
 3000e6c:	0ff0000f          	fence
    WRITE_CUSTOM_CSR_VAL(LOCIPCLR, irqNum);
 3000e70:	82be                	mv	t0,a5
 3000e72:	bf029073          	csrw	0xbf0,t0
    unsigned int overState = 0;
 3000e76:	4681                	li	a3,0
    for (unsigned int i = 0; i < SOC_MAX_NUM; i++) {
 3000e78:	4581                	li	a1,0
        tmp = (1 << i);
 3000e7a:	4605                	li	a2,1
 3000e7c:	00b617b3          	sll	a5,a2,a1
        if (tmp & eocOver) {
 3000e80:	8ff9                	and	a5,a5,a4
 3000e82:	c799                	beqz	a5,3000e90 <HAL_ADC_IrqHandler+0xd2>
            tmp = (1 << lsh);   /* soc over state */
 3000e84:	00c597b3          	sll	a5,a1,a2
 3000e88:	97b2                	add	a5,a5,a2
 3000e8a:	00f617b3          	sll	a5,a2,a5
            overState |= tmp;
 3000e8e:	8edd                	or	a3,a3,a5
    for (unsigned int i = 0; i < SOC_MAX_NUM; i++) {
 3000e90:	0585                	addi	a1,a1,1
 3000e92:	10f59a3b          	bnei	a1,16,3000e7a <HAL_ADC_IrqHandler+0xbc>
    adcHandle->socxOverState.stateVal = overState;
 3000e96:	c8d4                	sw	a3,20(s1)
    if ((overFlag & INT_OVER_MASK) != 0 && adcHandle->IntxOverCallBack != NULL) {
 3000e98:	00f47793          	andi	a5,s0,15
 3000e9c:	c789                	beqz	a5,3000ea6 <HAL_ADC_IrqHandler+0xe8>
 3000e9e:	0944a783          	lw	a5,148(s1)
 3000ea2:	c391                	beqz	a5,3000ea6 <HAL_ADC_IrqHandler+0xe8>
 3000ea4:	2809                	jal	ra,3000eb6 <HAL_ADC_IrqHandler+0xf8>
    if ((overFlag & DMA_OVER_MASK) != 0  && adcHandle->DmaOverCallBack != NULL) {
 3000ea6:	8841                	andi	s0,s0,16
 3000ea8:	c819                	beqz	s0,3000ebe <HAL_ADC_IrqHandler+0x100>
 3000eaa:	0984a783          	lw	a5,152(s1)
 3000eae:	cb81                	beqz	a5,3000ebe <HAL_ADC_IrqHandler+0x100>
        adcHandle->DmaOverCallBack(adcHandle);
 3000eb0:	8526                	mv	a0,s1
        ADC_IRQHandlerOver(adcHandle, overFlag);
    }
    return;
}
 3000eb2:	8040                	pop	{ra,s0-s2},16
        adcHandle->DmaOverCallBack(adcHandle);
 3000eb4:	8782                	jr	a5
        adcHandle->IntxOverCallBack(adcHandle);
 3000eb6:	8526                	mv	a0,s1
 3000eb8:	8782                	jr	a5
    for (unsigned int i = 0; i < INT_MAX_NUM; i++) {
 3000eba:	0905                	addi	s2,s2,1
 3000ebc:	b731                	j	3000dc8 <HAL_ADC_IrqHandler+0xa>
}
 3000ebe:	8044                	popret	{ra,s0-s2},16

03000ec0 <HAL_ADC_Init>:
{
 3000ec0:	8028                	push	{ra,s0},-16
    if (adcHandle->initEnable == BASE_CFG_ENABLE) {
 3000ec2:	2d5c                	lbu	a5,28(a0)
 3000ec4:	10079763          	bnez	a5,3000fd2 <HAL_ADC_Init+0x112>
    adcHandle->baseAddress->ADC_ANA_PD.BIT.adc_pwdnz = BASE_CFG_ENABLE;
 3000ec8:	411c                	lw	a5,0(a0)
 3000eca:	842a                	mv	s0,a0
    BASE_FUNC_DELAY_US(10);     /* wait 10us */
 3000ecc:	4529                	li	a0,10
    adcHandle->baseAddress->ADC_ANA_PD.BIT.adc_pwdnz = BASE_CFG_ENABLE;
 3000ece:	1d47a703          	lw	a4,468(a5) # 147101d4 <RAM_END+0x1070c1d4>
 3000ed2:	00176713          	ori	a4,a4,1
 3000ed6:	1ce7aa23          	sw	a4,468(a5)
    BASE_FUNC_DELAY_US(10);     /* wait 10us */
 3000eda:	20dd                	jal	ra,3000fc0 <HAL_ADC_Init+0x100>
    val |= (vrefBuf << 4);  /* Shift left 4 bit to configurate the type of vrefbuf */
 3000edc:	4c1c                	lw	a5,24(s0)
 3000ede:	4018                	lw	a4,0(s0)
    if (adcHandle->baseAddress == ADC0) {
 3000ee0:	180006b7          	lui	a3,0x18000
    val |= (vrefBuf << 4);  /* Shift left 4 bit to configurate the type of vrefbuf */
 3000ee4:	0792                	slli	a5,a5,0x4
 3000ee6:	0017e793          	ori	a5,a5,1
    if (adcHandle->baseAddress == ADC0) {
 3000eea:	0ad71763          	bne	a4,a3,3000f98 <HAL_ADC_Init+0xd8>
        SYSCTRL1->ADC0_VREF_CTRL.reg |= val;
 3000eee:	1010b737          	lui	a4,0x1010b
 3000ef2:	4714                	lw	a3,8(a4)
 3000ef4:	8fd5                	or	a5,a5,a3
 3000ef6:	c71c                	sw	a5,8(a4)
    if (adcHandle->vrefBuf == ADC_VREF_2P0V) {
 3000ef8:	4c1c                	lw	a5,24(s0)
        val = 0x02;     /* 0x02: gian = 0.6 */
 3000efa:	4689                	li	a3,2
    if (adcHandle->vrefBuf == ADC_VREF_2P0V) {
 3000efc:	c781                	beqz	a5,3000f04 <HAL_ADC_Init+0x44>
    } else if (adcHandle->vrefBuf == ADC_VREF_2P5V) {
 3000efe:	17fd                	addi	a5,a5,-1
 3000f00:	0017b693          	seqz	a3,a5
    adcHandle->baseAddress->ADC_ANA_CTRL.BIT.adc_ana_gsh0 = val;
 3000f04:	401c                	lw	a5,0(s0)
 3000f06:	20d9                	jal	ra,3000fcc <HAL_ADC_Init+0x10c>
 3000f08:	9b1d                	andi	a4,a4,-25
 3000f0a:	06d7271b          	orshf	a4,a4,a3,sll,3
 3000f0e:	0ee7a023          	sw	a4,224(a5)
 3000f12:	286d                	jal	ra,3000fcc <HAL_ADC_Init+0x10c>
    adcHandle->baseAddress->ADC_ANA_CTRL.BIT.adc_ana_gsh1 = val;
 3000f14:	f9f77713          	andi	a4,a4,-97
 3000f18:	0ad7269b          	orshf	a3,a4,a3,sll,5
 3000f1c:	0ed7a023          	sw	a3,224(a5)
    if (g_versionId != 0xFF && g_versionId != 0) {
 3000f20:	9b01a703          	lw	a4,-1616(gp) # 4000004 <g_versionId>
 3000f24:	0ff00693          	li	a3,255
 3000f28:	06d70163          	beq	a4,a3,3000f8a <HAL_ADC_Init+0xca>
 3000f2c:	cf39                	beqz	a4,3000f8a <HAL_ADC_Init+0xca>
    adcHandle->baseAddress->ADC_CTRL.BIT.adc_cal_en = 0x01;
 3000f2e:	43b8                	lw	a4,64(a5)
 3000f30:	02076713          	ori	a4,a4,32
 3000f34:	c3b8                	sw	a4,64(a5)
    adcHandle->baseAddress->ADC_CTRL.BIT.adc_cal_mode = 0x01;   /* Enter Capacitance Calibration Mode 1 */
 3000f36:	43b8                	lw	a4,64(a5)
 3000f38:	9b1d                	andi	a4,a4,-25
 3000f3a:	00876713          	ori	a4,a4,8
 3000f3e:	2071                	jal	ra,3000fca <HAL_ADC_Init+0x10a>
    adcHandle->baseAddress->ADC_ANA_CTRL.BIT.ana_logic_mode = 0x01;
 3000f40:	00276713          	ori	a4,a4,2
 3000f44:	0ee7a023          	sw	a4,224(a5)
    adcHandle->baseAddress->ADC_CAP_CALI0.BIT.adc_weight_ini_sel = 0x01;
 3000f48:	10c7a703          	lw	a4,268(a5)
 3000f4c:	002006b7          	lui	a3,0x200
    BASE_FUNC_DELAY_US(270);     /* wait 270us */
 3000f50:	10e00513          	li	a0,270
    adcHandle->baseAddress->ADC_CAP_CALI0.BIT.adc_weight_ini_sel = 0x01;
 3000f54:	8f55                	or	a4,a4,a3
 3000f56:	10e7a623          	sw	a4,268(a5)
    adcHandle->baseAddress->ADC_SAR_CTRL0.BIT.cap_start_index = 0xF;
 3000f5a:	0e47a703          	lw	a4,228(a5)
 3000f5e:	07876713          	ori	a4,a4,120
 3000f62:	0ee7a223          	sw	a4,228(a5)
    adcHandle->baseAddress->ADC_SAR_CTRL3.BIT.cap_start = 0x01;
 3000f66:	0f07a703          	lw	a4,240(a5)
 3000f6a:	00176713          	ori	a4,a4,1
 3000f6e:	0ee7a823          	sw	a4,240(a5)
    BASE_FUNC_DELAY_US(270);     /* wait 270us */
 3000f72:	20b9                	jal	ra,3000fc0 <HAL_ADC_Init+0x100>
    adcHandle->baseAddress->ADC_CTRL.BIT.adc_cal_en = 0x0;
 3000f74:	401c                	lw	a5,0(s0)
 3000f76:	43b8                	lw	a4,64(a5)
 3000f78:	fdf77713          	andi	a4,a4,-33
 3000f7c:	c3b8                	sw	a4,64(a5)
    adcHandle->baseAddress->ADC_CTRL.BIT.adc_cal_mode = 0x0;    /* Enter the working mode */
 3000f7e:	43b8                	lw	a4,64(a5)
 3000f80:	9b1d                	andi	a4,a4,-25
 3000f82:	20a1                	jal	ra,3000fca <HAL_ADC_Init+0x10a>
    adcHandle->baseAddress->ADC_ANA_CTRL.BIT.ana_logic_mode = 0x0;
 3000f84:	9b75                	andi	a4,a4,-3
 3000f86:	0ee7a023          	sw	a4,224(a5)
    DCL_ADC_SOCxSetPriority(adcHandle->baseAddress, adcHandle->socPriority);
 3000f8a:	401c                	lw	a5,0(s0)
 3000f8c:	4058                	lw	a4,4(s0)
    return BASE_STATUS_OK;
 3000f8e:	4501                	li	a0,0
  */
static inline void DCL_ADC_SOCxSetPriority(ADC_RegStruct * const adcx, ADC_PriorityMode priorityMode)
{
    ADC_ASSERT_PARAM(IsADCInstance(adcx));
    ADC_PARAM_CHECK_NO_RET(IsADCPriorityMode(priorityMode));
    adcx->ADC_SOC_PRICTL.reg = priorityMode;
 3000f90:	dbf8                	sw	a4,116(a5)
    adcHandle->initEnable = BASE_CFG_ENABLE;
 3000f92:	4785                	li	a5,1
 3000f94:	ac5c                	sb	a5,28(s0)
}
 3000f96:	8024                	popret	{ra,s0},16
    } else if (adcHandle->baseAddress == ADC1) {
 3000f98:	180016b7          	lui	a3,0x18001
 3000f9c:	00d71863          	bne	a4,a3,3000fac <HAL_ADC_Init+0xec>
        SYSCTRL1->ADC1_VREF_CTRL.reg |= val;
 3000fa0:	1010b737          	lui	a4,0x1010b
 3000fa4:	4754                	lw	a3,12(a4)
 3000fa6:	8fd5                	or	a5,a5,a3
 3000fa8:	c75c                	sw	a5,12(a4)
 3000faa:	b7b9                	j	3000ef8 <HAL_ADC_Init+0x38>
    } else if (adcHandle->baseAddress == ADC2) {
 3000fac:	180026b7          	lui	a3,0x18002
 3000fb0:	f4d714e3          	bne	a4,a3,3000ef8 <HAL_ADC_Init+0x38>
        SYSCTRL1->ADC2_VREF_CTRL.reg |= val;
 3000fb4:	1010b737          	lui	a4,0x1010b
 3000fb8:	4b14                	lw	a3,16(a4)
 3000fba:	8fd5                	or	a5,a5,a3
 3000fbc:	cb1c                	sw	a5,16(a4)
 3000fbe:	bf2d                	j	3000ef8 <HAL_ADC_Init+0x38>
 3000fc0:	000f 4240 059f      	l.li	a1,0xf4240
    BASE_FUNC_DELAY_US(270);     /* wait 270us */
 3000fc6:	17d0006f          	j	3001942 <BASE_FUNC_Delay>
    adcHandle->baseAddress->ADC_CTRL.BIT.adc_cal_mode = 0x0;    /* Enter the working mode */
 3000fca:	c3b8                	sw	a4,64(a5)
    adcHandle->baseAddress->ADC_ANA_CTRL.BIT.ana_logic_mode = 0x0;
 3000fcc:	0e07a703          	lw	a4,224(a5)
 3000fd0:	8082                	ret
        return BASE_STATUS_ERROR;
 3000fd2:	4505                	li	a0,1
 3000fd4:	b7c9                	j	3000f96 <HAL_ADC_Init+0xd6>

03000fd6 <HAL_ADC_ConfigureSoc>:
{
 3000fd6:	1141                	addi	sp,sp,-16
 3000fd8:	c622                	sw	s0,12(sp)
 3000fda:	c426                	sw	s1,8(sp)
    adcHandle->ADC_SOCxParam[soc].adcInput = socParam->adcInput;
 3000fdc:	421c                	lw	a5,0(a2)
 3000fde:	00858813          	addi	a6,a1,8 # 80000008 <RAM_END+0x7bffc008>
 3000fe2:	0505081b          	addshf	a6,a0,a6,sll,2
 3000fe6:	00f7f713          	andi	a4,a5,15
 3000fea:	00082783          	lw	a5,0(a6)
    adcHandle->ADC_SOCxParam[soc].sampleTotalTime = socParam->sampleTotalTime;
 3000fee:	747d                	lui	s0,0xfffff
 3000ff0:	043d                	addi	s0,s0,15
    adcHandle->ADC_SOCxParam[soc].adcInput = socParam->adcInput;
 3000ff2:	9bc1                	andi	a5,a5,-16
 3000ff4:	8fd9                	or	a5,a5,a4
 3000ff6:	00f82023          	sw	a5,0(a6)
    adcHandle->ADC_SOCxParam[soc].sampleTotalTime = socParam->sampleTotalTime;
 3000ffa:	2254                	lbu	a3,4(a2)
 3000ffc:	8fe1                	and	a5,a5,s0
    adcHandle->ADC_SOCxParam[soc].periphTrigSource = socParam->periphTrigSource;
 3000ffe:	5401                	li	s0,-32
    adcHandle->ADC_SOCxParam[soc].sampleTotalTime = socParam->sampleTotalTime;
 3001000:	08d7a79b          	orshf	a5,a5,a3,sll,4
 3001004:	00f82023          	sw	a5,0(a6)
    adcHandle->ADC_SOCxParam[soc].sampleHoldTime = socParam->sampleHoldTime;
 3001008:	2618                	lbu	a4,8(a2)
 300100a:	f0000693          	li	a3,-256
 300100e:	e8d7c79b          	andshf	a5,a5,a3,ror,20
 3001012:	18e7a71b          	orshf	a4,a5,a4,sll,12
 3001016:	00e82023          	sw	a4,0(a6)
    adcHandle->ADC_SOCxParam[soc].softTrigSource = socParam->softTrigSource;
 300101a:	465c                	lw	a5,12(a2)
 300101c:	569d                	li	a3,-25
 300101e:	ded7471b          	andshf	a4,a4,a3,ror,15
 3001022:	8b8d                	andi	a5,a5,3
 3001024:	28f7279b          	orshf	a5,a4,a5,sll,20
 3001028:	00f82023          	sw	a5,0(a6)
    adcHandle->ADC_SOCxParam[soc].periphTrigSource = socParam->periphTrigSource;
 300102c:	4a14                	lw	a3,16(a2)
 300102e:	d487c79b          	andshf	a5,a5,s0,ror,10
 3001032:	8afd                	andi	a3,a3,31
 3001034:	2cd7a69b          	orshf	a3,a5,a3,sll,22
 3001038:	00d82023          	sw	a3,0(a6)
    adcHandle->ADC_SOCxParam[soc].intTrigSource = socParam->intTrigSource;
 300103c:	4a58                	lw	a4,20(a2)
 300103e:	00377793          	andi	a5,a4,3
 3001042:	571d                	li	a4,-25
 3001044:	d0e6c71b          	andshf	a4,a3,a4,ror,8
 3001048:	36f7271b          	orshf	a4,a4,a5,sll,27
 300104c:	00e82023          	sw	a4,0(a6)
    adcHandle->ADC_SOCxParam[soc].finishMode = socParam->finishMode;
 3001050:	4e14                	lw	a3,24(a2)
 3001052:	578d                	li	a5,-29
 3001054:	caf7479b          	andshf	a5,a4,a5,ror,5
 3001058:	3ad7a79b          	orshf	a5,a5,a3,sll,29
 300105c:	00f82023          	sw	a5,0(a6)
    unsigned int acqps = adcHandle->ADC_SOCxParam[soc].sampleTotalTime;
 3001060:	0047d613          	srli	a2,a5,0x4
    unsigned int shHold = adcHandle->ADC_SOCxParam[soc].sampleHoldTime;
 3001064:	00c7d413          	srli	s0,a5,0xc
    unsigned int periphTrig = adcHandle->ADC_SOCxParam[soc].periphTrigSource;
 3001068:	0167d493          	srli	s1,a5,0x16
    unsigned int input = adcHandle->ADC_SOCxParam[soc].adcInput;
 300106c:	00f7f813          	andi	a6,a5,15
    unsigned int intTrig = adcHandle->ADC_SOCxParam[soc].intTrigSource;
 3001070:	83ed                	srli	a5,a5,0x1b
    unsigned int acqps = adcHandle->ADC_SOCxParam[soc].sampleTotalTime;
 3001072:	9e01                	uxtb	a2
    unsigned int shHold = adcHandle->ADC_SOCxParam[soc].sampleHoldTime;
 3001074:	9c01                	uxtb	s0
    unsigned int periphTrig = adcHandle->ADC_SOCxParam[soc].periphTrigSource;
 3001076:	88fd                	andi	s1,s1,31
    unsigned int intTrig = adcHandle->ADC_SOCxParam[soc].intTrigSource;
 3001078:	8b8d                	andi	a5,a5,3
    DCL_ADC_SOCxSelcetChannel(adcHandle->baseAddress, soc, input);
 300107a:	4114                	lw	a3,0(a0)
    if (socx == ADC_SOC_NUM15) {
 300107c:	0f1598bb          	bnei	a1,15,30010de <HAL_ADC_ConfigureSoc+0x108>
        addr = (uintptr_t)(void *)&(adcx->ADC_SOC15_CTRL);
 3001080:	0c068693          	addi	a3,a3,192 # 180020c0 <RAM_END+0x13ffe0c0>
    soc->reg |= (unsigned int)input;
 3001084:	4298                	lw	a4,0(a3)
 3001086:	01076733          	or	a4,a4,a6
 300108a:	c298                	sw	a4,0(a3)
    DCL_ADC_SOCxSetAcqps(adcHandle->baseAddress, soc, acqps);
 300108c:	4114                	lw	a3,0(a0)
    if (socx == ADC_SOC_NUM15) {
 300108e:	0f1598bb          	bnei	a1,15,30010f0 <HAL_ADC_ConfigureSoc+0x11a>
        addr = (uintptr_t)(void *)&(adcx->ADC_SOC15_CTRL);
 3001092:	0c068693          	addi	a3,a3,192
    soc->reg |= (acqps << 11);  /* Registers 11 bit to configure the capacitor charging time */
 3001096:	4298                	lw	a4,0(a3)
 3001098:	16c7271b          	orshf	a4,a4,a2,sll,11
 300109c:	c298                	sw	a4,0(a3)
    DCL_ADC_SOCxSetShHold(adcHandle->baseAddress, soc, shHold);
 300109e:	4114                	lw	a3,0(a0)
    if (socx == ADC_SOC_NUM15) {
 30010a0:	0f15963b          	bnei	a1,15,30010f8 <HAL_ADC_ConfigureSoc+0x122>
        addr = (uintptr_t)(void *)&(adcx->ADC_SOC15_CTRL);
 30010a4:	0c068693          	addi	a3,a3,192
    soc->reg |= (shHold << 20);  /* Registers 20 bit to configure the capacitor charge hold time */
 30010a8:	4298                	lw	a4,0(a3)
 30010aa:	2887271b          	orshf	a4,a4,s0,sll,20
 30010ae:	c298                	sw	a4,0(a3)
    DCL_ADC_SOCxSelcetIntxTrig(adcHandle->baseAddress, soc, intTrig);
 30010b0:	4118                	lw	a4,0(a0)
    if (socx == ADC_SOC_NUM15) {
 30010b2:	0f1593bb          	bnei	a1,15,3001100 <HAL_ADC_ConfigureSoc+0x12a>
        addr = (uintptr_t)(void *)&(adcx->ADC_SOC15_CTRL);
 30010b6:	0c070693          	addi	a3,a4,192 # 1010b0c0 <RAM_END+0xc1070c0>
    soc->reg |= ((unsigned int)Intxtrig << 9);  /* Shift left 9 bit to configure the SOC interrupt trigger source */
 30010ba:	4298                	lw	a4,0(a3)
 30010bc:	12f7279b          	orshf	a5,a4,a5,sll,9
 30010c0:	c29c                	sw	a5,0(a3)
    DCL_ADC_SOCxSelcetTrigSource(adcHandle->baseAddress, soc, periphTrig);
 30010c2:	4118                	lw	a4,0(a0)
    if (socx == ADC_SOC_NUM15) {
 30010c4:	0f1591bb          	bnei	a1,15,300110a <HAL_ADC_ConfigureSoc+0x134>
        addr = (uintptr_t)(void *)&(adcx->ADC_SOC15_CTRL);
 30010c8:	0c070713          	addi	a4,a4,192
    soc->reg |= ((unsigned int)trig << 4);  /* Registers 4 through 8 bit to configure the SOC trigger source */
 30010cc:	431c                	lw	a5,0(a4)
}
 30010ce:	4501                	li	a0,0
 30010d0:	0897a79b          	orshf	a5,a5,s1,sll,4
 30010d4:	c31c                	sw	a5,0(a4)
 30010d6:	4432                	lw	s0,12(sp)
 30010d8:	44a2                	lw	s1,8(sp)
 30010da:	0141                	addi	sp,sp,16
 30010dc:	8082                	ret
 30010de:	0060036f          	jal	t1,30010e4 <HAL_ADC_ConfigureSoc+0x10e>
 30010e2:	b74d                	j	3001084 <HAL_ADC_ConfigureSoc+0xae>
        addr = (uintptr_t)(void *)&(adcx->ADC_SOC0_CTRL);
 30010e4:	08068693          	addi	a3,a3,128
        addr += ((unsigned int)socx * 4);   /* Register base address difference 4 */
 30010e8:	04b6869b          	addshf	a3,a3,a1,sll,2
 30010ec:	8302                	jr	t1
 30010ee:	bf59                	j	3001084 <HAL_ADC_ConfigureSoc+0xae>
 30010f0:	ff5ff36f          	jal	t1,30010e4 <HAL_ADC_ConfigureSoc+0x10e>
 30010f4:	b74d                	j	3001096 <HAL_ADC_ConfigureSoc+0xc0>
 30010f6:	b745                	j	3001096 <HAL_ADC_ConfigureSoc+0xc0>
 30010f8:	fedff36f          	jal	t1,30010e4 <HAL_ADC_ConfigureSoc+0x10e>
 30010fc:	b775                	j	30010a8 <HAL_ADC_ConfigureSoc+0xd2>
 30010fe:	b76d                	j	30010a8 <HAL_ADC_ConfigureSoc+0xd2>
        addr = (uintptr_t)(void *)&(adcx->ADC_SOC0_CTRL);
 3001100:	08070713          	addi	a4,a4,128
        addr += ((unsigned int)socx * 4);   /* Register base address difference 4 */
 3001104:	04b7069b          	addshf	a3,a4,a1,sll,2
 3001108:	bf4d                	j	30010ba <HAL_ADC_ConfigureSoc+0xe4>
        addr = (uintptr_t)(void *)&(adcx->ADC_SOC0_CTRL);
 300110a:	08070713          	addi	a4,a4,128
        addr += ((unsigned int)socx * 4);   /* Register base address difference 4 */
 300110e:	04b7071b          	addshf	a4,a4,a1,sll,2
 3001112:	bf6d                	j	30010cc <HAL_ADC_ConfigureSoc+0xf6>

03001114 <HAL_ADC_IrqService>:
  * @brief Registering ADC interrupt service processing function.
  * @param adcHandle ADC handle.
  * @retval None.
  */
void HAL_ADC_IrqService(ADC_Handle *adcHandle)
{
 3001114:	8038                	push	{ra,s0-s1},-16
 3001116:	842a                	mv	s0,a0
    ADC_ASSERT_PARAM(adcHandle != NULL);
    ADC_ASSERT_PARAM(IsADCInstance(adcHandle->baseAddress));
    ADC_ASSERT_PARAM(adcHandle->ADC_IntxParam != NULL);
    IRQ_Register(adcHandle->irqNumOver, HAL_ADC_IrqHandler, adcHandle);
 3001118:	862a                	mv	a2,a0
 300111a:	030014b7          	lui	s1,0x3001
 300111e:	4908                	lw	a0,16(a0)
 3001120:	2005                	jal	ra,3001140 <HAL_ADC_IrqService+0x2c>
    IRQ_Register(adcHandle->ADC_IntxParam[0].irqNum, HAL_ADC_IrqHandler, adcHandle);    /* interrupt 0 */
 3001122:	5028                	lw	a0,96(s0)
 3001124:	2829                	jal	ra,300113e <HAL_ADC_IrqService+0x2a>
    IRQ_Register(adcHandle->ADC_IntxParam[1].irqNum, HAL_ADC_IrqHandler, adcHandle);    /* interrupt 1 */
 3001126:	8622                	mv	a2,s0
 3001128:	5428                	lw	a0,104(s0)
 300112a:	2819                	jal	ra,3001140 <HAL_ADC_IrqService+0x2c>
    IRQ_Register(adcHandle->ADC_IntxParam[2].irqNum, HAL_ADC_IrqHandler, adcHandle);    /* interrupt 2 */
 300112c:	5828                	lw	a0,112(s0)
 300112e:	2801                	jal	ra,300113e <HAL_ADC_IrqService+0x2a>
    IRQ_Register(adcHandle->ADC_IntxParam[3].irqNum, HAL_ADC_IrqHandler, adcHandle);    /* interrupt 3 */
 3001130:	5c28                	lw	a0,120(s0)
 3001132:	8622                	mv	a2,s0
 3001134:	dbe48593          	addi	a1,s1,-578 # 3000dbe <HAL_ADC_IrqHandler>
}
 3001138:	8030                	pop	{ra,s0-s1},16
    IRQ_Register(adcHandle->ADC_IntxParam[3].irqNum, HAL_ADC_IrqHandler, adcHandle);    /* interrupt 3 */
 300113a:	0530006f          	j	300198c <IRQ_Register>
 300113e:	8622                	mv	a2,s0
 3001140:	dbe48593          	addi	a1,s1,-578
    IRQ_Register(adcHandle->ADC_IntxParam[2].irqNum, HAL_ADC_IrqHandler, adcHandle);    /* interrupt 2 */
 3001144:	0490006f          	j	300198c <IRQ_Register>

03001148 <HAL_ADC_RegisterCallBack>:
  * @param typeID Id of callback function type.
  * @param pCallback Pointer of the specified callbcak function.
  * @retval None.
  */
void HAL_ADC_RegisterCallBack(ADC_Handle *adcHandle, ADC_CallbackFunType typeID, ADC_CallbackType pCallback)
{
 3001148:	8018                	push	{ra},-16
 300114a:	87aa                	mv	a5,a0
    ADC_ASSERT_PARAM(adcHandle != NULL);
    switch (typeID) {
 300114c:	0805f53b          	bgeui	a1,8,3001160 <HAL_ADC_RegisterCallBack+0x18>
 3001150:	852e                	mv	a0,a1
 3001152:	282d                	jal	ra,300118c <__riscv_case_uqi>
 3001154:	0e08                	addi	a0,sp,784
 3001156:	1a14                	addi	a3,sp,304
 3001158:	2620                	lbu	s0,10(a2)
 300115a:	322c                	lbu	a1,3(a2)
        case ADC_CALLBACK_INT1:
            adcHandle->Int1FinishCallBack = pCallback;
 300115c:	08c7a023          	sw	a2,128(a5)
            adcHandle->DmaErrorCallBack = pCallback;
            break;
        default:
            return;
    }
}
 3001160:	8014                	popret	{ra},16
            adcHandle->Int2FinishCallBack = pCallback;
 3001162:	08c7a223          	sw	a2,132(a5)
            break;
 3001166:	bfed                	j	3001160 <HAL_ADC_RegisterCallBack+0x18>
            adcHandle->Int3FinishCallBack = pCallback;
 3001168:	08c7a423          	sw	a2,136(a5)
            break;
 300116c:	bfd5                	j	3001160 <HAL_ADC_RegisterCallBack+0x18>
            adcHandle->Int4FinishCallBack = pCallback;
 300116e:	08c7a623          	sw	a2,140(a5)
            break;
 3001172:	b7fd                	j	3001160 <HAL_ADC_RegisterCallBack+0x18>
            adcHandle->DmaFinishCallBack = pCallback;
 3001174:	08c7a823          	sw	a2,144(a5)
            break;
 3001178:	b7e5                	j	3001160 <HAL_ADC_RegisterCallBack+0x18>
            adcHandle->IntxOverCallBack = pCallback;
 300117a:	08c7aa23          	sw	a2,148(a5)
            break;
 300117e:	b7cd                	j	3001160 <HAL_ADC_RegisterCallBack+0x18>
            adcHandle->DmaOverCallBack = pCallback;
 3001180:	08c7ac23          	sw	a2,152(a5)
            break;
 3001184:	bff1                	j	3001160 <HAL_ADC_RegisterCallBack+0x18>
            adcHandle->DmaErrorCallBack = pCallback;
 3001186:	08c7ae23          	sw	a2,156(a5)
            break;
 300118a:	bfd9                	j	3001160 <HAL_ADC_RegisterCallBack+0x18>

0300118c <__riscv_case_uqi>:
 300118c:	1141                	addi	sp,sp,-16
 300118e:	c02e                	sw	a1,0(sp)
 3001190:	8586                	mv	a1,ra
 3001192:	95aa                	add	a1,a1,a0
 3001194:	218c                	lbu	a1,0(a1)
 3001196:	90ae                	add	ra,ra,a1
 3001198:	4582                	lw	a1,0(sp)
 300119a:	0141                	addi	sp,sp,16
 300119c:	8082                	ret

0300119e <APT_SetOutCtrlAction.isra.1>:
  * @retval None.
  */
static void APT_SetOutCtrlAction(APT_Handle *aptHandle, APT_OutCtrlAction ocAction, APT_OutCtrlEventDir outCtrlEvent)
{
    /* Set output control action when counting up */
    aptHandle->baseAddress->OC_ACT_A.reg &= (~(0b111 << outCtrlEvent));
 300119e:	31052703          	lw	a4,784(a0)
 30011a2:	479d                	li	a5,7
 30011a4:	00c797b3          	sll	a5,a5,a2
 30011a8:	fff7c793          	not	a5,a5
 30011ac:	8f7d                	and	a4,a4,a5
 30011ae:	30e52823          	sw	a4,784(a0)
    aptHandle->baseAddress->OC_ACT_A.reg |= (ocAction << outCtrlEvent);
 30011b2:	31052703          	lw	a4,784(a0)
 30011b6:	00c595b3          	sll	a1,a1,a2
 30011ba:	8f4d                	or	a4,a4,a1
 30011bc:	30e52823          	sw	a4,784(a0)
    aptHandle->baseAddress->OC_ACT_B.reg &= (~(0b111 << outCtrlEvent));
 30011c0:	31452703          	lw	a4,788(a0)
 30011c4:	8ff9                	and	a5,a5,a4
 30011c6:	30f52a23          	sw	a5,788(a0)
    aptHandle->baseAddress->OC_ACT_B.reg |= (ocAction << outCtrlEvent);
 30011ca:	31452603          	lw	a2,788(a0)
 30011ce:	8dd1                	or	a1,a1,a2
 30011d0:	30b52a23          	sw	a1,788(a0)
}
 30011d4:	8082                	ret

030011d6 <HAL_APT_IRQHandler>:
  */
void HAL_APT_IRQHandler(void *handle)
{
    APT_ASSERT_PARAM(handle != NULL);
    APT_Handle *aptHandle = (APT_Handle *)handle;
    if (aptHandle->baseAddress->OC_EVT_FLAG.BIT.ro_int_flag_evt == 1) {
 30011d6:	4118                	lw	a4,0(a0)
 30011d8:	32072683          	lw	a3,800(a4)
 30011dc:	01069613          	slli	a2,a3,0x10
 30011e0:	02065963          	bgez	a2,3001212 <HAL_APT_IRQHandler+0x3c>
 30011e4:	32072683          	lw	a3,800(a4)
        aptHandle->baseAddress->OC_EVT_FLAG.reg |= ALL_EVT_INT_FLAGS;
 30011e8:	0f770637          	lui	a2,0xf770
 30011ec:	8ed1                	or	a3,a3,a2
 30011ee:	32d72023          	sw	a3,800(a4)
 30011f2:	32072683          	lw	a3,800(a4)
        aptHandle->baseAddress->OC_EVT_FLAG.BIT.rg_int_clr_evt = 1;
 30011f6:	80000637          	lui	a2,0x80000
 30011fa:	8ed1                	or	a3,a3,a2
 30011fc:	32d72023          	sw	a3,800(a4)
        IRQ_ClearN(aptHandle->irqNumEvt);
 3001200:	4d38                	lw	a4,88(a0)
    asm volatile("fence");
 3001202:	0ff0000f          	fence
    WRITE_CUSTOM_CSR_VAL(LOCIPCLR, irqNum);
 3001206:	82ba                	mv	t0,a4
 3001208:	bf029073          	csrw	0xbf0,t0
        if (aptHandle->evtInterruptCallBack != NULL) {
 300120c:	513c                	lw	a5,96(a0)
            aptHandle->evtInterruptCallBack(aptHandle);
        }
    } else if (aptHandle->baseAddress->INT_TMR_FLAG.BIT.ro_int_flag_tmr == 1) {
        aptHandle->baseAddress->INT_TMR_FLAG.BIT.rg_int_clr_tmr = 1;
        IRQ_ClearN(aptHandle->irqNumTmr);
        if (aptHandle->tmrInterruptCallBack != NULL) {
 300120e:	c78d                	beqz	a5,3001238 <HAL_APT_IRQHandler+0x62>
            aptHandle->tmrInterruptCallBack(aptHandle);
 3001210:	8782                	jr	a5
    } else if (aptHandle->baseAddress->INT_TMR_FLAG.BIT.ro_int_flag_tmr == 1) {
 3001212:	42072683          	lw	a3,1056(a4)
 3001216:	8a85                	andi	a3,a3,1
 3001218:	0106983b          	bnei	a3,1,3001238 <HAL_APT_IRQHandler+0x62>
        aptHandle->baseAddress->INT_TMR_FLAG.BIT.rg_int_clr_tmr = 1;
 300121c:	42072683          	lw	a3,1056(a4)
 3001220:	6641                	lui	a2,0x10
 3001222:	8ed1                	or	a3,a3,a2
 3001224:	42d72023          	sw	a3,1056(a4)
        IRQ_ClearN(aptHandle->irqNumTmr);
 3001228:	4d78                	lw	a4,92(a0)
    asm volatile("fence");
 300122a:	0ff0000f          	fence
    WRITE_CUSTOM_CSR_VAL(LOCIPCLR, irqNum);
 300122e:	82ba                	mv	t0,a4
 3001230:	bf029073          	csrw	0xbf0,t0
        if (aptHandle->tmrInterruptCallBack != NULL) {
 3001234:	517c                	lw	a5,100(a0)
 3001236:	bfe1                	j	300120e <HAL_APT_IRQHandler+0x38>
        }
    }
}
 3001238:	8082                	ret

0300123a <APT_RspInit>:
}
 300123a:	8082                	ret

0300123c <HAL_APT_PWMInit>:
{
 300123c:	8038                	push	{ra,s0-s1},-16
 300123e:	842a                	mv	s0,a0
    APT_RspInit(aptHandle);
 3001240:	3fed                	jal	ra,300123a <APT_RspInit>
    aptHandle->baseAddress->TC_MODE.BIT.rg_cnt_mode = aptHandle->waveform.cntMode;
 3001242:	401c                	lw	a5,0(s0)
 3001244:	4818                	lw	a4,16(s0)
    aptHandle->baseAddress->TC_MODE.BIT.rg_div_fac = aptHandle->waveform.dividerFactor;
 3001246:	6805                	lui	a6,0x1
    aptHandle->baseAddress->TC_MODE.BIT.rg_cnt_mode = aptHandle->waveform.cntMode;
 3001248:	4b94                	lw	a3,16(a5)
 300124a:	00377613          	andi	a2,a4,3
    aptHandle->baseAddress->TC_MODE.BIT.rg_div_fac = aptHandle->waveform.dividerFactor;
 300124e:	187d                	addi	a6,a6,-1
    aptHandle->baseAddress->TC_MODE.BIT.rg_cnt_mode = aptHandle->waveform.cntMode;
 3001250:	ffc6f713          	andi	a4,a3,-4
 3001254:	8f51                	or	a4,a4,a2
 3001256:	cb98                	sw	a4,16(a5)
    aptHandle->baseAddress->TC_MODE.BIT.rg_div_fac = aptHandle->waveform.dividerFactor;
 3001258:	2852                	lhu	a2,20(s0)
 300125a:	4b98                	lw	a4,16(a5)
 300125c:	f000 ffff 051f      	l.li	a0,0xf000ffff
 3001262:	00c87633          	and	a2,a6,a2
 3001266:	8f69                	and	a4,a4,a0
 3001268:	268d                	jal	ra,30015ca <HAL_APT_PWMInit+0x38e>
 300126a:	cb98                	sw	a4,16(a5)
    aptHandle->baseAddress->TC_BUF_EN.reg &= (~(0b11 << 0));
 300126c:	43b8                	lw	a4,64(a5)
    aptHandle->baseAddress->TC_PRD.BIT.rg_cnt_prd = aptHandle->waveform.timerPeriod;
 300126e:	64c1                	lui	s1,0x10
 3001270:	14fd                	addi	s1,s1,-1
    aptHandle->baseAddress->TC_BUF_EN.reg &= (~(0b11 << 0));
 3001272:	9b71                	andi	a4,a4,-4
 3001274:	c3b8                	sw	a4,64(a5)
    aptHandle->baseAddress->TC_PRD.BIT.rg_cnt_prd = aptHandle->waveform.timerPeriod;
 3001276:	5390                	lw	a2,32(a5)
 3001278:	287a                	lhu	a4,22(s0)
 300127a:	75c1                	lui	a1,0xffff0
 300127c:	00b676b3          	and	a3,a2,a1
 3001280:	8f65                	and	a4,a4,s1
 3001282:	8ed9                	or	a3,a3,a4
 3001284:	d394                	sw	a3,32(a5)
    aptHandle->baseAddress->TC_OVRID.BIT.rg_div_ovrid = aptHandle->waveform.divInitVal;
 3001286:	4f90                	lw	a2,24(a5)
 3001288:	2c1a                	lhu	a4,24(s0)
 300128a:	8e69                	and	a2,a2,a0
 300128c:	00e87733          	and	a4,a6,a4
 3001290:	20e6261b          	orshf	a2,a2,a4,sll,16
 3001294:	cf90                	sw	a2,24(a5)
    aptHandle->baseAddress->TC_OVRID.BIT.rg_cnt_ovrid = aptHandle->waveform.cntInitVal;
 3001296:	4f90                	lw	a2,24(a5)
 3001298:	2c3a                	lhu	a4,26(s0)
 300129a:	00b676b3          	and	a3,a2,a1
 300129e:	8f65                	and	a4,a4,s1
 30012a0:	8ed9                	or	a3,a3,a4
 30012a2:	cf94                	sw	a3,24(a5)
    aptHandle->baseAddress->TC_OVRID.BIT.rg_cnt_ovrid_en = 1;
 30012a4:	4f90                	lw	a2,24(a5)
 30012a6:	80000737          	lui	a4,0x80000
 30012aa:	8e59                	or	a2,a2,a4
 30012ac:	cf90                	sw	a2,24(a5)
    aptHandle->baseAddress->TC_REFC.BIT.rg_cnt_refcl = aptHandle->waveform.dividerFactor;
 30012ae:	5f94                	lw	a3,56(a5)
 30012b0:	20bd                	jal	ra,300131e <HAL_APT_PWMInit+0xe2>
 30012b2:	df94                	sw	a3,56(a5)
    aptHandle->baseAddress->TC_REFD.BIT.rg_cnt_refdl = aptHandle->waveform.dividerFactor;
 30012b4:	5fd4                	lw	a3,60(a5)
 30012b6:	20a5                	jal	ra,300131e <HAL_APT_PWMInit+0xe2>
 30012b8:	dfd4                	sw	a3,60(a5)
 30012ba:	28c9                	jal	ra,300138c <HAL_APT_PWMInit+0x150>
    aptHandle->baseAddress->TC_REFD = tmpD;
 30012bc:	dfd8                	sw	a4,60(a5)
    if (aptHandle->waveform.cntCmpLoadMode == APT_BUFFER_DISABLE) {
 30012be:	5018                	lw	a4,32(s0)
 30012c0:	e735                	bnez	a4,300132c <HAL_APT_PWMInit+0xf0>
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refc_buf_en = 0;
 30012c2:	43b8                	lw	a4,64(a5)
 30012c4:	eff77713          	andi	a4,a4,-257
 30012c8:	2685                	jal	ra,3001628 <HAL_APT_PWMInit+0x3ec>
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refd_buf_en = 0;
 30012ca:	bff77713          	andi	a4,a4,-1025
 30012ce:	c3b8                	sw	a4,64(a5)
    if (aptHandle->waveform.chAOutType != APT_PWM_OUT_BASIC_TYPE) {
 30012d0:	441c                	lw	a5,8(s0)
 30012d2:	cf81                	beqz	a5,30012ea <HAL_APT_PWMInit+0xae>
        unsigned int contActA = (aptHandle->waveform.chAOutType == APT_PWM_OUT_ALWAYS_LOW) ? 0b01 : 0b10;
 30012d4:	86be                	mv	a3,a5
 30012d6:	010781bb          	beqi	a5,1,30012dc <HAL_APT_PWMInit+0xa0>
 30012da:	4689                	li	a3,2
        aptHandle->baseAddress->PG_ACT_A.BIT.rg_pga_act_zro = contActA;
 30012dc:	4018                	lw	a4,0(s0)
 30012de:	10072783          	lw	a5,256(a4) # 80000100 <RAM_END+0x7bffc100>
 30012e2:	9bf1                	andi	a5,a5,-4
 30012e4:	8fd5                	or	a5,a5,a3
 30012e6:	10f72023          	sw	a5,256(a4)
    if (aptHandle->waveform.chBOutType != APT_PWM_OUT_BASIC_TYPE) {
 30012ea:	445c                	lw	a5,12(s0)
 30012ec:	cf81                	beqz	a5,3001304 <HAL_APT_PWMInit+0xc8>
        unsigned int contActB = (aptHandle->waveform.chBOutType == APT_PWM_OUT_ALWAYS_LOW) ? 0b01 : 0b10;
 30012ee:	86be                	mv	a3,a5
 30012f0:	010781bb          	beqi	a5,1,30012f6 <HAL_APT_PWMInit+0xba>
 30012f4:	4689                	li	a3,2
        aptHandle->baseAddress->PG_ACT_B.BIT.rg_pgb_act_zro = contActB;
 30012f6:	4018                	lw	a4,0(s0)
 30012f8:	10472783          	lw	a5,260(a4)
 30012fc:	9bf1                	andi	a5,a5,-4
 30012fe:	8fd5                	or	a5,a5,a3
 3001300:	10f72223          	sw	a5,260(a4)
    switch (aptHandle->waveform.basicType) {
 3001304:	405c                	lw	a5,4(s0)
 3001306:	01778c3b          	beqi	a5,1,30014f6 <HAL_APT_PWMInit+0x2ba>
 300130a:	cbd9                	beqz	a5,30013a0 <HAL_APT_PWMInit+0x164>
 300130c:	4801                	li	a6,0
 300130e:	02778cbb          	beqi	a5,2,3001500 <HAL_APT_PWMInit+0x2c4>
 3001312:	037789bb          	beqi	a5,3,30014f8 <HAL_APT_PWMInit+0x2bc>
    APT_WaveformPara wavePara = {0, 0, 0, 0, 0, 0, 0, 0};
 3001316:	4501                	li	a0,0
 3001318:	4481                	li	s1,0
 300131a:	4781                	li	a5,0
 300131c:	a071                	j	30013a8 <HAL_APT_PWMInit+0x16c>
 300131e:	285a                	lhu	a4,20(s0)
    aptHandle->baseAddress->TC_REFD.BIT.rg_cnt_refdl = aptHandle->waveform.dividerFactor;
 3001320:	8ee9                	and	a3,a3,a0
 3001322:	00e87733          	and	a4,a6,a4
 3001326:	20e6a69b          	orshf	a3,a3,a4,sll,16
 300132a:	8082                	ret
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refc_buf_en = 1;
 300132c:	43b8                	lw	a4,64(a5)
 300132e:	10076713          	ori	a4,a4,256
 3001332:	2cdd                	jal	ra,3001628 <HAL_APT_PWMInit+0x3ec>
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refd_buf_en = 1;
 3001334:	40076713          	ori	a4,a4,1024
 3001338:	c3b8                	sw	a4,64(a5)
        unsigned int gldLdEn = (aptHandle->waveform.cntCmpLoadMode == APT_BUFFER_GLOBAL_LOAD) ? 1 : 0;
 300133a:	5014                	lw	a3,32(s0)
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refc_gld_en = gldLdEn;
 300133c:	43b8                	lw	a4,64(a5)
        unsigned int gldLdEn = (aptHandle->waveform.cntCmpLoadMode == APT_BUFFER_GLOBAL_LOAD) ? 1 : 0;
 300133e:	16f5                	addi	a3,a3,-3
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refc_gld_en = gldLdEn;
 3001340:	0016b613          	seqz	a2,a3
 3001344:	dff77713          	andi	a4,a4,-513
 3001348:	12c7271b          	orshf	a4,a4,a2,sll,9
 300134c:	c3b8                	sw	a4,64(a5)
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refd_gld_en = gldLdEn;
 300134e:	43b4                	lw	a3,64(a5)
 3001350:	573d                	li	a4,-17
 3001352:	f2e6c69b          	andshf	a3,a3,a4,ror,25
 3001356:	16c6a69b          	orshf	a3,a3,a2,sll,11
 300135a:	c3b4                	sw	a3,64(a5)
 300135c:	202d                	jal	ra,3001386 <HAL_APT_PWMInit+0x14a>
        aptHandle->baseAddress->TC_REF_LOAD.reg &= (~(0x1F << (APT_COMPARE_REFERENCE_C * refBufField)));
 300135e:	e0e6c69b          	andshf	a3,a3,a4,ror,16
 3001362:	200d                	jal	ra,3001384 <HAL_APT_PWMInit+0x148>
        aptHandle->baseAddress->TC_REF_LOAD.reg &= (~(0x1F << (APT_COMPARE_REFERENCE_D * refBufField)));
 3001364:	d0e6c69b          	andshf	a3,a3,a4,ror,8
 3001368:	cbf4                	sw	a3,84(a5)
        aptHandle->baseAddress->TC_REF_LOAD.reg |=
 300136a:	4bf8                	lw	a4,84(a5)
            (aptHandle->waveform.cntCmpLoadEvt << (APT_COMPARE_REFERENCE_C * refBufField));
 300136c:	5054                	lw	a3,36(s0)
        aptHandle->baseAddress->TC_REF_LOAD.reg |=
 300136e:	20d7271b          	orshf	a4,a4,a3,sll,16
 3001372:	cbf8                	sw	a4,84(a5)
        aptHandle->baseAddress->TC_REF_LOAD.reg |=
 3001374:	4bf8                	lw	a4,84(a5)
            (aptHandle->waveform.cntCmpLoadEvt << (APT_COMPARE_REFERENCE_D * refBufField));
 3001376:	5054                	lw	a3,36(s0)
        aptHandle->baseAddress->TC_REF_LOAD.reg |=
 3001378:	30d7271b          	orshf	a4,a4,a3,sll,24
 300137c:	cbf8                	sw	a4,84(a5)
 300137e:	2039                	jal	ra,300138c <HAL_APT_PWMInit+0x150>
        aptHandle->baseAddress->TC_REFD = tmpD;
 3001380:	dfd8                	sw	a4,60(a5)
 3001382:	b7b9                	j	30012d0 <HAL_APT_PWMInit+0x94>
        aptHandle->baseAddress->TC_REF_LOAD.reg &= (~(0x1F << (APT_COMPARE_REFERENCE_C * refBufField)));
 3001384:	cbf4                	sw	a3,84(a5)
        aptHandle->baseAddress->TC_REF_LOAD.reg &= (~(0x1F << (APT_COMPARE_REFERENCE_D * refBufField)));
 3001386:	4bf4                	lw	a3,84(a5)
 3001388:	5701                	li	a4,-32
 300138a:	8082                	ret
        tmpC = aptHandle->baseAddress->TC_REFC;
 300138c:	5f94                	lw	a3,56(a5)
        aptHandle->baseAddress->TC_REFC = tmpC;
 300138e:	2c5a                	lhu	a4,28(s0)
 3001390:	8eed                	and	a3,a3,a1
 3001392:	8ed9                	or	a3,a3,a4
 3001394:	df94                	sw	a3,56(a5)
        tmpD = aptHandle->baseAddress->TC_REFD;
 3001396:	5fd8                	lw	a4,60(a5)
        aptHandle->baseAddress->TC_REFD = tmpD;
 3001398:	2c76                	lhu	a3,30(s0)
 300139a:	8f6d                	and	a4,a4,a1
 300139c:	8f55                	or	a4,a4,a3
 300139e:	8082                	ret
            wavePara.fedOutMode = APT_DB_FED_OUTPUT_INVERT;
 30013a0:	4809                	li	a6,2
    APT_WaveformPara wavePara = {0, 0, 0, 0, 0, 0, 0, 0};
 30013a2:	4501                	li	a0,0
            wavePara.rightEdgeActA = APT_PWM_ACTION_LOW;
 30013a4:	4485                	li	s1,1
            wavePara.leftEdgeActA = APT_PWM_ACTION_HIGH;
 30013a6:	87c2                	mv	a5,a6
    if (aptHandle->waveform.chAOutType == APT_PWM_OUT_BASIC_TYPE) {
 30013a8:	4418                	lw	a4,8(s0)
 30013aa:	eb09                	bnez	a4,30013bc <HAL_APT_PWMInit+0x180>
    switch (aptHandle->waveform.cntMode) {
 30013ac:	4818                	lw	a4,16(s0)
 30013ae:	4014                	lw	a3,0(s0)
 30013b0:	01570e3b          	beqi	a4,1,3001528 <HAL_APT_PWMInit+0x2ec>
 30013b4:	14070963          	beqz	a4,3001506 <HAL_APT_PWMInit+0x2ca>
 30013b8:	0267033b          	beqi	a4,2,3001544 <HAL_APT_PWMInit+0x308>
    if (aptHandle->waveform.chBOutType == APT_PWM_OUT_BASIC_TYPE) {
 30013bc:	4458                	lw	a4,12(s0)
 30013be:	eb09                	bnez	a4,30013d0 <HAL_APT_PWMInit+0x194>
    switch (aptHandle->waveform.cntMode) {
 30013c0:	4818                	lw	a4,16(s0)
 30013c2:	4014                	lw	a3,0(s0)
 30013c4:	01670ebb          	beqi	a4,1,300157e <HAL_APT_PWMInit+0x342>
 30013c8:	18070863          	beqz	a4,3001558 <HAL_APT_PWMInit+0x31c>
 30013cc:	027703bb          	beqi	a4,2,300159a <HAL_APT_PWMInit+0x35e>
    if (aptHandle->waveform.chAOutType == APT_PWM_OUT_BASIC_TYPE ||
 30013d0:	441c                	lw	a5,8(s0)
 30013d2:	c399                	beqz	a5,30013d8 <HAL_APT_PWMInit+0x19c>
 30013d4:	445c                	lw	a5,12(s0)
 30013d6:	eba1                	bnez	a5,3001426 <HAL_APT_PWMInit+0x1ea>
        aptHandle->baseAddress->DG_CFG.BIT.rg_dg_red_isel = wavePara->redInput;
 30013d8:	4014                	lw	a3,0(s0)
 30013da:	22e5                	jal	ra,30015c2 <HAL_APT_PWMInit+0x386>
 30013dc:	9bf1                	andi	a5,a5,-4
 30013de:	8fc9                	or	a5,a5,a0
 30013e0:	2af9                	jal	ra,30015be <HAL_APT_PWMInit+0x382>
        aptHandle->baseAddress->DG_CFG.BIT.rg_dg_red_osel = wavePara->redOutMode;
 30013e2:	fcf7f793          	andi	a5,a5,-49
 30013e6:	20f6a423          	sw	a5,520(a3)
        aptHandle->baseAddress->DG_RED.BIT.rg_dg_red = aptHandle->waveform.deadBandCnt;
 30013ea:	341e                	lhu	a5,40(s0)
 30013ec:	2006a703          	lw	a4,512(a3)
 30013f0:	6641                	lui	a2,0x10
 30013f2:	167d                	addi	a2,a2,-1
 30013f4:	75c1                	lui	a1,0xffff0
 30013f6:	8ff1                	and	a5,a5,a2
 30013f8:	8f6d                	and	a4,a4,a1
 30013fa:	8fd9                	or	a5,a5,a4
 30013fc:	20f6a023          	sw	a5,512(a3)
 3001400:	22c9                	jal	ra,30015c2 <HAL_APT_PWMInit+0x386>
        aptHandle->baseAddress->DG_CFG.BIT.rg_dg_fed_isel = wavePara->fedInput;
 3001402:	9bcd                	andi	a5,a5,-13
 3001404:	04a7a79b          	orshf	a5,a5,a0,sll,2
 3001408:	2a5d                	jal	ra,30015be <HAL_APT_PWMInit+0x382>
        aptHandle->baseAddress->DG_CFG.BIT.rg_dg_fed_osel = wavePara->fedOutMode;
 300140a:	f3f7f793          	andi	a5,a5,-193
 300140e:	0d07a81b          	orshf	a6,a5,a6,sll,6
 3001412:	2106a423          	sw	a6,520(a3)
        aptHandle->baseAddress->DG_FED.BIT.rg_dg_fed = aptHandle->waveform.deadBandCnt;
 3001416:	341e                	lhu	a5,40(s0)
 3001418:	2046a703          	lw	a4,516(a3)
 300141c:	8ff1                	and	a5,a5,a2
 300141e:	8f6d                	and	a4,a4,a1
 3001420:	8fd9                	or	a5,a5,a4
 3001422:	20f6a223          	sw	a5,516(a3)
    aptHandle->baseAddress->TC_REFA.BIT.rg_cnt_refal = aptHandle->waveform.dividerFactor;
 3001426:	401c                	lw	a5,0(s0)
 3001428:	2852                	lhu	a2,20(s0)
 300142a:	6585                	lui	a1,0x1
 300142c:	5b98                	lw	a4,48(a5)
 300142e:	15fd                	addi	a1,a1,-1
 3001430:	8e6d                	and	a2,a2,a1
 3001432:	f000 ffff 069f      	l.li	a3,0xf000ffff
 3001438:	2a41                	jal	ra,30015c8 <HAL_APT_PWMInit+0x38c>
 300143a:	db98                	sw	a4,48(a5)
    aptHandle->baseAddress->TC_REFB.BIT.rg_cnt_refbl = aptHandle->waveform.dividerFactor;
 300143c:	2852                	lhu	a2,20(s0)
 300143e:	5bd8                	lw	a4,52(a5)
 3001440:	8e6d                	and	a2,a2,a1
 3001442:	2259                	jal	ra,30015c8 <HAL_APT_PWMInit+0x38c>
 3001444:	dbd8                	sw	a4,52(a5)
    tmpA = aptHandle->baseAddress->TC_REFA;
 3001446:	5b94                	lw	a3,48(a5)
    aptHandle->baseAddress->TC_REFA = tmpA;
 3001448:	3872                	lhu	a2,54(s0)
 300144a:	75c1                	lui	a1,0xffff0
 300144c:	22cd                	jal	ra,300162e <HAL_APT_PWMInit+0x3f2>
    aptHandle->baseAddress->TC_REFB = tmpB;
 300144e:	37b1                	jal	ra,300139a <HAL_APT_PWMInit+0x15e>
 3001450:	dbd8                	sw	a4,52(a5)
    if (aptHandle->adcTrg.cntCmpLoadMode == APT_BUFFER_DISABLE) {
 3001452:	4074                	lw	a3,68(s0)
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refa_buf_en = 0;
 3001454:	43b8                	lw	a4,64(a5)
    if (aptHandle->adcTrg.cntCmpLoadMode == APT_BUFFER_DISABLE) {
 3001456:	16069d63          	bnez	a3,30015d0 <HAL_APT_PWMInit+0x394>
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refa_buf_en = 0;
 300145a:	9b3d                	andi	a4,a4,-17
 300145c:	22f1                	jal	ra,3001628 <HAL_APT_PWMInit+0x3ec>
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refb_buf_en = 0;
 300145e:	fbf77713          	andi	a4,a4,-65
 3001462:	c3b8                	sw	a4,64(a5)
    aptHandle->baseAddress->CS_TMR_SELA.BIT.rg_csa_tmr_sel = aptHandle->adcTrg.trgSrcSOCA;
 3001464:	4014                	lw	a3,0(s0)
 3001466:	581c                	lw	a5,48(s0)
 3001468:	5006a703          	lw	a4,1280(a3)
 300146c:	2ac1                	jal	ra,300163c <HAL_APT_PWMInit+0x400>
 300146e:	50f6a023          	sw	a5,1280(a3)
    aptHandle->baseAddress->CS_PRSCA_CFG.BIT.rg_csa_prsc_prd = aptHandle->adcTrg.trgScaleSOCA;
 3001472:	5086a783          	lw	a5,1288(a3)
 3001476:	03444703          	lbu	a4,52(s0) # fffff034 <RAM_END+0xfbffb034>
 300147a:	22e9                	jal	ra,3001644 <HAL_APT_PWMInit+0x408>
 300147c:	50f6a423          	sw	a5,1288(a3)
    aptHandle->baseAddress->CS_TMR_SELA.BIT.rg_csa_en_cs = aptHandle->adcTrg.trgEnSOCA;
 3001480:	5006a783          	lw	a5,1280(a3)
 3001484:	02c44703          	lbu	a4,44(s0)
 3001488:	7641                	lui	a2,0xffff0
 300148a:	167d                	addi	a2,a2,-1
 300148c:	8b05                	andi	a4,a4,1
 300148e:	8ff1                	and	a5,a5,a2
 3001490:	20e7a79b          	orshf	a5,a5,a4,sll,16
 3001494:	50f6a023          	sw	a5,1280(a3)
    aptHandle->baseAddress->CS_TMR_SELB.BIT.rg_csb_tmr_sel = aptHandle->adcTrg.trgSrcSOCB;
 3001498:	5046a703          	lw	a4,1284(a3)
 300149c:	5c5c                	lw	a5,60(s0)
 300149e:	2a79                	jal	ra,300163c <HAL_APT_PWMInit+0x400>
 30014a0:	50f6a223          	sw	a5,1284(a3)
    aptHandle->baseAddress->CS_PRSCB_CFG.BIT.rg_csb_prsc_prd = aptHandle->adcTrg.trgScaleSOCB;
 30014a4:	50c6a783          	lw	a5,1292(a3)
 30014a8:	04044703          	lbu	a4,64(s0)
 30014ac:	2a61                	jal	ra,3001644 <HAL_APT_PWMInit+0x408>
 30014ae:	50f6a623          	sw	a5,1292(a3)
    aptHandle->baseAddress->CS_TMR_SELB.BIT.rg_csb_en_cs = aptHandle->adcTrg.trgEnSOCB;
 30014b2:	5046a783          	lw	a5,1284(a3)
 30014b6:	03844703          	lbu	a4,56(s0)
 30014ba:	8ff1                	and	a5,a5,a2
 30014bc:	8b05                	andi	a4,a4,1
 30014be:	20e7a79b          	orshf	a5,a5,a4,sll,16
 30014c2:	50f6a223          	sw	a5,1284(a3)
    aptHandle->baseAddress->INT_TMR_SEL.BIT.rg_int_tmr_sel = aptHandle->tmrInterrupt.tmrInterruptSrc;
 30014c6:	4246a703          	lw	a4,1060(a3)
 30014ca:	483c                	lw	a5,80(s0)
 30014cc:	2a85                	jal	ra,300163c <HAL_APT_PWMInit+0x400>
 30014ce:	42f6a223          	sw	a5,1060(a3)
    aptHandle->baseAddress->INT_PRSC_CFG.BIT.rg_int_prsc_prd = aptHandle->tmrInterrupt.tmrInterruptScale;
 30014d2:	4286a783          	lw	a5,1064(a3)
 30014d6:	05444703          	lbu	a4,84(s0)
 30014da:	22ad                	jal	ra,3001644 <HAL_APT_PWMInit+0x408>
 30014dc:	42f6a423          	sw	a5,1064(a3)
    aptHandle->baseAddress->INT_TMR_EN.BIT.rg_int_en_tmr = aptHandle->tmrInterrupt.tmrInterruptEn;
 30014e0:	04c44703          	lbu	a4,76(s0)
 30014e4:	4146a783          	lw	a5,1044(a3)
}
 30014e8:	4501                	li	a0,0
    aptHandle->baseAddress->INT_TMR_EN.BIT.rg_int_en_tmr = aptHandle->tmrInterrupt.tmrInterruptEn;
 30014ea:	8b05                	andi	a4,a4,1
 30014ec:	9bf9                	andi	a5,a5,-2
 30014ee:	8fd9                	or	a5,a5,a4
 30014f0:	40f6aa23          	sw	a5,1044(a3)
}
 30014f4:	8034                	popret	{ra,s0-s1},16
            wavePara.fedOutMode = APT_DB_FED_OUTPUT_INVERT;
 30014f6:	4809                	li	a6,2
            wavePara.redInput = APT_DB_RED_INPUT_PWM_B;
 30014f8:	4505                	li	a0,1
            wavePara.rightEdgeActA = APT_PWM_ACTION_HIGH;
 30014fa:	4489                	li	s1,2
            wavePara.leftEdgeActA = APT_PWM_ACTION_LOW;
 30014fc:	87aa                	mv	a5,a0
 30014fe:	b56d                	j	30013a8 <HAL_APT_PWMInit+0x16c>
    APT_WaveformPara wavePara = {0, 0, 0, 0, 0, 0, 0, 0};
 3001500:	4501                	li	a0,0
            wavePara.rightEdgeActA = APT_PWM_ACTION_LOW;
 3001502:	4485                	li	s1,1
 3001504:	b555                	j	30013a8 <HAL_APT_PWMInit+0x16c>
 3001506:	2099                	jal	ra,300154c <HAL_APT_PWMInit+0x310>
            aptHandle->baseAddress->PG_ACT_A.BIT.rg_pga_act_refc_inc = wavePara->leftEdgeActA;
 3001508:	18f7271b          	orshf	a4,a4,a5,sll,12
 300150c:	2801                	jal	ra,300151c <HAL_APT_PWMInit+0x2e0>
            aptHandle->baseAddress->PG_ACT_A.BIT.rg_pga_act_refd_inc = wavePara->rightEdgeActA;
 300150e:	e6b7471b          	andshf	a4,a4,a1,ror,19
 3001512:	2097271b          	orshf	a4,a4,s1,sll,16
            aptHandle->baseAddress->PG_ACT_A.BIT.rg_pga_act_refd_dec = wavePara->rightEdgeActA;
 3001516:	10e6a023          	sw	a4,256(a3)
 300151a:	b54d                	j	30013bc <HAL_APT_PWMInit+0x180>
            aptHandle->baseAddress->PG_ACT_A.BIT.rg_pga_act_refc_inc = wavePara->leftEdgeActA;
 300151c:	10e6a023          	sw	a4,256(a3)
            aptHandle->baseAddress->PG_ACT_A.BIT.rg_pga_act_refd_inc = wavePara->rightEdgeActA;
 3001520:	1006a703          	lw	a4,256(a3)
 3001524:	559d                	li	a1,-25
 3001526:	8082                	ret
 3001528:	1006a703          	lw	a4,256(a3)
 300152c:	75d1                	lui	a1,0xffff4
 300152e:	2015                	jal	ra,3001552 <HAL_APT_PWMInit+0x316>
            aptHandle->baseAddress->PG_ACT_A.BIT.rg_pga_act_refc_dec = wavePara->leftEdgeActA;
 3001530:	1cf7271b          	orshf	a4,a4,a5,sll,14
 3001534:	37e5                	jal	ra,300151c <HAL_APT_PWMInit+0x2e0>
 3001536:	2011                	jal	ra,300153a <HAL_APT_PWMInit+0x2fe>
 3001538:	bff9                	j	3001516 <HAL_APT_PWMInit+0x2da>
            aptHandle->baseAddress->PG_ACT_B.BIT.rg_pgb_act_refd_dec = wavePara->rightEdgeActB;
 300153a:	e2b7471b          	andshf	a4,a4,a1,ror,17
 300153e:	2497271b          	orshf	a4,a4,s1,sll,18
 3001542:	8082                	ret
 3001544:	2021                	jal	ra,300154c <HAL_APT_PWMInit+0x310>
            aptHandle->baseAddress->PG_ACT_A.BIT.rg_pga_act_refc_inc = wavePara->leftEdgeActA;
 3001546:	18f7271b          	orshf	a4,a4,a5,sll,12
 300154a:	b7ed                	j	3001534 <HAL_APT_PWMInit+0x2f8>
 300154c:	1006a703          	lw	a4,256(a3)
 3001550:	75f5                	lui	a1,0xffffd
 3001552:	15fd                	addi	a1,a1,-1
 3001554:	8f6d                	and	a4,a4,a1
 3001556:	8082                	ret
 3001558:	1046a703          	lw	a4,260(a3)
 300155c:	75f5                	lui	a1,0xffffd
 300155e:	3fd5                	jal	ra,3001552 <HAL_APT_PWMInit+0x316>
            aptHandle->baseAddress->PG_ACT_B.BIT.rg_pgb_act_refc_inc = wavePara->leftEdgeActB;
 3001560:	18f7279b          	orshf	a5,a4,a5,sll,12
 3001564:	2811                	jal	ra,3001578 <HAL_APT_PWMInit+0x33c>
            aptHandle->baseAddress->PG_ACT_B.BIT.rg_pgb_act_refd_inc = wavePara->rightEdgeActB;
 3001566:	1046a783          	lw	a5,260(a3)
 300156a:	559d                	li	a1,-25
 300156c:	e6b7c79b          	andshf	a5,a5,a1,ror,19
 3001570:	2097a79b          	orshf	a5,a5,s1,sll,16
 3001574:	2011                	jal	ra,3001578 <HAL_APT_PWMInit+0x33c>
 3001576:	bda9                	j	30013d0 <HAL_APT_PWMInit+0x194>
            aptHandle->baseAddress->PG_ACT_B.BIT.rg_pgb_act_refc_inc = wavePara->leftEdgeActB;
 3001578:	10f6a223          	sw	a5,260(a3)
 300157c:	8082                	ret
 300157e:	1046a703          	lw	a4,260(a3)
 3001582:	75d1                	lui	a1,0xffff4
 3001584:	37f9                	jal	ra,3001552 <HAL_APT_PWMInit+0x316>
            aptHandle->baseAddress->PG_ACT_B.BIT.rg_pgb_act_refc_dec = wavePara->leftEdgeActB;
 3001586:	1cf7279b          	orshf	a5,a4,a5,sll,14
 300158a:	37fd                	jal	ra,3001578 <HAL_APT_PWMInit+0x33c>
            aptHandle->baseAddress->PG_ACT_B.BIT.rg_pgb_act_refd_dec = wavePara->rightEdgeActB;
 300158c:	1046a703          	lw	a4,260(a3)
 3001590:	559d                	li	a1,-25
 3001592:	3765                	jal	ra,300153a <HAL_APT_PWMInit+0x2fe>
 3001594:	10e6a223          	sw	a4,260(a3)
 3001598:	bd25                	j	30013d0 <HAL_APT_PWMInit+0x194>
            aptHandle->baseAddress->PG_ACT_B.BIT.rg_pgb_act_refc_inc = wavePara->leftEdgeActB;
 300159a:	1046a603          	lw	a2,260(a3)
 300159e:	75f5                	lui	a1,0xffffd
 30015a0:	15fd                	addi	a1,a1,-1
 30015a2:	8e6d                	and	a2,a2,a1
 30015a4:	18f6279b          	orshf	a5,a2,a5,sll,12
 30015a8:	3fc1                	jal	ra,3001578 <HAL_APT_PWMInit+0x33c>
            aptHandle->baseAddress->PG_ACT_B.BIT.rg_pgb_act_refd_dec = wavePara->rightEdgeActB;
 30015aa:	1046a603          	lw	a2,260(a3)
 30015ae:	559d                	li	a1,-25
 30015b0:	e2b6461b          	andshf	a2,a2,a1,ror,17
 30015b4:	2496261b          	orshf	a2,a2,s1,sll,18
 30015b8:	10c6a223          	sw	a2,260(a3)
 30015bc:	bd11                	j	30013d0 <HAL_APT_PWMInit+0x194>
        aptHandle->baseAddress->DG_CFG.BIT.rg_dg_fed_isel = wavePara->fedInput;
 30015be:	20f6a423          	sw	a5,520(a3)
        aptHandle->baseAddress->DG_CFG.BIT.rg_dg_fed_osel = wavePara->fedOutMode;
 30015c2:	2086a783          	lw	a5,520(a3)
 30015c6:	8082                	ret
    aptHandle->baseAddress->TC_REFB.BIT.rg_cnt_refbl = aptHandle->waveform.dividerFactor;
 30015c8:	8f75                	and	a4,a4,a3
 30015ca:	20c7271b          	orshf	a4,a4,a2,sll,16
 30015ce:	8082                	ret
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refa_buf_en = 1;
 30015d0:	01076713          	ori	a4,a4,16
 30015d4:	2891                	jal	ra,3001628 <HAL_APT_PWMInit+0x3ec>
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refb_buf_en = 1;
 30015d6:	04076713          	ori	a4,a4,64
 30015da:	c3b8                	sw	a4,64(a5)
        unsigned int gldLdEn = (aptHandle->adcTrg.cntCmpLoadMode == APT_BUFFER_GLOBAL_LOAD) ? 1 : 0;
 30015dc:	4074                	lw	a3,68(s0)
 30015de:	ffd68713          	addi	a4,a3,-3
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refa_gld_en = gldLdEn;
 30015e2:	43b4                	lw	a3,64(a5)
 30015e4:	00173713          	seqz	a4,a4
 30015e8:	fdf6f693          	andi	a3,a3,-33
 30015ec:	0ae6a69b          	orshf	a3,a3,a4,sll,5
 30015f0:	c3b4                	sw	a3,64(a5)
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refb_gld_en = gldLdEn;
 30015f2:	43b4                	lw	a3,64(a5)
 30015f4:	f7f6f693          	andi	a3,a3,-129
 30015f8:	0ee6a69b          	orshf	a3,a3,a4,sll,7
 30015fc:	c3b4                	sw	a3,64(a5)
        aptHandle->baseAddress->TC_REF_LOAD.reg &= (~(0x1F << (APT_COMPARE_REFERENCE_A * refBufField)));
 30015fe:	4bf4                	lw	a3,84(a5)
 3001600:	9a81                	andi	a3,a3,-32
 3001602:	3349                	jal	ra,3001384 <HAL_APT_PWMInit+0x148>
        aptHandle->baseAddress->TC_REF_LOAD.reg &= (~(0x1F << (APT_COMPARE_REFERENCE_B * refBufField)));
 3001604:	f0e6c69b          	andshf	a3,a3,a4,ror,24
 3001608:	cbf4                	sw	a3,84(a5)
        aptHandle->baseAddress->TC_REF_LOAD.reg |=
 300160a:	4bf4                	lw	a3,84(a5)
 300160c:	4430                	lw	a2,72(s0)
 300160e:	8ed1                	or	a3,a3,a2
 3001610:	cbf4                	sw	a3,84(a5)
        aptHandle->baseAddress->TC_REF_LOAD.reg |=
 3001612:	4bf8                	lw	a4,84(a5)
            (aptHandle->adcTrg.cntCmpLoadEvt << (APT_COMPARE_REFERENCE_B * refBufField));
 3001614:	4434                	lw	a3,72(s0)
        aptHandle->baseAddress->TC_REF_LOAD.reg |=
 3001616:	10d7271b          	orshf	a4,a4,a3,sll,8
 300161a:	cbf8                	sw	a4,84(a5)
        tmpA = aptHandle->baseAddress->TC_REFA;
 300161c:	5b94                	lw	a3,48(a5)
        aptHandle->baseAddress->TC_REFA = tmpA;
 300161e:	3872                	lhu	a2,54(s0)
 3001620:	2039                	jal	ra,300162e <HAL_APT_PWMInit+0x3f2>
        aptHandle->baseAddress->TC_REFB = tmpB;
 3001622:	3ba5                	jal	ra,300139a <HAL_APT_PWMInit+0x15e>
 3001624:	dbd8                	sw	a4,52(a5)
 3001626:	bd3d                	j	3001464 <HAL_APT_PWMInit+0x228>
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refa_buf_en = 1;
 3001628:	c3b8                	sw	a4,64(a5)
        aptHandle->baseAddress->TC_BUF_EN.BIT.rg_refb_buf_en = 1;
 300162a:	43b8                	lw	a4,64(a5)
 300162c:	8082                	ret
        aptHandle->baseAddress->TC_REFA = tmpA;
 300162e:	8eed                	and	a3,a3,a1
 3001630:	8ed1                	or	a3,a3,a2
 3001632:	db94                	sw	a3,48(a5)
        tmpB = aptHandle->baseAddress->TC_REFB;
 3001634:	5bd8                	lw	a4,52(a5)
        aptHandle->baseAddress->TC_REFB = tmpB;
 3001636:	04245683          	lhu	a3,66(s0)
 300163a:	8082                	ret
    aptHandle->baseAddress->INT_TMR_SEL.BIT.rg_int_tmr_sel = aptHandle->tmrInterrupt.tmrInterruptSrc;
 300163c:	8bbd                	andi	a5,a5,15
 300163e:	9b41                	andi	a4,a4,-16
 3001640:	8fd9                	or	a5,a5,a4
 3001642:	8082                	ret
    aptHandle->baseAddress->INT_PRSC_CFG.BIT.rg_int_prsc_prd = aptHandle->tmrInterrupt.tmrInterruptScale;
 3001644:	8b3d                	andi	a4,a4,15
 3001646:	9bc1                	andi	a5,a5,-16
 3001648:	8fd9                	or	a5,a5,a4
 300164a:	8082                	ret

0300164c <HAL_APT_ProtectInitEx>:
{
 300164c:	8038                	push	{ra,s0-s1},-16
    aptHandle->baseAddress->OC_MODE.reg = 0x0; /* clear OC_MODE resgiter */
 300164e:	411c                	lw	a5,0(a0)
    aptHandle->baseAddress->TC_MODE.BIT.rg_emu_stop = 0x0; /* don't stop APT when emulation */
 3001650:	569d                	li	a3,-25
{
 3001652:	84aa                	mv	s1,a0
    aptHandle->baseAddress->OC_MODE.reg = 0x0; /* clear OC_MODE resgiter */
 3001654:	3007a023          	sw	zero,768(a5)
    aptHandle->baseAddress->TC_MODE.BIT.rg_emu_stop = 0x0; /* don't stop APT when emulation */
 3001658:	4b98                	lw	a4,16(a5)
{
 300165a:	842e                	mv	s0,a1
    aptHandle->baseAddress->TC_MODE.BIT.rg_emu_stop = 0x0; /* don't stop APT when emulation */
 300165c:	ced7471b          	andshf	a4,a4,a3,ror,7
 3001660:	cb98                	sw	a4,16(a5)
    aptHandle->baseAddress->OC_PRD_CLR.reg = 0x0; /* clear OC_PRD_CLR register */
 3001662:	3207a223          	sw	zero,804(a5)
    if (protect->ocEventModeEx == APT_OUT_CTRL_ONE_SHOT) {
 3001666:	41d4                	lw	a3,4(a1)
 3001668:	49d8                	lw	a4,20(a1)
 300166a:	14069863          	bnez	a3,30017ba <HAL_APT_ProtectInitEx+0x16e>
 300166e:	2a49                	jal	ra,3001800 <HAL_APT_ProtectInitEx+0x1b4>
        aptHandle->baseAddress->OC_MODE.reg &= (~(protect->ocSysEvent << ocModeOffset));
 3001670:	0742                	slli	a4,a4,0x10
 3001672:	2259                	jal	ra,30017f8 <HAL_APT_ProtectInitEx+0x1ac>
 3001674:	30e7a023          	sw	a4,768(a5)
    if (protect->ocEventEnEx == BASE_CFG_ENABLE) {
 3001678:	2014                	lbu	a3,0(s0)
 300167a:	4858                	lw	a4,20(s0)
 300167c:	16068b63          	beqz	a3,30017f2 <HAL_APT_ProtectInitEx+0x1a6>
 3001680:	2241                	jal	ra,3001800 <HAL_APT_ProtectInitEx+0x1b4>
        aptHandle->baseAddress->OC_MODE.reg |= protect->ocSysEvent;
 3001682:	8f55                	or	a4,a4,a3
        aptHandle->baseAddress->OC_MODE.reg &= (~(protect->ocSysEvent));
 3001684:	30e7a023          	sw	a4,768(a5)
    if (protect->ocEvtInterruptEnEx == BASE_CFG_ENABLE) {
 3001688:	2814                	lbu	a3,16(s0)
 300168a:	4858                	lw	a4,20(s0)
 300168c:	16068d63          	beqz	a3,3001806 <HAL_APT_ProtectInitEx+0x1ba>
        aptHandle->baseAddress->INT_EVT_EN.reg |= protect->ocSysEvent;
 3001690:	4107a683          	lw	a3,1040(a5)
 3001694:	8f55                	or	a4,a4,a3
        aptHandle->baseAddress->INT_EVT_EN.reg &= (~(protect->ocSysEvent));
 3001696:	40e7a823          	sw	a4,1040(a5)
    aptHandle->baseAddress->EM_MRG_SEL.BIT.rg_em_a1_sel = EM_COMBINE_A1_SRC_ENABLE_ALL; /* open logic OR */
 300169a:	6107a703          	lw	a4,1552(a5)
    aptHandle->baseAddress->EM_AOR_EN.BIT.rg_em_a1_oren = protect->originalEvtEx; /* open selected event */
 300169e:	66a1                	lui	a3,0x8
 30016a0:	16fd                	addi	a3,a3,-1
    aptHandle->baseAddress->EM_MRG_SEL.BIT.rg_em_a1_sel = EM_COMBINE_A1_SRC_ENABLE_ALL; /* open logic OR */
 30016a2:	00f76713          	ori	a4,a4,15
 30016a6:	60e7a823          	sw	a4,1552(a5)
    aptHandle->baseAddress->EM_AOR_EN.BIT.rg_em_a1_oren = protect->originalEvtEx; /* open selected event */
 30016aa:	4c18                	lw	a4,24(s0)
 30016ac:	7661                	lui	a2,0xffff8
    for (int i = 0; i <= APT_EM_COMBINE_SRC_EVT_MP_6; i++) {
 30016ae:	4801                	li	a6,0
    aptHandle->baseAddress->EM_AOR_EN.BIT.rg_em_a1_oren = protect->originalEvtEx; /* open selected event */
 30016b0:	8f75                	and	a4,a4,a3
 30016b2:	6087a683          	lw	a3,1544(a5)
 30016b6:	9f21                	uxth	a4
 30016b8:	8ef1                	and	a3,a3,a2
 30016ba:	8f55                	or	a4,a4,a3
 30016bc:	60e7a423          	sw	a4,1544(a5)
    APT_SetProtectSrcEventPolarityEx(aptHandle, protect->evtPolarityMaskEx);
 30016c0:	4c50                	lw	a2,28(s0)
 30016c2:	408c                	lw	a1,0(s1)
        curPolarity = (polarityMask >> curEvent) & 0x01;
 30016c4:	010657b3          	srl	a5,a2,a6
 30016c8:	8b85                	andi	a5,a5,1
        if (curEvent >= APT_EM_COMBINE_SRC_EVT_MP_1) {
 30016ca:	0358413b          	blti	a6,3,300180e <HAL_APT_ProtectInitEx+0x1c2>
 30016ce:	56ad                	li	a3,-21
 30016d0:	c6d8069b          	addshf	a3,a6,a3,ror,3
            aptHandle->baseAddress->EM_EVTMP_PSEL.reg &= (~(0b11 << curMpEventNum));
 30016d4:	6045a503          	lw	a0,1540(a1) # ffffd604 <RAM_END+0xfbff9604>
 30016d8:	0686                	slli	a3,a3,0x1
 30016da:	470d                	li	a4,3
 30016dc:	00d71733          	sll	a4,a4,a3
 30016e0:	fff74713          	not	a4,a4
 30016e4:	8f69                	and	a4,a4,a0
 30016e6:	60e5a223          	sw	a4,1540(a1)
            aptHandle->baseAddress->EM_EVTMP_PSEL.reg |= (curPolarity << curMpEventNum);
 30016ea:	6045a703          	lw	a4,1540(a1)
 30016ee:	00d797b3          	sll	a5,a5,a3
 30016f2:	8fd9                	or	a5,a5,a4
 30016f4:	60f5a223          	sw	a5,1540(a1)
    for (int i = 0; i <= APT_EM_COMBINE_SRC_EVT_MP_6; i++) {
 30016f8:	0805                	addi	a6,a6,1
 30016fa:	09f812bb          	bnei	a6,9,30016c4 <HAL_APT_ProtectInitEx+0x78>
    APT_SetEMEventFilterEx(protect->filterCycleNumEx);
 30016fe:	02044503          	lbu	a0,32(s0)
    for (srcEvent = 0; srcEvent < maxEventNum; srcEvent++) {
 3001702:	4601                	li	a2,0
        SYSCTRL1->APT_POE_FILTER.reg |= 0x1 << (enableOffset + srcEvent);
 3001704:	101087b7          	lui	a5,0x10108
 3001708:	4b98                	lw	a4,16(a5)
 300170a:	01860593          	addi	a1,a2,24 # ffff8018 <RAM_END+0xfbff4018>
 300170e:	4685                	li	a3,1
 3001710:	00b696b3          	sll	a3,a3,a1
 3001714:	8f55                	or	a4,a4,a3
 3001716:	cb98                	sw	a4,16(a5)
        SYSCTRL1->APT_POE_FILTER.reg |= (((unsigned int)filterNum & 0xff) << (valueShift * srcEvent));
 3001718:	4b98                	lw	a4,16(a5)
 300171a:	00361593          	slli	a1,a2,0x3
 300171e:	00b515b3          	sll	a1,a0,a1
 3001722:	8f4d                	or	a4,a4,a1
 3001724:	cb98                	sw	a4,16(a5)
        SYSCTRL1->APT_EVTMP_FILTER.reg |=  0x1 << (enableOffset + srcEvent);
 3001726:	4f98                	lw	a4,24(a5)
    for (srcEvent = 0; srcEvent < maxEventNum; srcEvent++) {
 3001728:	0605                	addi	a2,a2,1
        SYSCTRL1->APT_EVTMP_FILTER.reg |=  0x1 << (enableOffset + srcEvent);
 300172a:	8f55                	or	a4,a4,a3
 300172c:	cf98                	sw	a4,24(a5)
        SYSCTRL1->APT_EVTMP_FILTER.reg |= (((unsigned int)filterNum & 0xff) << (valueShift * srcEvent));
 300172e:	4f98                	lw	a4,24(a5)
 3001730:	8f4d                	or	a4,a4,a1
 3001732:	cf98                	sw	a4,24(a5)
    for (srcEvent = 0; srcEvent < maxEventNum; srcEvent++) {
 3001734:	03f6143b          	bnei	a2,3,3001704 <HAL_APT_ProtectInitEx+0xb8>
    aptHandle->baseAddress->EM_MRG_SEL.BIT.rg_evta1t_sel= APT_EM_COMBINE_EVT1; /* all event input to combine event A1 */
 3001738:	4088                	lw	a0,0(s1)
 300173a:	570d                	li	a4,-29
 300173c:	61052783          	lw	a5,1552(a0)
 3001740:	e4e7c79b          	andshf	a5,a5,a4,ror,18
 3001744:	6741                	lui	a4,0x10
 3001746:	8fd9                	or	a5,a5,a4
 3001748:	60f52823          	sw	a5,1552(a0)
    APT_SetOutCtrlAction(aptHandle, protect->ocActionEx, APT_OC_EVT_COMBINE_EVENT_A1_UP);
 300174c:	444c                	lw	a1,12(s0)
 300174e:	3c81                	jal	ra,300119e <APT_SetOutCtrlAction.isra.1>
    APT_SetOutCtrlAction(aptHandle, protect->ocActionEx, APT_OC_EVT_COMBINE_EVENT_A1_DOWN);
 3001750:	444c                	lw	a1,12(s0)
 3001752:	4088                	lw	a0,0(s1)
 3001754:	464d                	li	a2,19
 3001756:	34a1                	jal	ra,300119e <APT_SetOutCtrlAction.isra.1>
    aptHandle->baseAddress->OC_MODE.BIT.rg_oc_mode_evta1 = protect->ocEventModeEx; /* set protect mode */
 3001758:	4098                	lw	a4,0(s1)
 300175a:	405c                	lw	a5,4(s0)
 300175c:	563d                	li	a2,-17
 300175e:	30072683          	lw	a3,768(a4) # 10300 <RAM_SIZE+0xdb00>
 3001762:	8b85                	andi	a5,a5,1
 3001764:	d8c6c69b          	andshf	a3,a3,a2,ror,12
 3001768:	30f6a79b          	orshf	a5,a3,a5,sll,24
 300176c:	30f72023          	sw	a5,768(a4)
    if ((protect->cbcClrModeEx & APT_CLEAR_CBC_ON_CNTR_ZERO) ==APT_CLEAR_CBC_ON_CNTR_ZERO) {
 3001770:	441c                	lw	a5,8(s0)
 3001772:	8b85                	andi	a5,a5,1
 3001774:	c799                	beqz	a5,3001782 <HAL_APT_ProtectInitEx+0x136>
        aptHandle->baseAddress->OC_PRD_CLR.reg |= APT_OC_COMBINE_EVENT_A1; /* set CBC clear mode */
 3001776:	32472783          	lw	a5,804(a4)
 300177a:	1007e793          	ori	a5,a5,256
 300177e:	32f72223          	sw	a5,804(a4)
    if ((protect->cbcClrModeEx & APT_CLEAR_CBC_ON_CNTR_PERIOD) == APT_CLEAR_CBC_ON_CNTR_PERIOD) {
 3001782:	441c                	lw	a5,8(s0)
 3001784:	8b89                	andi	a5,a5,2
 3001786:	cb81                	beqz	a5,3001796 <HAL_APT_ProtectInitEx+0x14a>
        aptHandle->baseAddress->OC_PRD_CLR.reg |= (APT_OC_COMBINE_EVENT_A1 << cbcClrOffsetPrd);
 3001788:	32472783          	lw	a5,804(a4)
 300178c:	010006b7          	lui	a3,0x1000
 3001790:	8fd5                	or	a5,a5,a3
 3001792:	32f72223          	sw	a5,804(a4)
    if (protect->ocEventEnEx == BASE_CFG_ENABLE) {
 3001796:	201c                	lbu	a5,0(s0)
 3001798:	cfc9                	beqz	a5,3001832 <HAL_APT_ProtectInitEx+0x1e6>
        aptHandle->baseAddress->OC_MODE.reg |= APT_OC_COMBINE_EVENT_A1; /* OC input combine event A1 */
 300179a:	30072783          	lw	a5,768(a4)
 300179e:	1007e793          	ori	a5,a5,256
        aptHandle->baseAddress->OC_MODE.reg &= (~(APT_OC_COMBINE_EVENT_A1));
 30017a2:	30f72023          	sw	a5,768(a4)
    if (protect->ocEvtInterruptEnEx == BASE_CFG_ENABLE) {
 30017a6:	281c                	lbu	a5,16(s0)
 30017a8:	cbd1                	beqz	a5,300183c <HAL_APT_ProtectInitEx+0x1f0>
        aptHandle->baseAddress->INT_EVT_EN.reg |= (APT_OC_COMBINE_EVENT_A1);
 30017aa:	41072783          	lw	a5,1040(a4)
 30017ae:	1007e793          	ori	a5,a5,256
        aptHandle->baseAddress->INT_EVT_EN.reg &= (~(APT_OC_COMBINE_EVENT_A1)); /* enable combine event A1 interrupt */
 30017b2:	40f72823          	sw	a5,1040(a4)
}
 30017b6:	4501                	li	a0,0
 30017b8:	8034                	popret	{ra,s0-s1},16
    } else if (protect->ocEventModeEx == APT_OUT_CTRL_CYCLE_BY_CYBLE) {
 30017ba:	01a69fbb          	bnei	a3,1,3001678 <HAL_APT_ProtectInitEx+0x2c>
 30017be:	2089                	jal	ra,3001800 <HAL_APT_ProtectInitEx+0x1b4>
        aptHandle->baseAddress->OC_MODE.reg |= (protect->ocSysEvent << ocModeOffset);
 30017c0:	20e6a71b          	orshf	a4,a3,a4,sll,16
 30017c4:	30e7a023          	sw	a4,768(a5) # 10108300 <RAM_END+0xc104300>
        if ((protect->cbcClrModeEx & APT_CLEAR_CBC_ON_CNTR_ZERO) ==APT_CLEAR_CBC_ON_CNTR_ZERO) {
 30017c8:	4598                	lw	a4,8(a1)
 30017ca:	8b05                	andi	a4,a4,1
 30017cc:	c719                	beqz	a4,30017da <HAL_APT_ProtectInitEx+0x18e>
            aptHandle->baseAddress->OC_PRD_CLR.reg |= protect->ocSysEvent;
 30017ce:	3247a683          	lw	a3,804(a5)
 30017d2:	49d8                	lw	a4,20(a1)
 30017d4:	8f55                	or	a4,a4,a3
 30017d6:	32e7a223          	sw	a4,804(a5)
        if ((protect->cbcClrModeEx & APT_CLEAR_CBC_ON_CNTR_PERIOD) == APT_CLEAR_CBC_ON_CNTR_PERIOD) {
 30017da:	4418                	lw	a4,8(s0)
 30017dc:	8b09                	andi	a4,a4,2
 30017de:	e8070de3          	beqz	a4,3001678 <HAL_APT_ProtectInitEx+0x2c>
            aptHandle->baseAddress->OC_PRD_CLR.reg |= (protect->ocSysEvent << cbcClrOffsetPrd);
 30017e2:	3247a683          	lw	a3,804(a5)
 30017e6:	4858                	lw	a4,20(s0)
 30017e8:	20e6a71b          	orshf	a4,a3,a4,sll,16
 30017ec:	32e7a223          	sw	a4,804(a5)
 30017f0:	b561                	j	3001678 <HAL_APT_ProtectInitEx+0x2c>
 30017f2:	2039                	jal	ra,3001800 <HAL_APT_ProtectInitEx+0x1b4>
        aptHandle->baseAddress->OC_MODE.reg &= (~(protect->ocSysEvent));
 30017f4:	2011                	jal	ra,30017f8 <HAL_APT_ProtectInitEx+0x1ac>
 30017f6:	b579                	j	3001684 <HAL_APT_ProtectInitEx+0x38>
            aptHandle->baseAddress->EM_EVTIO_PSEL.reg &= (~(0b11 << curIoEventNum));
 30017f8:	fff74713          	not	a4,a4
 30017fc:	8f75                	and	a4,a4,a3
 30017fe:	8082                	ret
        aptHandle->baseAddress->OC_MODE.reg &= (~(protect->ocSysEvent));
 3001800:	3007a683          	lw	a3,768(a5)
 3001804:	8082                	ret
        aptHandle->baseAddress->INT_EVT_EN.reg &= (~(protect->ocSysEvent));
 3001806:	4107a683          	lw	a3,1040(a5)
 300180a:	37fd                	jal	ra,30017f8 <HAL_APT_ProtectInitEx+0x1ac>
 300180c:	b569                	j	3001696 <HAL_APT_ProtectInitEx+0x4a>
            aptHandle->baseAddress->EM_EVTIO_PSEL.reg &= (~(0b11 << curIoEventNum));
 300180e:	6005a683          	lw	a3,1536(a1)
 3001812:	00181513          	slli	a0,a6,0x1
 3001816:	470d                	li	a4,3
 3001818:	00a71733          	sll	a4,a4,a0
 300181c:	3ff1                	jal	ra,30017f8 <HAL_APT_ProtectInitEx+0x1ac>
 300181e:	60e5a023          	sw	a4,1536(a1)
            aptHandle->baseAddress->EM_EVTIO_PSEL.reg |= (curPolarity << curIoEventNum);
 3001822:	6005a703          	lw	a4,1536(a1)
 3001826:	00a797b3          	sll	a5,a5,a0
 300182a:	8fd9                	or	a5,a5,a4
 300182c:	60f5a023          	sw	a5,1536(a1)
 3001830:	b5e1                	j	30016f8 <HAL_APT_ProtectInitEx+0xac>
        aptHandle->baseAddress->OC_MODE.reg &= (~(APT_OC_COMBINE_EVENT_A1));
 3001832:	30072783          	lw	a5,768(a4)
 3001836:	eff7f793          	andi	a5,a5,-257
 300183a:	b7a5                	j	30017a2 <HAL_APT_ProtectInitEx+0x156>
        aptHandle->baseAddress->INT_EVT_EN.reg &= (~(APT_OC_COMBINE_EVENT_A1)); /* enable combine event A1 interrupt */
 300183c:	41072783          	lw	a5,1040(a4)
 3001840:	eff7f793          	andi	a5,a5,-257
 3001844:	b7bd                	j	30017b2 <HAL_APT_ProtectInitEx+0x166>

03001846 <HAL_APT_MasterSyncInit>:
    aptHandle->baseAddress->SYNO_CFG.reg &= (~(0xFF << 0));
 3001846:	411c                	lw	a5,0(a0)
}
 3001848:	4501                	li	a0,0
    aptHandle->baseAddress->SYNO_CFG.reg &= (~(0xFF << 0));
 300184a:	7087a703          	lw	a4,1800(a5)
 300184e:	f0077713          	andi	a4,a4,-256
 3001852:	70e7a423          	sw	a4,1800(a5)
    aptHandle->baseAddress->SYNO_CFG.reg |= (syncOutSrc << 0);
 3001856:	7087a703          	lw	a4,1800(a5)
 300185a:	8dd9                	or	a1,a1,a4
 300185c:	70b7a423          	sw	a1,1800(a5)
    aptHandle->baseAddress->SYNO_CFG.BIT.rg_mode_syno = APT_SYNCOUT_MULTIPLE_MODE;
 3001860:	7087a703          	lw	a4,1800(a5)
 3001864:	10076713          	ori	a4,a4,256
 3001868:	70e7a423          	sw	a4,1800(a5)
}
 300186c:	8082                	ret

0300186e <HAL_APT_SlaveSyncInit>:
    aptHandle->baseAddress->TC_PHS.BIT.rg_cnt_dir = slaveSyncIn->syncCntMode;
 300186e:	411c                	lw	a5,0(a0)
 3001870:	41d4                	lw	a3,4(a1)
 3001872:	563d                	li	a2,-17
 3001874:	4bd8                	lw	a4,20(a5)
}
 3001876:	4501                	li	a0,0
    aptHandle->baseAddress->TC_PHS.BIT.rg_cnt_dir = slaveSyncIn->syncCntMode;
 3001878:	cac7471b          	andshf	a4,a4,a2,ror,5
 300187c:	3ed7271b          	orshf	a4,a4,a3,sll,31
 3001880:	cbd8                	sw	a4,20(a5)
    aptHandle->baseAddress->TC_PHS.BIT.rg_div_phs = slaveSyncIn->divPhase;
 3001882:	2196                	lhu	a3,0(a1)
 3001884:	4bd8                	lw	a4,20(a5)
 3001886:	6605                	lui	a2,0x1
 3001888:	167d                	addi	a2,a2,-1
 300188a:	8ef1                	and	a3,a3,a2
 300188c:	f000 ffff 061f      	l.li	a2,0xf000ffff
 3001892:	8f71                	and	a4,a4,a2
 3001894:	20d7271b          	orshf	a4,a4,a3,sll,16
 3001898:	cbd8                	sw	a4,20(a5)
    TC_PHS_REG tmp = aptHandle->baseAddress->TC_PHS;
 300189a:	4bd4                	lw	a3,20(a5)
    aptHandle->baseAddress->TC_PHS = tmp;
 300189c:	21b2                	lhu	a2,2(a1)
 300189e:	7741                	lui	a4,0xffff0
 30018a0:	8f75                	and	a4,a4,a3
 30018a2:	8f51                	or	a4,a4,a2
 30018a4:	cbd8                	sw	a4,20(a5)
    aptHandle->baseAddress->SYNI_CFG.BIT.rg_syni_sel = slaveSyncIn->syncInSrc;
 30018a6:	4598                	lw	a4,8(a1)
 30018a8:	7007a683          	lw	a3,1792(a5)
 30018ac:	8b3d                	andi	a4,a4,15
 30018ae:	9ac1                	andi	a3,a3,-16
 30018b0:	8f55                	or	a4,a4,a3
 30018b2:	70e7a023          	sw	a4,1792(a5)
    aptHandle->baseAddress->SYNCNT_CFG.reg = slaveSyncIn->cntrSyncSrc;
 30018b6:	25da                	lhu	a4,12(a1)
 30018b8:	70e7a223          	sw	a4,1796(a5)
}
 30018bc:	8082                	ret

030018be <HAL_APT_IRQService>:
  * @brief Register interrupt service processing function of APT module.
  * @param aptHandle
  * @retval None.
  */
void HAL_APT_IRQService(APT_Handle *aptHandle)
{
 30018be:	8038                	push	{ra,s0-s1},-16
 30018c0:	842a                	mv	s0,a0
    APT_ASSERT_PARAM(aptHandle != NULL);
    IRQ_Register(aptHandle->irqNumEvt, HAL_APT_IRQHandler, aptHandle);
 30018c2:	862a                	mv	a2,a0
 30018c4:	4d28                	lw	a0,88(a0)
 30018c6:	030014b7          	lui	s1,0x3001
 30018ca:	1d648593          	addi	a1,s1,470 # 30011d6 <HAL_APT_IRQHandler>
 30018ce:	287d                	jal	ra,300198c <IRQ_Register>
    IRQ_Register(aptHandle->irqNumTmr, HAL_APT_IRQHandler, aptHandle);
 30018d0:	4c68                	lw	a0,92(s0)
 30018d2:	8622                	mv	a2,s0
 30018d4:	1d648593          	addi	a1,s1,470
}
 30018d8:	8030                	pop	{ra,s0-s1},16
    IRQ_Register(aptHandle->irqNumTmr, HAL_APT_IRQHandler, aptHandle);
 30018da:	a84d                	j	300198c <IRQ_Register>

030018dc <HAL_APT_RegisterCallBack>:
  * @retval None.
  */
void HAL_APT_RegisterCallBack(APT_Handle *aptHandle, APT_CallbackFunType typeID, APT_CallbackType pCallback)
{
    APT_ASSERT_PARAM(aptHandle != NULL);
    switch (typeID) {
 30018dc:	c581                	beqz	a1,30018e4 <HAL_APT_RegisterCallBack+0x8>
 30018de:	010582bb          	beqi	a1,1,30018e8 <HAL_APT_RegisterCallBack+0xc>
 30018e2:	8082                	ret
        case APT_TIMER_INTERRUPT:
            aptHandle->tmrInterruptCallBack = pCallback;
 30018e4:	d170                	sw	a2,100(a0)
            break;
 30018e6:	8082                	ret
        case APT_EVENT_INTERRUPT:
            aptHandle->evtInterruptCallBack = pCallback;
 30018e8:	d130                	sw	a2,96(a0)
            break;
        default:
            break;
    }
}
 30018ea:	8082                	ret

030018ec <BASE_FUNC_DelayUs>:
  * @brief Delay number of us.
  * @param us The number of us to delay.
  * @retval None.
  */
void BASE_FUNC_DelayUs(unsigned int us)
{
 30018ec:	8048                	push	{ra,s0-s2},-16
 30018ee:	84aa                	mv	s1,a0
    unsigned int preTick = DCL_SYSTICK_GetTick();
 30018f0:	a20ff0ef          	jal	ra,3000b10 <DCL_SYSTICK_GetTick>
 30018f4:	892a                	mv	s2,a0
    unsigned int tickInUs = (SYSTICK_GetCRGHZ() / CRG_FREQ_1MHz) * us;
 30018f6:	000f 4240 041f      	l.li	s0,0xf4240
 30018fc:	a0aff0ef          	jal	ra,3000b06 <SYSTICK_GetCRGHZ>
 3001900:	02855433          	divu	s0,a0,s0
 3001904:	02940433          	mul	s0,s0,s1
    unsigned int curTick;
    unsigned int delta;

	/* Wait until the delta is greater than tickInUs */
    do {
        curTick = DCL_SYSTICK_GetTick();
 3001908:	a08ff0ef          	jal	ra,3000b10 <DCL_SYSTICK_GetTick>
        delta = (curTick >= preTick) ? curTick - preTick : SYSTICK_MAX_VALUE - preTick + curTick + 1;
 300190c:	41250533          	sub	a0,a0,s2
    } while (delta < tickInUs);
 3001910:	fe856ce3          	bltu	a0,s0,3001908 <BASE_FUNC_DelayUs+0x1c>
}
 3001914:	8044                	popret	{ra,s0-s2},16

03001916 <BASE_FUNC_DelayMs>:
  * @brief Delay number of ms.
  * @param ms The number of ms to delay.
  * @retval None.
  */
void BASE_FUNC_DelayMs(unsigned int ms)
{
 3001916:	8038                	push	{ra,s0-s1},-16
 3001918:	84aa                	mv	s1,a0
    for (unsigned int i = 0; i < ms; ++i) {
 300191a:	4401                	li	s0,0
 300191c:	00941363          	bne	s0,s1,3001922 <BASE_FUNC_DelayMs+0xc>
        BASE_FUNC_DelayUs(BASE_DEFINE_DELAY_US_IN_MS);
    }
}
 3001920:	8034                	popret	{ra,s0-s1},16
        BASE_FUNC_DelayUs(BASE_DEFINE_DELAY_US_IN_MS);
 3001922:	3e800513          	li	a0,1000
 3001926:	37d9                	jal	ra,30018ec <BASE_FUNC_DelayUs>
    for (unsigned int i = 0; i < ms; ++i) {
 3001928:	0405                	addi	s0,s0,1
 300192a:	bfcd                	j	300191c <BASE_FUNC_DelayMs+0x6>

0300192c <BASE_FUNC_DelaySeconds>:
  * @brief Delay number of seconds.
  * @param seconds The number of seconds to delay.
  * @retval None.
  */
void BASE_FUNC_DelaySeconds(unsigned int seconds)
{
 300192c:	8038                	push	{ra,s0-s1},-16
 300192e:	84aa                	mv	s1,a0
    for (unsigned int i = 0; i < seconds; ++i) {
 3001930:	4401                	li	s0,0
 3001932:	00941363          	bne	s0,s1,3001938 <BASE_FUNC_DelaySeconds+0xc>
        BASE_FUNC_DelayMs(BASE_DEFINE_DELAY_MS_IN_SEC);
    }
}
 3001936:	8034                	popret	{ra,s0-s1},16
        BASE_FUNC_DelayMs(BASE_DEFINE_DELAY_MS_IN_SEC);
 3001938:	3e800513          	li	a0,1000
 300193c:	3fe9                	jal	ra,3001916 <BASE_FUNC_DelayMs>
    for (unsigned int i = 0; i < seconds; ++i) {
 300193e:	0405                	addi	s0,s0,1
 3001940:	bfcd                	j	3001932 <BASE_FUNC_DelaySeconds+0x6>

03001942 <BASE_FUNC_Delay>:
  * @param units Specifies the delay unit.
  * @retval None.
  */
void BASE_FUNC_Delay(unsigned int delay, BASE_DelayUnit units)
{
    switch (units) {
 3001942:	3e800793          	li	a5,1000
 3001946:	00f58a63          	beq	a1,a5,300195a <BASE_FUNC_Delay+0x18>
 300194a:	000f 4240 079f      	l.li	a5,0xf4240
 3001950:	00f58663          	beq	a1,a5,300195c <BASE_FUNC_Delay+0x1a>
 3001954:	010592bb          	bnei	a1,1,300195e <BASE_FUNC_Delay+0x1c>
        case BASE_DEFINE_DELAY_SECS:
            BASE_FUNC_DelaySeconds(delay);
 3001958:	bfd1                	j	300192c <BASE_FUNC_DelaySeconds>
            break;
        case BASE_DEFINE_DELAY_MILLISECS:
            BASE_FUNC_DelayMs(delay);
 300195a:	bf75                	j	3001916 <BASE_FUNC_DelayMs>
            break;
        case BASE_DEFINE_DELAY_MICROSECS:
            BASE_FUNC_DelayUs(delay);
 300195c:	bf41                	j	30018ec <BASE_FUNC_DelayUs>
            break;
        default:
            break;
    }
    return;
 300195e:	8082                	ret

03001960 <IRQ_DummyHandler>:
  * @retval None.
  */
static void IRQ_DummyHandler(void *arg)
{
    BASE_FUNC_UNUSED(arg);
}
 3001960:	8082                	ret

03001962 <InterruptEntry>:
    g_irqCallbackFunc[irqNum].pfnHandler(g_irqCallbackFunc[irqNum].param);
 3001962:	adc18793          	addi	a5,gp,-1316 # 4000130 <g_irqCallbackFunc>
 3001966:	06a7851b          	addshf	a0,a5,a0,sll,3
 300196a:	411c                	lw	a5,0(a0)
 300196c:	4148                	lw	a0,4(a0)
 300196e:	8782                	jr	a5

03001970 <IRQ_Init>:
{
 3001970:	adc18713          	addi	a4,gp,-1316 # 4000130 <g_irqCallbackFunc>
    for (index = 0; index < IRQ_MAX; index++) {
 3001974:	4681                	li	a3,0
        g_irqCallbackFunc[index].pfnHandler = IRQ_DummyHandler;
 3001976:	0300 1960 079f      	l.li	a5,0x3001960
 300197c:	c31c                	sw	a5,0(a4)
        g_irqCallbackFunc[index].param = NULL;
 300197e:	00072223          	sw	zero,4(a4) # ffff0004 <RAM_END+0xfbfec004>
    for (index = 0; index < IRQ_MAX; index++) {
 3001982:	0685                	addi	a3,a3,1
 3001984:	0721                	addi	a4,a4,8
 3001986:	75f69c3b          	bnei	a3,117,3001976 <IRQ_Init+0x6>
}
 300198a:	8082                	ret

0300198c <IRQ_Register>:
    INTERRUPT_ASSERT_PARAM(func != NULL);
 300198c:	e191                	bnez	a1,3001990 <IRQ_Register+0x4>
 300198e:	a001                	j	300198e <IRQ_Register+0x2>
    INTERRUPT_PARAM_CHECK_WITH_RET(irqNum < IRQ_MAX, IRQ_ERRNO_NUM_INVALID);
 3001990:	4689                	li	a3,2
 3001992:	7505783b          	bgeui	a0,117,30019b2 <IRQ_Register+0x26>
    if (g_irqCallbackFunc[irqNum].pfnHandler != IRQ_DummyHandler) {
 3001996:	adc18793          	addi	a5,gp,-1316 # 4000130 <g_irqCallbackFunc>
 300199a:	06a7879b          	addshf	a5,a5,a0,sll,3
 300199e:	4398                	lw	a4,0(a5)
 30019a0:	0300 1960 051f      	l.li	a0,0x3001960
        return IRQ_ERRNO_ALREADY_CREATED;
 30019a6:	468d                	li	a3,3
    if (g_irqCallbackFunc[irqNum].pfnHandler != IRQ_DummyHandler) {
 30019a8:	00a71563          	bne	a4,a0,30019b2 <IRQ_Register+0x26>
  * @param arg    callback arg
  * @retval None.
  */
static inline void IRQ_SetCallBack(unsigned int irqNum, IRQ_PROC_FUNC func, void *arg)
{
    g_irqCallbackFunc[irqNum].param = arg;
 30019ac:	c3d0                	sw	a2,4(a5)
    g_irqCallbackFunc[irqNum].pfnHandler = func;
 30019ae:	c38c                	sw	a1,0(a5)
    return BASE_STATUS_OK;
 30019b0:	4681                	li	a3,0
}
 30019b2:	8536                	mv	a0,a3
 30019b4:	8082                	ret

030019b6 <IRQ_Unregister>:
    INTERRUPT_PARAM_CHECK_WITH_RET(irqNum < IRQ_MAX, IRQ_ERRNO_NUM_INVALID);
 30019b6:	7505773b          	bgeui	a0,117,30019d2 <IRQ_Unregister+0x1c>
    g_irqCallbackFunc[irqNum].pfnHandler = IRQ_DummyHandler;
 30019ba:	adc18793          	addi	a5,gp,-1316 # 4000130 <g_irqCallbackFunc>
 30019be:	06a7851b          	addshf	a0,a5,a0,sll,3
 30019c2:	0300 1960 079f      	l.li	a5,0x3001960
 30019c8:	c11c                	sw	a5,0(a0)
    g_irqCallbackFunc[irqNum].param = NULL;
 30019ca:	00052223          	sw	zero,4(a0)
    return BASE_STATUS_OK;
 30019ce:	4501                	li	a0,0
 30019d0:	8082                	ret
    INTERRUPT_PARAM_CHECK_WITH_RET(irqNum < IRQ_MAX, IRQ_ERRNO_NUM_INVALID);
 30019d2:	4509                	li	a0,2
}
 30019d4:	8082                	ret

030019d6 <IRQ_EnableN>:
    INTERRUPT_PARAM_CHECK_WITH_RET((irqNum >= IRQ_VECTOR_CNT && irqNum < IRQ_MAX), IRQ_ERRNO_NUM_INVALID);
 30019d6:	fe650793          	addi	a5,a0,-26
 30019da:	5b17f53b          	bgeui	a5,91,3001a2e <IRQ_EnableN+0x58>
 30019de:	4785                	li	a5,1
    if (irqNum < IRQ_MIE_TOTAL_CNT) {
 30019e0:	2005743b          	bgeui	a0,32,30019f0 <IRQ_EnableN+0x1a>
        irqOrder = 1U << irqNum;
 30019e4:	00a79533          	sll	a0,a5,a0
        SET_CSR(mie, irqOrder);
 30019e8:	30452573          	csrrs	a0,mie,a0
    return BASE_STATUS_OK;
 30019ec:	4501                	li	a0,0
 30019ee:	8082                	ret
    } else if (irqNum < IRQ_LOCIEN1_OFFSET) {
 30019f0:	400575bb          	bgeui	a0,64,3001a06 <IRQ_EnableN+0x30>
        locienVal = READ_CUSTOM_CSR(LOCIEN0);
 30019f4:	be002773          	csrr	a4,0xbe0
        locienVal |= (1U << irqOrder);
 30019f8:	00a79533          	sll	a0,a5,a0
 30019fc:	8d59                	or	a0,a0,a4
        WRITE_CUSTOM_CSR_VAL(LOCIEN0, locienVal);
 30019fe:	82aa                	mv	t0,a0
 3001a00:	be029073          	csrw	0xbe0,t0
 3001a04:	b7e5                	j	30019ec <IRQ_EnableN+0x16>
    } else if (irqNum < IRQ_LOCIEN2_OFFSET) {
 3001a06:	600575bb          	bgeui	a0,96,3001a1c <IRQ_EnableN+0x46>
        locienVal = READ_CUSTOM_CSR(LOCIEN1);
 3001a0a:	be102773          	csrr	a4,0xbe1
        locienVal |= (1U << irqOrder);
 3001a0e:	00a79533          	sll	a0,a5,a0
 3001a12:	8d59                	or	a0,a0,a4
        WRITE_CUSTOM_CSR_VAL(LOCIEN1, locienVal);
 3001a14:	82aa                	mv	t0,a0
 3001a16:	be129073          	csrw	0xbe1,t0
 3001a1a:	bfc9                	j	30019ec <IRQ_EnableN+0x16>
        locienVal = READ_CUSTOM_CSR(LOCIEN2);
 3001a1c:	be202773          	csrr	a4,0xbe2
        locienVal |= (1U << irqOrder);
 3001a20:	00a79533          	sll	a0,a5,a0
 3001a24:	8d59                	or	a0,a0,a4
        WRITE_CUSTOM_CSR_VAL(LOCIEN2, locienVal);
 3001a26:	82aa                	mv	t0,a0
 3001a28:	be229073          	csrw	0xbe2,t0
 3001a2c:	b7c1                	j	30019ec <IRQ_EnableN+0x16>
    INTERRUPT_PARAM_CHECK_WITH_RET((irqNum >= IRQ_VECTOR_CNT && irqNum < IRQ_MAX), IRQ_ERRNO_NUM_INVALID);
 3001a2e:	4509                	li	a0,2
}
 3001a30:	8082                	ret

03001a32 <SysErrPrint>:
}
 3001a32:	8082                	ret

03001a34 <SysErrExcEntry>:
    SysErrPrint(context);
 3001a34:	bffd                	j	3001a32 <SysErrPrint>

03001a36 <SysErrNmiEntry>:
    INTERRUPT_ASSERT_PARAM(context != NULL);
 3001a36:	e111                	bnez	a0,3001a3a <SysErrNmiEntry+0x4>
 3001a38:	a001                	j	3001a38 <SysErrNmiEntry+0x2>
    SysErrPrint(context);
 3001a3a:	bfe5                	j	3001a32 <SysErrPrint>

03001a3c <IRQ_SetPriority>:
{
 3001a3c:	8018                	push	{ra},-16
    INTERRUPT_PARAM_CHECK_WITH_RET((irqNum >= IRQ_VECTOR_CNT && irqNum < IRQ_MAX), IRQ_ERRNO_NUM_INVALID);
 3001a3e:	1519                	addi	a0,a0,-26
 3001a40:	4609                	li	a2,2
 3001a42:	5b1571bb          	bgeui	a0,91,3001a88 <IRQ_SetPriority+0x4c>
    INTERRUPT_PARAM_CHECK_WITH_RET((priority >= IRQ_PRIO_LOWEST && priority <= IRQ_PRIO_HIGHEST), \
 3001a46:	fff58793          	addi	a5,a1,-1
 3001a4a:	4615                	li	a2,5
 3001a4c:	0707ff3b          	bgeui	a5,7,3001a88 <IRQ_SetPriority+0x4c>
    unsigned int intNum = GET_LOCAL_INTER_CONFIGREG_NUM(interPriNum);
 3001a50:	00355613          	srli	a2,a0,0x3
 3001a54:	00251793          	slli	a5,a0,0x2
 3001a58:	46bd                	li	a3,15
    switch (intNum) {
 3001a5a:	08267b3b          	bgeui	a2,8,3001b06 <IRQ_SetPriority+0xca>
 3001a5e:	8532                	mv	a0,a2
 3001a60:	8736                	mv	a4,a3
 3001a62:	f2aff0ef          	jal	ra,300118c <__riscv_case_uqi>
 3001a66:	2608                	lbu	a0,8(a2)
 3001a68:	4436                	lw	s0,76(sp)
 3001a6a:	6052                	flw	ft0,20(sp)
 3001a6c:	7c6e                	flw	fs8,248(sp)
            SET_LOCAL_INTER_NUM_PRI(0, interPriNum, prior);
 3001a6e:	bc002773          	csrr	a4,0xbc0
 3001a72:	00f696b3          	sll	a3,a3,a5
 3001a76:	fff6c693          	not	a3,a3
 3001a7a:	8ef9                	and	a3,a3,a4
 3001a7c:	00f597b3          	sll	a5,a1,a5
 3001a80:	8fd5                	or	a5,a5,a3
 3001a82:	82be                	mv	t0,a5
 3001a84:	bc029073          	csrw	0xbc0,t0
}
 3001a88:	8532                	mv	a0,a2
 3001a8a:	8014                	popret	{ra},16
            SET_LOCAL_INTER_NUM_PRI(1, interPriNum, prior);
 3001a8c:	bc1026f3          	csrr	a3,0xbc1
 3001a90:	2085                	jal	ra,3001af0 <IRQ_SetPriority+0xb4>
 3001a92:	82be                	mv	t0,a5
 3001a94:	bc129073          	csrw	0xbc1,t0
    return BASE_STATUS_OK;
 3001a98:	4601                	li	a2,0
 3001a9a:	b7fd                	j	3001a88 <IRQ_SetPriority+0x4c>
            SET_LOCAL_INTER_NUM_PRI(2, interPriNum, prior);
 3001a9c:	bc2026f3          	csrr	a3,0xbc2
 3001aa0:	2881                	jal	ra,3001af0 <IRQ_SetPriority+0xb4>
 3001aa2:	82be                	mv	t0,a5
 3001aa4:	bc229073          	csrw	0xbc2,t0
 3001aa8:	bfc5                	j	3001a98 <IRQ_SetPriority+0x5c>
            SET_LOCAL_INTER_NUM_PRI(3, interPriNum, prior);
 3001aaa:	bc3026f3          	csrr	a3,0xbc3
 3001aae:	2089                	jal	ra,3001af0 <IRQ_SetPriority+0xb4>
 3001ab0:	82be                	mv	t0,a5
 3001ab2:	bc329073          	csrw	0xbc3,t0
 3001ab6:	b7cd                	j	3001a98 <IRQ_SetPriority+0x5c>
            SET_LOCAL_INTER_NUM_PRI(4, interPriNum, prior);
 3001ab8:	bc4026f3          	csrr	a3,0xbc4
 3001abc:	2815                	jal	ra,3001af0 <IRQ_SetPriority+0xb4>
 3001abe:	82be                	mv	t0,a5
 3001ac0:	bc429073          	csrw	0xbc4,t0
 3001ac4:	bfd1                	j	3001a98 <IRQ_SetPriority+0x5c>
            SET_LOCAL_INTER_NUM_PRI(5, interPriNum, prior);
 3001ac6:	bc5026f3          	csrr	a3,0xbc5
 3001aca:	201d                	jal	ra,3001af0 <IRQ_SetPriority+0xb4>
 3001acc:	82be                	mv	t0,a5
 3001ace:	bc529073          	csrw	0xbc5,t0
 3001ad2:	b7d9                	j	3001a98 <IRQ_SetPriority+0x5c>
            SET_LOCAL_INTER_NUM_PRI(6, interPriNum, prior);
 3001ad4:	bc6026f3          	csrr	a3,0xbc6
 3001ad8:	2821                	jal	ra,3001af0 <IRQ_SetPriority+0xb4>
 3001ada:	82be                	mv	t0,a5
 3001adc:	bc629073          	csrw	0xbc6,t0
 3001ae0:	bf65                	j	3001a98 <IRQ_SetPriority+0x5c>
            SET_LOCAL_INTER_NUM_PRI(7, interPriNum, prior);
 3001ae2:	bc7026f3          	csrr	a3,0xbc7
 3001ae6:	2029                	jal	ra,3001af0 <IRQ_SetPriority+0xb4>
 3001ae8:	82be                	mv	t0,a5
 3001aea:	bc729073          	csrw	0xbc7,t0
 3001aee:	b76d                	j	3001a98 <IRQ_SetPriority+0x5c>
 3001af0:	01c7f513          	andi	a0,a5,28
 3001af4:	00a71733          	sll	a4,a4,a0
 3001af8:	fff74713          	not	a4,a4
 3001afc:	8f75                	and	a4,a4,a3
 3001afe:	00a597b3          	sll	a5,a1,a0
 3001b02:	8fd9                	or	a5,a5,a4
 3001b04:	8082                	ret
 3001b06:	01c7f513          	andi	a0,a5,28
 3001b0a:	00a696b3          	sll	a3,a3,a0
 3001b0e:	fff6c713          	not	a4,a3
 3001b12:	00a597b3          	sll	a5,a1,a0
    switch (intNum) {
 3001b16:	0a060a3b          	beqi	a2,10,3001b3e <IRQ_SetPriority+0x102>
 3001b1a:	0b060cbb          	beqi	a2,11,3001b4c <IRQ_SetPriority+0x110>
 3001b1e:	090604bb          	beqi	a2,9,3001b30 <IRQ_SetPriority+0xf4>
            SET_LOCAL_INTER_NUM_PRI(8, interPriNum, prior);
 3001b22:	bc802573          	csrr	a0,0xbc8
 3001b26:	2815                	jal	ra,3001b5a <IRQ_SetPriority+0x11e>
 3001b28:	82be                	mv	t0,a5
 3001b2a:	bc829073          	csrw	0xbc8,t0
 3001b2e:	b7ad                	j	3001a98 <IRQ_SetPriority+0x5c>
            SET_LOCAL_INTER_NUM_PRI(9, interPriNum, prior);
 3001b30:	bc902573          	csrr	a0,0xbc9
 3001b34:	201d                	jal	ra,3001b5a <IRQ_SetPriority+0x11e>
 3001b36:	82be                	mv	t0,a5
 3001b38:	bc929073          	csrw	0xbc9,t0
 3001b3c:	bfb1                	j	3001a98 <IRQ_SetPriority+0x5c>
            SET_LOCAL_INTER_NUM_PRI(10, interPriNum, prior);
 3001b3e:	bca02573          	csrr	a0,0xbca
 3001b42:	2821                	jal	ra,3001b5a <IRQ_SetPriority+0x11e>
 3001b44:	82be                	mv	t0,a5
 3001b46:	bca29073          	csrw	0xbca,t0
 3001b4a:	b7b9                	j	3001a98 <IRQ_SetPriority+0x5c>
            SET_LOCAL_INTER_NUM_PRI(11, interPriNum, prior);
 3001b4c:	bcb02573          	csrr	a0,0xbcb
 3001b50:	2029                	jal	ra,3001b5a <IRQ_SetPriority+0x11e>
 3001b52:	82be                	mv	t0,a5
 3001b54:	bcb29073          	csrw	0xbcb,t0
 3001b58:	b781                	j	3001a98 <IRQ_SetPriority+0x5c>
 3001b5a:	8f69                	and	a4,a4,a0
 3001b5c:	8fd9                	or	a5,a5,a4
 3001b5e:	8082                	ret

03001b60 <DCL_SYSCTRL_CrgWriteProtectionDisable>:
  * @retval None.
  */
static inline void DCL_SYSCTRL_CrgWriteProtectionDisable(void)
{
    /* Set the corresponding bit without affecting the other bits and set the high 16 bits to EA51 to write to */
    SYSCTRL0->SC_LOCKEN.reg = (SYSCTRL0->SC_LOCKEN.reg & SC_LOCKEN_CRG_DISABLE_MASK) + SC_LOCKEN_VALID_HIGH_BIT;
 3001b60:	10100737          	lui	a4,0x10100
 3001b64:	437c                	lw	a5,68(a4)
 3001b66:	66c1                	lui	a3,0x10
 3001b68:	16f9                	addi	a3,a3,-2
 3001b6a:	8ff5                	and	a5,a5,a3
 3001b6c:	ea5106b7          	lui	a3,0xea510
 3001b70:	97b6                	add	a5,a5,a3
 3001b72:	c37c                	sw	a5,68(a4)
}
 3001b74:	8082                	ret

03001b76 <DCL_SYSCTRL_CrgWriteProtectionEnable>:
  * @retval None.
  */
static inline void DCL_SYSCTRL_CrgWriteProtectionEnable(void)
{
    /* Set the corresponding bit without affecting the other bits and set the high 16 bits to EA51 to write to */
    SYSCTRL0->SC_LOCKEN.reg = ((SYSCTRL0->SC_LOCKEN.reg & SC_LOW_BIT_MASK) | SC_LOCKEN_CRG_ENABLE_MASK) +
 3001b76:	10100737          	lui	a4,0x10100
 3001b7a:	437c                	lw	a5,68(a4)
 3001b7c:	ea5106b7          	lui	a3,0xea510
 3001b80:	9fa1                	uxth	a5
 3001b82:	0017e793          	ori	a5,a5,1
 3001b86:	97b6                	add	a5,a5,a3
 3001b88:	c37c                	sw	a5,68(a4)
                              SC_LOCKEN_VALID_HIGH_BIT;
}
 3001b8a:	8082                	ret

03001b8c <CRG_IpWithClkSelEnableSet>:
 * @param enable  BASE_CFG_SET or BASE_CFG_UNSET
 * @retval None
 */
static void CRG_IpWithClkSelEnableSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int enable)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001b8c:	e8418713          	addi	a4,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_IpWithClkSelectCfg *p = (CRG_IpWithClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001b90:	251e                	lhu	a5,8(a0)
 3001b92:	4318                	lw	a4,0(a4)
    if ((enable & IP_CLK_ENABLE) == IP_CLK_ENABLE) {
 3001b94:	8985                	andi	a1,a1,1
    CRG_IpWithClkSelectCfg *p = (CRG_IpWithClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001b96:	973e                	add	a4,a4,a5
        p->BIT.cken = BASE_CFG_SET;
 3001b98:	431c                	lw	a5,0(a4)
    if ((enable & IP_CLK_ENABLE) == IP_CLK_ENABLE) {
 3001b9a:	c991                	beqz	a1,3001bae <CRG_IpWithClkSelEnableSet+0x22>
        p->BIT.cken = BASE_CFG_SET;
 3001b9c:	0017e793          	ori	a5,a5,1
 3001ba0:	c31c                	sw	a5,0(a4)
        p->BIT.srst_req = BASE_CFG_UNSET;   /* Enable with soft reset disable */
 3001ba2:	431c                	lw	a5,0(a4)
 3001ba4:	76c1                	lui	a3,0xffff0
 3001ba6:	16fd                	addi	a3,a3,-1
 3001ba8:	8ff5                	and	a5,a5,a3
    } else {
        p->BIT.cken = BASE_CFG_UNSET;
 3001baa:	c31c                	sw	a5,0(a4)
    }
}
 3001bac:	8082                	ret
        p->BIT.cken = BASE_CFG_UNSET;
 3001bae:	9bf9                	andi	a5,a5,-2
 3001bb0:	bfed                	j	3001baa <CRG_IpWithClkSelEnableSet+0x1e>

03001bb2 <CRG_IpWithClkSelEnableGet>:
 * @param unsigned int 0: disable, 1: enable
 * @retval Clock enable status
 */
static unsigned int CRG_IpWithClkSelEnableGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001bb2:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_IpWithClkSelectCfg *p = (CRG_IpWithClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001bb6:	251a                	lhu	a4,8(a0)
 3001bb8:	439c                	lw	a5,0(a5)
 3001bba:	97ba                	add	a5,a5,a4
    return p->BIT.cken;
 3001bbc:	4388                	lw	a0,0(a5)
}
 3001bbe:	8905                	andi	a0,a0,1
 3001bc0:	8082                	ret

03001bc2 <CRG_IpWithClkSelResetSet>:
 * @param reset  BASE_CFG_SET or BASE_CFG_UNSET
 * @retval None
 */
static void CRG_IpWithClkSelResetSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int reset)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001bc2:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_IpWithClkSelectCfg *p = (CRG_IpWithClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001bc6:	439c                	lw	a5,0(a5)
 3001bc8:	251a                	lhu	a4,8(a0)
    p->BIT.srst_req = (reset & BASE_CFG_SET) ? BASE_CFG_SET : BASE_CFG_UNSET;
 3001bca:	76c1                	lui	a3,0xffff0
 3001bcc:	16fd                	addi	a3,a3,-1
    CRG_IpWithClkSelectCfg *p = (CRG_IpWithClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001bce:	973e                	add	a4,a4,a5
    p->BIT.srst_req = (reset & BASE_CFG_SET) ? BASE_CFG_SET : BASE_CFG_UNSET;
 3001bd0:	431c                	lw	a5,0(a4)
 3001bd2:	8985                	andi	a1,a1,1
 3001bd4:	8ff5                	and	a5,a5,a3
 3001bd6:	20b7a59b          	orshf	a1,a5,a1,sll,16
 3001bda:	c30c                	sw	a1,0(a4)
}
 3001bdc:	8082                	ret

03001bde <CRG_IpWithClkSelResetGet>:
 * @param unsigned int 0: disable, 1: enable
 * @retval Clock reset status
 */
static unsigned int CRG_IpWithClkSelResetGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001bde:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_IpWithClkSelectCfg *p = (CRG_IpWithClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001be2:	251a                	lhu	a4,8(a0)
 3001be4:	439c                	lw	a5,0(a5)
 3001be6:	97ba                	add	a5,a5,a4
    return p->BIT.srst_req;
 3001be8:	4388                	lw	a0,0(a5)
 3001bea:	8141                	srli	a0,a0,0x10
}
 3001bec:	8905                	andi	a0,a0,1
 3001bee:	8082                	ret

03001bf0 <CRG_IpWithClkSelClkSelSet>:
 * @param unsigned int BASE_CFG_SET or BASE_CFG_UNSET
 * @retval None
 */
static void CRG_IpWithClkSelClkSelSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int clkSelect)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001bf0:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_IpWithClkSelectCfg *p = (CRG_IpWithClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001bf4:	439c                	lw	a5,0(a5)
 3001bf6:	251a                	lhu	a4,8(a0)
    p->BIT.cksel = clkSelect;
 3001bf8:	898d                	andi	a1,a1,3
    CRG_IpWithClkSelectCfg *p = (CRG_IpWithClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001bfa:	973e                	add	a4,a4,a5
    p->BIT.cksel = clkSelect;
 3001bfc:	431c                	lw	a5,0(a4)
 3001bfe:	cff7f793          	andi	a5,a5,-769
 3001c02:	10b7a59b          	orshf	a1,a5,a1,sll,8
 3001c06:	c30c                	sw	a1,0(a4)
}
 3001c08:	8082                	ret

03001c0a <CRG_IpWithClkSelClkSelGet>:
 * @param matchInfo IP with Clock select match info
 * @retval Clock Select @see CRG_APBLsClkSelect
 */
static unsigned int CRG_IpWithClkSelClkSelGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001c0a:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_IpWithClkSelectCfg *p = (CRG_IpWithClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001c0e:	251a                	lhu	a4,8(a0)
 3001c10:	439c                	lw	a5,0(a5)
 3001c12:	97ba                	add	a5,a5,a4
    return p->BIT.cksel;
 3001c14:	4388                	lw	a0,0(a5)
 3001c16:	8121                	srli	a0,a0,0x8
}
 3001c18:	890d                	andi	a0,a0,3
 3001c1a:	8082                	ret

03001c1c <CRG_IpWoClkSelEnableSet>:
 * @param enable BASE_CFG_SET or BASE_CFG_UNSET
 * @retval None
 */
static void CRG_IpWoClkSelEnableSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int enable)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001c1c:	e8418713          	addi	a4,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_IpWoClkSelectCfg *p = (CRG_IpWoClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001c20:	251e                	lhu	a5,8(a0)
 3001c22:	4318                	lw	a4,0(a4)
{
 3001c24:	1141                	addi	sp,sp,-16
    CRG_IpWoClkSelectCfg cfg;
    cfg.value = p->value;
    if (enable & IP_CLK_ENABLE) {
 3001c26:	8985                	andi	a1,a1,1
    CRG_IpWoClkSelectCfg *p = (CRG_IpWoClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001c28:	00f70633          	add	a2,a4,a5
    cfg.value = p->value;
 3001c2c:	421c                	lw	a5,0(a2)
 3001c2e:	2538                	lbu	a4,10(a0)
 3001c30:	c63e                	sw	a5,12(sp)
 3001c32:	4785                	li	a5,1
 3001c34:	00e797b3          	sll	a5,a5,a4
 3001c38:	07c2                	slli	a5,a5,0x10
 3001c3a:	87c1                	srai	a5,a5,0x10
 3001c3c:	fff7c693          	not	a3,a5
    if (enable & IP_CLK_ENABLE) {
 3001c40:	c58d                	beqz	a1,3001c6a <CRG_IpWoClkSelEnableSet+0x4e>
        cfg.BIT.clkEnMask |= 1 << matchInfo->bitOffset;
 3001c42:	4732                	lw	a4,12(sp)
 3001c44:	75c1                	lui	a1,0xffff0
 3001c46:	8fd9                	or	a5,a5,a4
 3001c48:	4732                	lw	a4,12(sp)
 3001c4a:	9fa1                	uxth	a5
 3001c4c:	8f6d                	and	a4,a4,a1
 3001c4e:	8fd9                	or	a5,a5,a4
 3001c50:	c63e                	sw	a5,12(sp)
        cfg.BIT.softResetReq &= ~(1 << matchInfo->bitOffset);
 3001c52:	47b2                	lw	a5,12(sp)
 3001c54:	60f6c69b          	andshf	a3,a3,a5,srl,16
 3001c58:	47b2                	lw	a5,12(sp)
 3001c5a:	9fa1                	uxth	a5
 3001c5c:	20d7a69b          	orshf	a3,a5,a3,sll,16
 3001c60:	c636                	sw	a3,12(sp)
    } else {
        cfg.BIT.clkEnMask &= ~(1 << matchInfo->bitOffset);
    }
    p->value = cfg.value;
 3001c62:	47b2                	lw	a5,12(sp)
 3001c64:	c21c                	sw	a5,0(a2)
}
 3001c66:	0141                	addi	sp,sp,16
 3001c68:	8082                	ret
        cfg.BIT.clkEnMask &= ~(1 << matchInfo->bitOffset);
 3001c6a:	47b2                	lw	a5,12(sp)
 3001c6c:	4732                	lw	a4,12(sp)
 3001c6e:	9fa1                	uxth	a5
 3001c70:	8efd                	and	a3,a3,a5
 3001c72:	77c1                	lui	a5,0xffff0
 3001c74:	8ff9                	and	a5,a5,a4
 3001c76:	8fd5                	or	a5,a5,a3
 3001c78:	c63e                	sw	a5,12(sp)
 3001c7a:	b7e5                	j	3001c62 <CRG_IpWoClkSelEnableSet+0x46>

03001c7c <CRG_IpWoClkSelEnableGet>:
 * @param matchInfo IP without Clock select match info
 * @retval Clock Enable status
 */
static unsigned int CRG_IpWoClkSelEnableGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001c7c:	e8418713          	addi	a4,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_IpWoClkSelectCfg *p = (CRG_IpWoClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001c80:	251e                	lhu	a5,8(a0)
 3001c82:	4318                	lw	a4,0(a4)
{
 3001c84:	1141                	addi	sp,sp,-16
    CRG_IpWoClkSelectCfg cfg;

    cfg.value = p->value;
    return (cfg.BIT.clkEnMask & (1 << matchInfo->bitOffset)) == 0 ? false : true;
 3001c86:	2528                	lbu	a0,10(a0)
    CRG_IpWoClkSelectCfg *p = (CRG_IpWoClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001c88:	97ba                	add	a5,a5,a4
    cfg.value = p->value;
 3001c8a:	439c                	lw	a5,0(a5)
 3001c8c:	c63e                	sw	a5,12(sp)
    return (cfg.BIT.clkEnMask & (1 << matchInfo->bitOffset)) == 0 ? false : true;
 3001c8e:	47b2                	lw	a5,12(sp)
}
 3001c90:	0141                	addi	sp,sp,16
    return (cfg.BIT.clkEnMask & (1 << matchInfo->bitOffset)) == 0 ? false : true;
 3001c92:	9fa1                	uxth	a5
 3001c94:	40a7d533          	sra	a0,a5,a0
}
 3001c98:	8905                	andi	a0,a0,1
 3001c9a:	8082                	ret

03001c9c <CRG_IpWoClkSelResetSet>:
 * @param reset BASE_CFG_SET or BASE_CFG_UNSET
 * @retval None
 */
static void CRG_IpWoClkSelResetSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int reset)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001c9c:	e8418713          	addi	a4,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_IpWoClkSelectCfg *p = (CRG_IpWoClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001ca0:	251e                	lhu	a5,8(a0)
 3001ca2:	4318                	lw	a4,0(a4)
{
 3001ca4:	1141                	addi	sp,sp,-16
    CRG_IpWoClkSelectCfg cfg;
    cfg.value = p->value;
    if (reset & BASE_CFG_SET) {
 3001ca6:	8985                	andi	a1,a1,1
    CRG_IpWoClkSelectCfg *p = (CRG_IpWoClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001ca8:	00f706b3          	add	a3,a4,a5
    cfg.value = p->value;
 3001cac:	429c                	lw	a5,0(a3)
 3001cae:	2538                	lbu	a4,10(a0)
 3001cb0:	c63e                	sw	a5,12(sp)
 3001cb2:	4785                	li	a5,1
 3001cb4:	00e797b3          	sll	a5,a5,a4
        cfg.BIT.softResetReq |= 1 << matchInfo->bitOffset;
 3001cb8:	4732                	lw	a4,12(sp)
 3001cba:	07c2                	slli	a5,a5,0x10
 3001cbc:	87c1                	srai	a5,a5,0x10
    if (reset & BASE_CFG_SET) {
 3001cbe:	cd81                	beqz	a1,3001cd6 <CRG_IpWoClkSelResetSet+0x3a>
        cfg.BIT.softResetReq |= 1 << matchInfo->bitOffset;
 3001cc0:	60e7a79b          	orshf	a5,a5,a4,srl,16
    } else {
        cfg.BIT.softResetReq &= ~(1 << matchInfo->bitOffset);
 3001cc4:	4732                	lw	a4,12(sp)
 3001cc6:	9f21                	uxth	a4
 3001cc8:	20f7279b          	orshf	a5,a4,a5,sll,16
 3001ccc:	c63e                	sw	a5,12(sp)
    }
    p->value = cfg.value;
 3001cce:	47b2                	lw	a5,12(sp)
 3001cd0:	c29c                	sw	a5,0(a3)
}
 3001cd2:	0141                	addi	sp,sp,16
 3001cd4:	8082                	ret
        cfg.BIT.softResetReq &= ~(1 << matchInfo->bitOffset);
 3001cd6:	fff7c793          	not	a5,a5
 3001cda:	60e7c79b          	andshf	a5,a5,a4,srl,16
 3001cde:	b7dd                	j	3001cc4 <CRG_IpWoClkSelResetSet+0x28>

03001ce0 <CRG_IpWoClkSelResetGet>:
 * @param matchInfo IP without Clock select match info
 * @retval Clock select reset status
 */
static unsigned int CRG_IpWoClkSelResetGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001ce0:	e8418713          	addi	a4,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_IpWoClkSelectCfg *p = (CRG_IpWoClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001ce4:	251e                	lhu	a5,8(a0)
 3001ce6:	4318                	lw	a4,0(a4)
{
 3001ce8:	1141                	addi	sp,sp,-16
    CRG_IpWoClkSelectCfg cfg;
    cfg.value = p->value;
    return (cfg.BIT.softResetReq & (1 << matchInfo->bitOffset)) ? BASE_CFG_SET : BASE_CFG_UNSET;
 3001cea:	2528                	lbu	a0,10(a0)
    CRG_IpWoClkSelectCfg *p = (CRG_IpWoClkSelectCfg *)(void *)(base + matchInfo->regOffset);
 3001cec:	97ba                	add	a5,a5,a4
    cfg.value = p->value;
 3001cee:	439c                	lw	a5,0(a5)
 3001cf0:	c63e                	sw	a5,12(sp)
    return (cfg.BIT.softResetReq & (1 << matchInfo->bitOffset)) ? BASE_CFG_SET : BASE_CFG_UNSET;
 3001cf2:	47b2                	lw	a5,12(sp)
}
 3001cf4:	0141                	addi	sp,sp,16
    return (cfg.BIT.softResetReq & (1 << matchInfo->bitOffset)) ? BASE_CFG_SET : BASE_CFG_UNSET;
 3001cf6:	83c1                	srli	a5,a5,0x10
 3001cf8:	40a7d533          	sra	a0,a5,a0
}
 3001cfc:	8905                	andi	a0,a0,1
 3001cfe:	8082                	ret

03001d00 <CRG_AdcEnableSet>:
 * @param enable IP_CLK_ENABLE
 * @retval None
 */
static void CRG_AdcEnableSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int enable)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001d00:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001d04:	439c                	lw	a5,0(a5)
 3001d06:	251a                	lhu	a4,8(a0)
{
 3001d08:	1141                	addi	sp,sp,-16
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001d0a:	973e                	add	a4,a4,a5
    CRG_AdcIpCfg cfg;
    cfg.value = p->value;
 3001d0c:	431c                	lw	a5,0(a4)
 3001d0e:	c63e                	sw	a5,12(sp)
    if (enable) {
        cfg.BIT.cken = BASE_CFG_SET;
 3001d10:	47b2                	lw	a5,12(sp)
    if (enable) {
 3001d12:	c99d                	beqz	a1,3001d48 <CRG_AdcEnableSet+0x48>
        cfg.BIT.cken = BASE_CFG_SET;
 3001d14:	0017e793          	ori	a5,a5,1
 3001d18:	c63e                	sw	a5,12(sp)
        cfg.BIT.sys_cken = BASE_CFG_SET;
 3001d1a:	47b2                	lw	a5,12(sp)
        cfg.BIT.srst_req = BASE_CFG_UNSET;
 3001d1c:	76c1                	lui	a3,0xffff0
 3001d1e:	16fd                	addi	a3,a3,-1
        cfg.BIT.sys_cken = BASE_CFG_SET;
 3001d20:	0027e793          	ori	a5,a5,2
 3001d24:	c63e                	sw	a5,12(sp)
 3001d26:	47b2                	lw	a5,12(sp)
        cfg.BIT.srst_req = BASE_CFG_UNSET;
 3001d28:	8ff5                	and	a5,a5,a3
 3001d2a:	c63e                	sw	a5,12(sp)
 3001d2c:	47b2                	lw	a5,12(sp)
        cfg.BIT.sys_srst_req = BASE_CFG_UNSET;
 3001d2e:	7681                	lui	a3,0xfffe0
 3001d30:	16fd                	addi	a3,a3,-1
 3001d32:	8ff5                	and	a5,a5,a3
 3001d34:	c63e                	sw	a5,12(sp)
        cfg.BIT.ana_srst_req = BASE_CFG_UNSET;
 3001d36:	47b2                	lw	a5,12(sp)
 3001d38:	56bd                	li	a3,-17
 3001d3a:	e4d7c79b          	andshf	a5,a5,a3,ror,18
    } else {
        cfg.BIT.cken = BASE_CFG_UNSET;
        cfg.BIT.sys_cken = BASE_CFG_UNSET;
 3001d3e:	c63e                	sw	a5,12(sp)
    }
    p->value = cfg.value;
 3001d40:	47b2                	lw	a5,12(sp)
 3001d42:	c31c                	sw	a5,0(a4)
}
 3001d44:	0141                	addi	sp,sp,16
 3001d46:	8082                	ret
        cfg.BIT.cken = BASE_CFG_UNSET;
 3001d48:	9bf9                	andi	a5,a5,-2
 3001d4a:	c63e                	sw	a5,12(sp)
        cfg.BIT.sys_cken = BASE_CFG_UNSET;
 3001d4c:	47b2                	lw	a5,12(sp)
 3001d4e:	9bf5                	andi	a5,a5,-3
 3001d50:	b7fd                	j	3001d3e <CRG_AdcEnableSet+0x3e>

03001d52 <CRG_AdcEnableGet>:
 * @retval Cken of ADC
 */
static unsigned int CRG_AdcEnableGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    unsigned int enable;
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001d52:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001d56:	439c                	lw	a5,0(a5)
 3001d58:	251a                	lhu	a4,8(a0)
 3001d5a:	973e                	add	a4,a4,a5
    enable = ((p->BIT.cken != 0) && (p->BIT.sys_cken != 0)) ? IP_CLK_ENABLE : IP_CLK_DISABLE;
 3001d5c:	431c                	lw	a5,0(a4)
 3001d5e:	8b85                	andi	a5,a5,1
 3001d60:	c789                	beqz	a5,3001d6a <CRG_AdcEnableGet+0x18>
 3001d62:	4308                	lw	a0,0(a4)
 3001d64:	8105                	srli	a0,a0,0x1
 3001d66:	8905                	andi	a0,a0,1
 3001d68:	8082                	ret
 3001d6a:	4501                	li	a0,0
    return enable;
}
 3001d6c:	8082                	ret

03001d6e <CRG_AdcClkSelectSet>:
 * @param clkSelect @see CRG_AdcClkSelect
 * @retval None
 */
static void CRG_AdcClkSelectSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int clkSelect)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001d6e:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001d72:	439c                	lw	a5,0(a5)
 3001d74:	251a                	lhu	a4,8(a0)
    p->BIT.cksel = (unsigned int)clkSelect;
 3001d76:	76f5                	lui	a3,0xffffd
 3001d78:	16fd                	addi	a3,a3,-1
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001d7a:	973e                	add	a4,a4,a5
    p->BIT.cksel = (unsigned int)clkSelect;
 3001d7c:	431c                	lw	a5,0(a4)
 3001d7e:	898d                	andi	a1,a1,3
 3001d80:	8ff5                	and	a5,a5,a3
 3001d82:	18b7a59b          	orshf	a1,a5,a1,sll,12
 3001d86:	c30c                	sw	a1,0(a4)
}
 3001d88:	8082                	ret

03001d8a <CRG_AdcClkSelectGet>:
 * @param matchInfo ADC match info
 * @retval Adc Clock select @see CRG_AdcClkSelect
 */
static unsigned int CRG_AdcClkSelectGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001d8a:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001d8e:	251a                	lhu	a4,8(a0)
 3001d90:	439c                	lw	a5,0(a5)
 3001d92:	97ba                	add	a5,a5,a4
    return p->BIT.cksel;
 3001d94:	4388                	lw	a0,0(a5)
 3001d96:	8131                	srli	a0,a0,0xc
}
 3001d98:	890d                	andi	a0,a0,3
 3001d9a:	8082                	ret

03001d9c <CRG_AdcDivSet>:
 * @param div Adc clock division
 * @retval None
 */
static void CRG_AdcDivSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int div)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001d9c:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001da0:	439c                	lw	a5,0(a5)
 3001da2:	251a                	lhu	a4,8(a0)
    p->BIT.div = div;
 3001da4:	89fd                	andi	a1,a1,31
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001da6:	973e                	add	a4,a4,a5
    p->BIT.div = div;
 3001da8:	431c                	lw	a5,0(a4)
 3001daa:	e0f7f793          	andi	a5,a5,-497
 3001dae:	08b7a59b          	orshf	a1,a5,a1,sll,4
 3001db2:	c30c                	sw	a1,0(a4)
}
 3001db4:	8082                	ret

03001db6 <CRG_AdcDivGet>:
 * @param matchInfo  ADC match info
 * @retval Adc clock division
 */
static unsigned int CRG_AdcDivGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001db6:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001dba:	251a                	lhu	a4,8(a0)
 3001dbc:	439c                	lw	a5,0(a5)
 3001dbe:	97ba                	add	a5,a5,a4
    return p->BIT.div;
 3001dc0:	4388                	lw	a0,0(a5)
 3001dc2:	8111                	srli	a0,a0,0x4
}
 3001dc4:	897d                	andi	a0,a0,31
 3001dc6:	8082                	ret

03001dc8 <CRG_AdcResetSet>:
 * @param reset BASE_CFG_SET or BASE_CFG_UNSET
 * @retval None
 */
static void CRG_AdcResetSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int reset)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001dc8:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001dcc:	439c                	lw	a5,0(a5)
 3001dce:	251a                	lhu	a4,8(a0)
{
 3001dd0:	1141                	addi	sp,sp,-16
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001dd2:	973e                	add	a4,a4,a5
    CRG_AdcIpCfg cfg;

    cfg.value = p->value;
 3001dd4:	431c                	lw	a5,0(a4)
 3001dd6:	c63e                	sw	a5,12(sp)
    if (reset) {
        cfg.BIT.srst_req     = BASE_CFG_SET;
 3001dd8:	47b2                	lw	a5,12(sp)
    if (reset) {
 3001dda:	c195                	beqz	a1,3001dfe <CRG_AdcResetSet+0x36>
        cfg.BIT.srst_req     = BASE_CFG_SET;
 3001ddc:	66c1                	lui	a3,0x10
 3001dde:	8fd5                	or	a5,a5,a3
 3001de0:	c63e                	sw	a5,12(sp)
 3001de2:	47b2                	lw	a5,12(sp)
        cfg.BIT.sys_srst_req = BASE_CFG_SET;
 3001de4:	000206b7          	lui	a3,0x20
 3001de8:	8fd5                	or	a5,a5,a3
 3001dea:	c63e                	sw	a5,12(sp)
 3001dec:	47b2                	lw	a5,12(sp)
        cfg.BIT.ana_srst_req = BASE_CFG_SET;
 3001dee:	000406b7          	lui	a3,0x40
 3001df2:	8fd5                	or	a5,a5,a3
    } else {
        cfg.BIT.srst_req     = BASE_CFG_UNSET;
        cfg.BIT.sys_srst_req = BASE_CFG_UNSET;
        cfg.BIT.ana_srst_req = BASE_CFG_UNSET;
 3001df4:	c63e                	sw	a5,12(sp)
    }
    p->value = cfg.value;
 3001df6:	47b2                	lw	a5,12(sp)
 3001df8:	c31c                	sw	a5,0(a4)
}
 3001dfa:	0141                	addi	sp,sp,16
 3001dfc:	8082                	ret
        cfg.BIT.srst_req     = BASE_CFG_UNSET;
 3001dfe:	76c1                	lui	a3,0xffff0
 3001e00:	16fd                	addi	a3,a3,-1
 3001e02:	8ff5                	and	a5,a5,a3
 3001e04:	c63e                	sw	a5,12(sp)
        cfg.BIT.sys_srst_req = BASE_CFG_UNSET;
 3001e06:	47b2                	lw	a5,12(sp)
 3001e08:	7681                	lui	a3,0xfffe0
 3001e0a:	16fd                	addi	a3,a3,-1
 3001e0c:	8ff5                	and	a5,a5,a3
 3001e0e:	c63e                	sw	a5,12(sp)
        cfg.BIT.ana_srst_req = BASE_CFG_UNSET;
 3001e10:	47b2                	lw	a5,12(sp)
 3001e12:	56bd                	li	a3,-17
 3001e14:	e4d7c79b          	andshf	a5,a5,a3,ror,18
 3001e18:	bff1                	j	3001df4 <CRG_AdcResetSet+0x2c>

03001e1a <CRG_AdcResetGet>:
 * @retval reset BASE_CFG_SET or BASE_CFG_UNSET
 */
static unsigned int CRG_AdcResetGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    unsigned int reset;
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001e1a:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_AdcIpCfg *p = (CRG_AdcIpCfg *)(void *)(base + matchInfo->regOffset);
 3001e1e:	251a                	lhu	a4,8(a0)
 3001e20:	439c                	lw	a5,0(a5)
 3001e22:	973e                	add	a4,a4,a5
    reset  = p->BIT.srst_req;
 3001e24:	4308                	lw	a0,0(a4)
    reset |= p->BIT.sys_srst_req;
 3001e26:	431c                	lw	a5,0(a4)
 3001e28:	83c5                	srli	a5,a5,0x11
 3001e2a:	60a7a79b          	orshf	a5,a5,a0,srl,16
    reset |= p->BIT.ana_srst_req;
 3001e2e:	4308                	lw	a0,0(a4)
 3001e30:	64a7a51b          	orshf	a0,a5,a0,srl,18
    return reset;
}
 3001e34:	8905                	andi	a0,a0,1
 3001e36:	8082                	ret

03001e38 <CRG_DacEnableSet>:
 * @param enable IP_CLK_ENABLE
 * @retval None
 */
static void CRG_DacEnableSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int enable)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001e38:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001e3c:	439c                	lw	a5,0(a5)
 3001e3e:	00855803          	lhu	a6,8(a0)
 3001e42:	2538                	lbu	a4,10(a0)
{
 3001e44:	1141                	addi	sp,sp,-16
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001e46:	983e                	add	a6,a6,a5
    CRG_DacIpCfg cfg;
    cfg.value = p->value;
 3001e48:	00082783          	lw	a5,0(a6) # 1000 <__bss_size__+0x360>
 3001e4c:	c63e                	sw	a5,12(sp)
 3001e4e:	4785                	li	a5,1
 3001e50:	00e797b3          	sll	a5,a5,a4
 3001e54:	07e2                	slli	a5,a5,0x18
 3001e56:	87e1                	srai	a5,a5,0x18
 3001e58:	fff7c693          	not	a3,a5
    if (enable) {
 3001e5c:	c985                	beqz	a1,3001e8c <CRG_DacEnableSet+0x54>
        cfg.BIT.softResetReq &= ~(BASE_CFG_SET << matchInfo->bitOffset);
 3001e5e:	4732                	lw	a4,12(sp)
 3001e60:	4632                	lw	a2,12(sp)
 3001e62:	8341                	srli	a4,a4,0x10
 3001e64:	8b1d                	andi	a4,a4,7
 3001e66:	8f75                	and	a4,a4,a3
 3001e68:	568d                	li	a3,-29
 3001e6a:	e4d6461b          	andshf	a2,a2,a3,ror,18
 3001e6e:	20e6271b          	orshf	a4,a2,a4,sll,16
 3001e72:	c63a                	sw	a4,12(sp)
        cfg.BIT.clkEnMask |= BASE_CFG_SET << matchInfo->bitOffset;
 3001e74:	4732                	lw	a4,12(sp)
 3001e76:	8fd9                	or	a5,a5,a4
 3001e78:	4732                	lw	a4,12(sp)
 3001e7a:	8b9d                	andi	a5,a5,7
 3001e7c:	9b61                	andi	a4,a4,-8
 3001e7e:	8fd9                	or	a5,a5,a4
 3001e80:	c63e                	sw	a5,12(sp)
    } else {
        cfg.BIT.clkEnMask &= ~(BASE_CFG_SET << matchInfo->bitOffset);
    }
    p->value = cfg.value;
 3001e82:	47b2                	lw	a5,12(sp)
 3001e84:	00f82023          	sw	a5,0(a6)
}
 3001e88:	0141                	addi	sp,sp,16
 3001e8a:	8082                	ret
        cfg.BIT.clkEnMask &= ~(BASE_CFG_SET << matchInfo->bitOffset);
 3001e8c:	47b2                	lw	a5,12(sp)
 3001e8e:	4732                	lw	a4,12(sp)
 3001e90:	8b9d                	andi	a5,a5,7
 3001e92:	8efd                	and	a3,a3,a5
 3001e94:	9b61                	andi	a4,a4,-8
 3001e96:	8ed9                	or	a3,a3,a4
 3001e98:	c636                	sw	a3,12(sp)
 3001e9a:	b7e5                	j	3001e82 <CRG_DacEnableSet+0x4a>

03001e9c <CRG_DacEnableGet>:
 * @retval Cken and Sys_cken of ADC
 */
static unsigned int CRG_DacEnableGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    unsigned int enable;
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001e9c:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001ea0:	251a                	lhu	a4,8(a0)
 3001ea2:	439c                	lw	a5,0(a5)
    if ((p->BIT.clkEnMask & (1 << matchInfo->bitOffset)) != 0) {
 3001ea4:	2528                	lbu	a0,10(a0)
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001ea6:	97ba                	add	a5,a5,a4
    if ((p->BIT.clkEnMask & (1 << matchInfo->bitOffset)) != 0) {
 3001ea8:	439c                	lw	a5,0(a5)
 3001eaa:	8b9d                	andi	a5,a5,7
 3001eac:	40a7d533          	sra	a0,a5,a0
        enable = BASE_CFG_SET;
    } else {
        enable = BASE_CFG_UNSET;
    }
    return enable;
}
 3001eb0:	8905                	andi	a0,a0,1
 3001eb2:	8082                	ret

03001eb4 <CRG_DacDivSet>:
 * @brief Set DAC Div
 * @param matchInfo DAC Match info
 * @param div dac div parameter
 */
static void CRG_DacDivSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int div)
{
 3001eb4:	1101                	addi	sp,sp,-32
 3001eb6:	ce22                	sw	s0,28(sp)
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001eb8:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001ebc:	439c                	lw	a5,0(a5)
 3001ebe:	00855803          	lhu	a6,8(a0)
    CRG_DacIpCfg cfg;
    cfg.value = p->value;
    cfg.BIT.div &= ~(DAC_DIV_MASK << (matchInfo->bitOffset * DAC_DIV_BITLEN));
 3001ec2:	2534                	lbu	a3,10(a0)
    cfg.BIT.div |= (div & DAC_DIV_MASK) << (matchInfo->bitOffset * DAC_DIV_BITLEN);
 3001ec4:	89bd                	andi	a1,a1,15
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001ec6:	983e                	add	a6,a6,a5
    cfg.value = p->value;
 3001ec8:	00082783          	lw	a5,0(a6)
    cfg.BIT.div &= ~(DAC_DIV_MASK << (matchInfo->bitOffset * DAC_DIV_BITLEN));
 3001ecc:	068a                	slli	a3,a3,0x2
    cfg.value = p->value;
 3001ece:	c63e                	sw	a5,12(sp)
    cfg.BIT.div &= ~(DAC_DIV_MASK << (matchInfo->bitOffset * DAC_DIV_BITLEN));
 3001ed0:	4732                	lw	a4,12(sp)
 3001ed2:	6785                	lui	a5,0x1
 3001ed4:	fff78413          	addi	s0,a5,-1 # fff <__bss_size__+0x35f>
 3001ed8:	48e4471b          	andshf	a4,s0,a4,srl,4
 3001edc:	01071613          	slli	a2,a4,0x10
 3001ee0:	473d                	li	a4,15
 3001ee2:	00d71733          	sll	a4,a4,a3
 3001ee6:	47b2                	lw	a5,12(sp)
 3001ee8:	8241                	srli	a2,a2,0x10
 3001eea:	fff74713          	not	a4,a4
 3001eee:	8f71                	and	a4,a4,a2
 3001ef0:	7641                	lui	a2,0xffff0
 3001ef2:	063d                	addi	a2,a2,15
 3001ef4:	8f61                	and	a4,a4,s0
 3001ef6:	8ff1                	and	a5,a5,a2
 3001ef8:	08e7a71b          	orshf	a4,a5,a4,sll,4
 3001efc:	c63a                	sw	a4,12(sp)
    cfg.BIT.div |= (div & DAC_DIV_MASK) << (matchInfo->bitOffset * DAC_DIV_BITLEN);
 3001efe:	47b2                	lw	a5,12(sp)
 3001f00:	00d596b3          	sll	a3,a1,a3
 3001f04:	4732                	lw	a4,12(sp)
 3001f06:	48f4479b          	andshf	a5,s0,a5,srl,4
 3001f0a:	9fa1                	uxth	a5
 3001f0c:	8fd5                	or	a5,a5,a3
 3001f0e:	8fe1                	and	a5,a5,s0
 3001f10:	9fa1                	uxth	a5
 3001f12:	8f71                	and	a4,a4,a2
 3001f14:	08f7279b          	orshf	a5,a4,a5,sll,4
 3001f18:	c63e                	sw	a5,12(sp)
    p->value = cfg.value;
 3001f1a:	47b2                	lw	a5,12(sp)
 3001f1c:	00f82023          	sw	a5,0(a6)
}
 3001f20:	4472                	lw	s0,28(sp)
 3001f22:	6105                	addi	sp,sp,32
 3001f24:	8082                	ret

03001f26 <CRG_DacDivGet>:
 * @return div dac div parameter
 */
static unsigned int CRG_DacDivGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    unsigned int div;
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001f26:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001f2a:	251a                	lhu	a4,8(a0)
 3001f2c:	439c                	lw	a5,0(a5)
    div = p->BIT.div;
    div >>= (matchInfo->bitOffset * DAC_DIV_BITLEN);
 3001f2e:	2528                	lbu	a0,10(a0)
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001f30:	97ba                	add	a5,a5,a4
    div = p->BIT.div;
 3001f32:	439c                	lw	a5,0(a5)
    div >>= (matchInfo->bitOffset * DAC_DIV_BITLEN);
 3001f34:	050a                	slli	a0,a0,0x2
    div = p->BIT.div;
 3001f36:	07c2                	slli	a5,a5,0x10
 3001f38:	83d1                	srli	a5,a5,0x14
    div >>= (matchInfo->bitOffset * DAC_DIV_BITLEN);
 3001f3a:	00a7d533          	srl	a0,a5,a0
    return (div & DAC_DIV_MASK);
}
 3001f3e:	893d                	andi	a0,a0,15
 3001f40:	8082                	ret

03001f42 <CRG_DacResetSet>:
 * @param matchInfo DAC match Info
 * @param reset DAC_SOFTRESET
 */
static void CRG_DacResetSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int reset)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001f42:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001f46:	439c                	lw	a5,0(a5)
 3001f48:	2512                	lhu	a2,8(a0)
 3001f4a:	2538                	lbu	a4,10(a0)
{
 3001f4c:	1141                	addi	sp,sp,-16
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001f4e:	963e                	add	a2,a2,a5
    CRG_DacIpCfg cfg;

    cfg.value = p->value;
 3001f50:	421c                	lw	a5,0(a2)
 3001f52:	c63e                	sw	a5,12(sp)
 3001f54:	4785                	li	a5,1
 3001f56:	00e797b3          	sll	a5,a5,a4
    if (reset != 0) {
        cfg.BIT.softResetReq |= BASE_CFG_SET << matchInfo->bitOffset;
 3001f5a:	4732                	lw	a4,12(sp)
 3001f5c:	07e2                	slli	a5,a5,0x18
 3001f5e:	87e1                	srai	a5,a5,0x18
    if (reset != 0) {
 3001f60:	c185                	beqz	a1,3001f80 <CRG_DacResetSet+0x3e>
        cfg.BIT.softResetReq |= BASE_CFG_SET << matchInfo->bitOffset;
 3001f62:	60e7a79b          	orshf	a5,a5,a4,srl,16
 3001f66:	4732                	lw	a4,12(sp)
 3001f68:	8b9d                	andi	a5,a5,7
 3001f6a:	fff8 ffff 069f      	l.li	a3,0xfff8ffff
    } else {
        cfg.BIT.softResetReq &= ~(BASE_CFG_SET << matchInfo->bitOffset);
 3001f70:	8f75                	and	a4,a4,a3
 3001f72:	20f7279b          	orshf	a5,a4,a5,sll,16
 3001f76:	c63e                	sw	a5,12(sp)
    }
    p->value = cfg.value;
 3001f78:	47b2                	lw	a5,12(sp)
 3001f7a:	c21c                	sw	a5,0(a2)
}
 3001f7c:	0141                	addi	sp,sp,16
 3001f7e:	8082                	ret
        cfg.BIT.softResetReq &= ~(BASE_CFG_SET << matchInfo->bitOffset);
 3001f80:	8341                	srli	a4,a4,0x10
 3001f82:	8b1d                	andi	a4,a4,7
 3001f84:	fff7c793          	not	a5,a5
 3001f88:	8ff9                	and	a5,a5,a4
 3001f8a:	46b2                	lw	a3,12(sp)
 3001f8c:	fff8 ffff 071f      	l.li	a4,0xfff8ffff
 3001f92:	bff9                	j	3001f70 <CRG_DacResetSet+0x2e>

03001f94 <CRG_DacResetGet>:
 * @param matchInfo DAC match Info
 * @return unsigned int  DAC_SOFTRESET
 */
static unsigned int CRG_DacResetGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001f94:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001f98:	251a                	lhu	a4,8(a0)
 3001f9a:	439c                	lw	a5,0(a5)
    return ((p->BIT.softResetReq >> matchInfo->bitOffset) & BASE_CFG_SET);
 3001f9c:	2528                	lbu	a0,10(a0)
    CRG_DacIpCfg *p = (CRG_DacIpCfg *)(void *)(base + matchInfo->regOffset);
 3001f9e:	97ba                	add	a5,a5,a4
    return ((p->BIT.softResetReq >> matchInfo->bitOffset) & BASE_CFG_SET);
 3001fa0:	439c                	lw	a5,0(a5)
 3001fa2:	83c1                	srli	a5,a5,0x10
 3001fa4:	8b9d                	andi	a5,a5,7
 3001fa6:	40a7d533          	sra	a0,a5,a0
}
 3001faa:	8905                	andi	a0,a0,1
 3001fac:	8082                	ret

03001fae <CRG_EfcEnableSet>:
 * @param matchInfo EFC match Info
 * @param enable IP_CLK_ENABLE or IP_CRG_DISABLE
 */
static void CRG_EfcEnableSet(const CHIP_CrgIpMatchInfo *matchInfo, unsigned int enable)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001fae:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    PERI_CRG32_Reg *p = (PERI_CRG32_Reg *)(void *)(base + matchInfo->regOffset);
    p->eflash_cken = (enable & IP_CLK_ENABLE) ? BASE_CFG_SET : BASE_CFG_UNSET;
 3001fb2:	439c                	lw	a5,0(a5)
    PERI_CRG32_Reg *p = (PERI_CRG32_Reg *)(void *)(base + matchInfo->regOffset);
 3001fb4:	251a                	lhu	a4,8(a0)
    p->eflash_cken = (enable & IP_CLK_ENABLE) ? BASE_CFG_SET : BASE_CFG_UNSET;
 3001fb6:	8985                	andi	a1,a1,1
 3001fb8:	973e                	add	a4,a4,a5
 3001fba:	431c                	lw	a5,0(a4)
 3001fbc:	9bf9                	andi	a5,a5,-2
 3001fbe:	8ddd                	or	a1,a1,a5
 3001fc0:	c30c                	sw	a1,0(a4)
}
 3001fc2:	8082                	ret

03001fc4 <CRG_EfcEnableGet>:
 * @param matchInfo EFC match Info
 * @return unsigned int IP_CLK_ENABLE or IP_CRG_DISABLE
 */
static unsigned int CRG_EfcEnableGet(const CHIP_CrgIpMatchInfo *matchInfo)
{
    uintptr_t base = (uintptr_t)(void *)g_crgBaseAddr;
 3001fc4:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
    PERI_CRG32_Reg *p = (PERI_CRG32_Reg *)(void *)(base + matchInfo->regOffset);
 3001fc8:	251a                	lhu	a4,8(a0)
    return p->eflash_cken;
 3001fca:	439c                	lw	a5,0(a5)
 3001fcc:	97ba                	add	a5,a5,a4
 3001fce:	4388                	lw	a0,0(a5)
}
 3001fd0:	8905                	andi	a0,a0,1
 3001fd2:	8082                	ret

03001fd4 <CRG_GetVcoFreq>:
    CRG_RegStruct *crg = g_crgBaseAddr;
 3001fd4:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
 3001fd8:	4398                	lw	a4,0(a5)
    freq = CRG_GetPllRefIni(crg->PERI_CRG0.pll_ref_cksel);
 3001fda:	431c                	lw	a5,0(a4)
 3001fdc:	8b85                	andi	a5,a5,1
    return (pllRefClkSelect == (unsigned int)CRG_PLL_REF_CLK_SELECT_HOSC) ? HOSC_FREQ : XTRAIL_FREQ;
 3001fde:	cb85                	beqz	a5,300200e <CRG_GetVcoFreq+0x3a>
 3001fe0:	01c9 c380 051f      	l.li	a0,0x1c9c380
    freq /= CRG_GetPreDivValue(crg->PERI_CRG1.pll_prediv);
 3001fe6:	435c                	lw	a5,4(a4)
        return PLL_PREDIV_OUT_1;
 3001fe8:	4685                	li	a3,1
    freq /= CRG_GetPreDivValue(crg->PERI_CRG1.pll_prediv);
 3001fea:	8bbd                	andi	a5,a5,15
    if (pllPredDiv <= CRG_PLL_PREDIV_1) {
 3001fec:	0207e33b          	bltui	a5,2,3001ff8 <CRG_GetVcoFreq+0x24>
        return PLL_PREDIV_OUT_2;
 3001ff0:	86be                	mv	a3,a5
    } else if (pllPredDiv == CRG_PLL_PREDIV_2) {
 3001ff2:	020781bb          	beqi	a5,2,3001ff8 <CRG_GetVcoFreq+0x24>
        return PLL_PREDIV_OUT_4;
 3001ff6:	4691                	li	a3,4
    freq *= CRG_GetPllFbDivValue(crg->PERI_CRG2.pll_fbdiv);
 3001ff8:	471c                	lw	a5,8(a4)
    freq /= CRG_GetPreDivValue(crg->PERI_CRG1.pll_prediv);
 3001ffa:	02d55533          	divu	a0,a0,a3
    freq *= CRG_GetPllFbDivValue(crg->PERI_CRG2.pll_fbdiv);
 3001ffe:	9f81                	uxtb	a5
 3002000:	4007e5bb          	bltui	a5,64,3002016 <CRG_GetVcoFreq+0x42>
 3002004:	03f00793          	li	a5,63
}
 3002008:	02a78533          	mul	a0,a5,a0
 300200c:	8082                	ret
    return (pllRefClkSelect == (unsigned int)CRG_PLL_REF_CLK_SELECT_HOSC) ? HOSC_FREQ : XTRAIL_FREQ;
 300200e:	017d 7840 051f      	l.li	a0,0x17d7840
 3002014:	bfc9                	j	3001fe6 <CRG_GetVcoFreq+0x12>
    freq *= CRG_GetPllFbDivValue(crg->PERI_CRG2.pll_fbdiv);
 3002016:	06f7fcbb          	bgeui	a5,6,3002008 <CRG_GetVcoFreq+0x34>
 300201a:	4799                	li	a5,6
 300201c:	b7f5                	j	3002008 <CRG_GetVcoFreq+0x34>

0300201e <HAL_CRG_Init>:
{
 300201e:	8038                	push	{ra,s0-s1},-16
    CRG_RegStruct *reg = handle->baseAddress;
 3002020:	4100                	lw	s0,0(a0)
    g_crgBaseAddr = (void *)reg;
 3002022:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
{
 3002026:	84aa                	mv	s1,a0
    g_crgBaseAddr = (void *)reg;
 3002028:	c380                	sw	s0,0(a5)
    return (pllRefClkSelect == (unsigned int)CRG_PLL_REF_CLK_SELECT_HOSC) ? HOSC_FREQ : XTRAIL_FREQ;
 300202a:	415c                	lw	a5,4(a0)
 300202c:	cfc9                	beqz	a5,30020c6 <HAL_CRG_Init+0xa8>
 300202e:	01c9 c380 071f      	l.li	a4,0x1c9c380
    preDiv = CRG_GetPreDivValue(handle->pllPreDiv);
 3002034:	449c                	lw	a5,8(s1)
        return PLL_PREDIV_OUT_1;
 3002036:	4685                	li	a3,1
    if (pllPredDiv <= CRG_PLL_PREDIV_1) {
 3002038:	0207e33b          	bltui	a5,2,3002044 <HAL_CRG_Init+0x26>
        return PLL_PREDIV_OUT_4;
 300203c:	4691                	li	a3,4
    } else if (pllPredDiv == CRG_PLL_PREDIV_2) {
 300203e:	020791bb          	bnei	a5,2,3002044 <HAL_CRG_Init+0x26>
        return PLL_PREDIV_OUT_2;
 3002042:	86be                	mv	a3,a5
  */
static inline bool IsCrgValidPreDiv(unsigned int pllRefFreq, unsigned int preDiv)
{
    unsigned int freq = pllRefFreq;
    if (preDiv != 0) {
        freq /= preDiv;
 3002044:	02d75733          	divu	a4,a4,a3
    }
    return (freq >= CRG_CLK_PFD_MIN_FREQ) && (freq <= CRG_CLK_PFD_MAX_FREQ);
 3002048:	ffc2 f700 079f      	l.li	a5,0xffc2f700
    if (!IsCrgValidPreDiv(freq, preDiv)) {
 300204e:	0035 67e0 069f      	l.li	a3,0x3567e0
        return BASE_STATUS_ERROR;
 3002054:	4505                	li	a0,1
 3002056:	97ba                	add	a5,a5,a4
    if (!IsCrgValidPreDiv(freq, preDiv)) {
 3002058:	06f6e663          	bltu	a3,a5,30020c4 <HAL_CRG_Init+0xa6>
  * @retval true
  * @retval false
  */
static inline bool IsCrgValidFdDiv(unsigned int clkPfdFreq, unsigned int fdDiv)
{
    unsigned int freq = clkPfdFreq * fdDiv;
 300205c:	44dc                	lw	a5,12(s1)
 300205e:	02f707b3          	mul	a5,a4,a5
    return (freq >= CRG_CLK_VCO_MIN_FREQ) && (freq <= CRG_CLK_VCO_MAX_FREQ);
 3002062:	fa0a 1f00 071f      	l.li	a4,0xfa0a1f00
 3002068:	97ba                	add	a5,a5,a4
    if (!IsCrgValidFdDiv(freq, handle->pllFbDiv)) {
 300206a:	05f5 e100 071f      	l.li	a4,0x5f5e100
 3002070:	04f76a63          	bltu	a4,a5,30020c4 <HAL_CRG_Init+0xa6>
    DCL_SYSCTRL_CrgWriteProtectionDisable();
 3002074:	34f5                	jal	ra,3001b60 <DCL_SYSCTRL_CrgWriteProtectionDisable>
    reg->PERI_CRG0.pll_ref_cksel   = handle->pllRefClkSelect;
 3002076:	40dc                	lw	a5,4(s1)
 3002078:	4018                	lw	a4,0(s0)
 300207a:	0017f693          	andi	a3,a5,1
 300207e:	ffe77793          	andi	a5,a4,-2
 3002082:	8fd5                	or	a5,a5,a3
 3002084:	c01c                	sw	a5,0(s0)
    reg->PERI_CRG1.pll_prediv      = handle->pllPreDiv;
 3002086:	4058                	lw	a4,4(s0)
 3002088:	449c                	lw	a5,8(s1)
 300208a:	2091                	jal	ra,30020ce <HAL_CRG_Init+0xb0>
 300208c:	c05c                	sw	a5,4(s0)
    reg->PERI_CRG2.pll_fbdiv       = handle->pllFbDiv;
 300208e:	441c                	lw	a5,8(s0)
 3002090:	24d8                	lbu	a4,12(s1)
 3002092:	f007f793          	andi	a5,a5,-256
 3002096:	8fd9                	or	a5,a5,a4
 3002098:	c41c                	sw	a5,8(s0)
    reg->PERI_CRG3.pll_postdiv     = handle->pllPostDiv;
 300209a:	4458                	lw	a4,12(s0)
 300209c:	489c                	lw	a5,16(s1)
 300209e:	2805                	jal	ra,30020ce <HAL_CRG_Init+0xb0>
 30020a0:	c45c                	sw	a5,12(s0)
    reg->PERI_CRG4.pll_pd          = BASE_CFG_UNSET;
 30020a2:	481c                	lw	a5,16(s0)
    reg->PERI_CRG5.BIT.pll_dig_eb_lockdet = BASE_CFG_UNSET; /* PLL lock detection enable, 0 : enable, 1: disable */
 30020a4:	7779                	lui	a4,0xffffe
 30020a6:	177d                	addi	a4,a4,-1
    reg->PERI_CRG4.pll_pd          = BASE_CFG_UNSET;
 30020a8:	9bf9                	andi	a5,a5,-2
 30020aa:	c81c                	sw	a5,16(s0)
    reg->PERI_CRG5.BIT.pll_dig_eb_lockdet = BASE_CFG_UNSET; /* PLL lock detection enable, 0 : enable, 1: disable */
 30020ac:	485c                	lw	a5,20(s0)
 30020ae:	8ff9                	and	a5,a5,a4
 30020b0:	c85c                	sw	a5,20(s0)
    while (reg->PERI_CRG8.pll_lock != BASE_CFG_SET) {
 30020b2:	501c                	lw	a5,32(s0)
 30020b4:	8b85                	andi	a5,a5,1
 30020b6:	dff5                	beqz	a5,30020b2 <HAL_CRG_Init+0x94>
    reg->PERI_CRG7.BIT.ck_switchen = BASE_CFG_SET;
 30020b8:	4c5c                	lw	a5,28(s0)
 30020ba:	0087e793          	ori	a5,a5,8
 30020be:	cc5c                	sw	a5,28(s0)
    DCL_SYSCTRL_CrgWriteProtectionEnable();
 30020c0:	3c5d                	jal	ra,3001b76 <DCL_SYSCTRL_CrgWriteProtectionEnable>
    return BASE_STATUS_OK;
 30020c2:	4501                	li	a0,0
}
 30020c4:	8034                	popret	{ra,s0-s1},16
    return (pllRefClkSelect == (unsigned int)CRG_PLL_REF_CLK_SELECT_HOSC) ? HOSC_FREQ : XTRAIL_FREQ;
 30020c6:	017d 7840 071f      	l.li	a4,0x17d7840
 30020cc:	b7a5                	j	3002034 <HAL_CRG_Init+0x16>
    reg->PERI_CRG3.pll_postdiv     = handle->pllPostDiv;
 30020ce:	00f7f693          	andi	a3,a5,15
 30020d2:	ff077793          	andi	a5,a4,-16
 30020d6:	8fd5                	or	a5,a5,a3
 30020d8:	8082                	ret

030020da <HAL_CRG_SetCoreClockSelect>:
{
 30020da:	8038                	push	{ra,s0-s1},-16
    CRG_RegStruct *reg = handle->baseAddress;
 30020dc:	4100                	lw	s0,0(a0)
{
 30020de:	84aa                	mv	s1,a0
    DCL_SYSCTRL_CrgWriteProtectionDisable();
 30020e0:	3441                	jal	ra,3001b60 <DCL_SYSCTRL_CrgWriteProtectionDisable>
  */
static inline void DCL_CRG_SetCoreClkSel(CRG_RegStruct *clk, CRG_CoreClkSelect select)
{
    CRG_ASSERT_PARAM(IsCRGInstance(clk));
    CRG_PARAM_CHECK_NO_RET(IsCrgCoreCkSel(select));
    clk->PERI_CRG7.BIT.core_cksel = select;
 30020e2:	4c9c                	lw	a5,24(s1)
 30020e4:	4c58                	lw	a4,28(s0)
 30020e6:	0037f693          	andi	a3,a5,3
 30020ea:	ffc77793          	andi	a5,a4,-4
 30020ee:	8fd5                	or	a5,a5,a3
 30020f0:	cc5c                	sw	a5,28(s0)
    DCL_SYSCTRL_CrgWriteProtectionEnable();
 30020f2:	3451                	jal	ra,3001b76 <DCL_SYSCTRL_CrgWriteProtectionEnable>
}
 30020f4:	4501                	li	a0,0
 30020f6:	8034                	popret	{ra,s0-s1},16

030020f8 <HAL_CRG_GetPllFreq>:
{
 30020f8:	8028                	push	{ra,s0},-16
    CRG_RegStruct *crg = g_crgBaseAddr;
 30020fa:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
 30020fe:	4380                	lw	s0,0(a5)
    freq = CRG_GetVcoFreq();
 3002100:	3dd1                	jal	ra,3001fd4 <CRG_GetVcoFreq>
    freq /= CRG_GetPllPostDivValue((CRG_PllPostDiv)crg->PERI_CRG3.pll_postdiv);
 3002102:	445c                	lw	a5,12(s0)
 3002104:	8bbd                	andi	a5,a5,15
    return (1 << div);
 3002106:	0607e1bb          	bltui	a5,6,300210c <HAL_CRG_GetPllFreq+0x14>
 300210a:	4795                	li	a5,5
 300210c:	4705                	li	a4,1
 300210e:	00f717b3          	sll	a5,a4,a5
}
 3002112:	02f55533          	divu	a0,a0,a5
 3002116:	8024                	popret	{ra,s0},16

03002118 <HAL_CRG_GetCoreClkFreq>:
    CRG_RegStruct *crg = g_crgBaseAddr;
 3002118:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
 300211c:	439c                	lw	a5,0(a5)
    coreClkSelect = crg->PERI_CRG7.BIT.core_cksel;
 300211e:	4fdc                	lw	a5,28(a5)
 3002120:	8b8d                	andi	a5,a5,3
    switch (coreClkSelect) {
 3002122:	010784bb          	beqi	a5,1,3002134 <HAL_CRG_GetCoreClkFreq+0x1c>
 3002126:	cf81                	beqz	a5,300213e <HAL_CRG_GetCoreClkFreq+0x26>
 3002128:	0207853b          	beqi	a5,2,300213c <HAL_CRG_GetCoreClkFreq+0x24>
            freq = LOSC_FREQ;
 300212c:	0000 7d00 051f      	l.li	a0,0x7d00
            break;
 3002132:	8082                	ret
            freq = XTRAIL_FREQ;
 3002134:	01c9 c380 051f      	l.li	a0,0x1c9c380
 300213a:	8082                	ret
            freq = HAL_CRG_GetPllFreq();
 300213c:	bf75                	j	30020f8 <HAL_CRG_GetPllFreq>
            freq = HOSC_FREQ;
 300213e:	017d 7840 051f      	l.li	a0,0x17d7840
}
 3002144:	8082                	ret

03002146 <HAL_CRG_GetIpFreq>:
{
 3002146:	8048                	push	{ra,s0-s2},-16
 3002148:	84aa                	mv	s1,a0
    unsigned int hclk = HAL_CRG_GetCoreClkFreq();
 300214a:	37f9                	jal	ra,3002118 <HAL_CRG_GetCoreClkFreq>
 300214c:	842a                	mv	s0,a0
    CHIP_CrgIpMatchInfo *p = GetCrgIpMatchInfo(baseAddress);
 300214e:	8526                	mv	a0,s1
 3002150:	2a29                	jal	ra,300226a <GetCrgIpMatchInfo.trans.0>
 3002152:	84aa                	mv	s1,a0
    if (p == NULL) {
 3002154:	cd19                	beqz	a0,3002172 <HAL_CRG_GetIpFreq+0x2c>
    switch (p->type) {
 3002156:	4148                	lw	a0,4(a0)
 3002158:	060576bb          	bgeui	a0,6,3002172 <HAL_CRG_GetIpFreq+0x2c>
 300215c:	830ff0ef          	jal	ra,300118c <__riscv_case_uqi>
 3002160:	1006                	c.slli	zero,0x21
 3002162:	5a1a                	lw	s4,164(sp)
 3002164:	1030                	addi	a2,sp,40
    clkSel = proc->clkSelGet(matchInfo);
 3002166:	8526                	mv	a0,s1
 3002168:	344d                	jal	ra,3001c0a <CRG_IpWithClkSelClkSelGet>
            freq = CRG_GetLsIpFreq(p, hclk / 0x2);  /* pclk is 1/2 of hclk */
 300216a:	8005                	srli	s0,s0,0x1
    return (baseClkRate >> clkSel);
 300216c:	00a45433          	srl	s0,s0,a0
    if (freq == 0) {
 3002170:	e811                	bnez	s0,3002184 <HAL_CRG_GetIpFreq+0x3e>
    unsigned int freq = LOSC_FREQ;
 3002172:	0000 7d00 041f      	l.li	s0,0x7d00
 3002178:	a031                	j	3002184 <HAL_CRG_GetIpFreq+0x3e>
 300217a:	2035                	jal	ra,30021a6 <HAL_CRG_GetIpFreq+0x60>
    return (pllRefClkSelect == (unsigned int)CRG_PLL_REF_CLK_SELECT_HOSC) ? HOSC_FREQ : XTRAIL_FREQ;
 300217c:	c791                	beqz	a5,3002188 <HAL_CRG_GetIpFreq+0x42>
 300217e:	01c9 c380 041f      	l.li	s0,0x1c9c380
}
 3002184:	8522                	mv	a0,s0
 3002186:	8044                	popret	{ra,s0-s2},16
    return (pllRefClkSelect == (unsigned int)CRG_PLL_REF_CLK_SELECT_HOSC) ? HOSC_FREQ : XTRAIL_FREQ;
 3002188:	017d 7840 041f      	l.li	s0,0x17d7840
 300218e:	bfdd                	j	3002184 <HAL_CRG_GetIpFreq+0x3e>
 3002190:	2819                	jal	ra,30021a6 <HAL_CRG_GetIpFreq+0x60>
 3002192:	c385                	beqz	a5,30021b2 <HAL_CRG_GetIpFreq+0x6c>
 3002194:	01c9 c380 041f      	l.li	s0,0x1c9c380
    clkDiv = proc->clkDivGet(matchInfo); /* get clock division value */
 300219a:	8526                	mv	a0,s1
 300219c:	3369                	jal	ra,3001f26 <CRG_DacDivGet>
    return baseClkRate / (clkDiv + 1); /* return frequency value */
 300219e:	0505                	addi	a0,a0,1
    return (baseClkRate * ADC_DIV_FACTOR) / (clkDiv + ADC_DIV_FACTOR);
 30021a0:	02a45433          	divu	s0,s0,a0
 30021a4:	b7f1                	j	3002170 <HAL_CRG_GetIpFreq+0x2a>
            freq = CRG_GetPllRefIni(g_crgBaseAddr->PERI_CRG0.pll_ref_cksel);
 30021a6:	e8418793          	addi	a5,gp,-380 # 40004d8 <g_crgBaseAddr>
 30021aa:	439c                	lw	a5,0(a5)
 30021ac:	439c                	lw	a5,0(a5)
 30021ae:	8b85                	andi	a5,a5,1
 30021b0:	8082                	ret
    return (pllRefClkSelect == (unsigned int)CRG_PLL_REF_CLK_SELECT_HOSC) ? HOSC_FREQ : XTRAIL_FREQ;
 30021b2:	017d 7840 041f      	l.li	s0,0x17d7840
 30021b8:	b7cd                	j	300219a <HAL_CRG_GetIpFreq+0x54>
            freq = CRG_GetAdcIpFreq(p, CRG_GetVcoFreq());
 30021ba:	3d29                	jal	ra,3001fd4 <CRG_GetVcoFreq>
    const CRG_IpProc *proc = &g_ipClkProc[matchInfo->type];
 30021bc:	0044a903          	lw	s2,4(s1)
    if (proc->clkSelGet == NULL) {
 30021c0:	0300 3df0 079f      	l.li	a5,0x3003df0
            freq = CRG_GetAdcIpFreq(p, CRG_GetVcoFreq());
 30021c6:	842a                	mv	s0,a0
    if (proc->clkSelGet == NULL) {
 30021c8:	2527995b          	muliadd	s2,a5,s2,36
 30021cc:	01c92783          	lw	a5,28(s2) # 401c <RAM_SIZE+0x181c>
 30021d0:	d3cd                	beqz	a5,3002172 <HAL_CRG_GetIpFreq+0x2c>
 30021d2:	2819                	jal	ra,30021e8 <HAL_CRG_GetIpFreq+0xa2>
    if (clkSel == CRG_ADC_CLK_SELECT_HOSC) {
 30021d4:	d955                	beqz	a0,3002188 <HAL_CRG_GetIpFreq+0x42>
    if (clkSel == CRG_ADC_CLK_SELECT_TCXO) {
 30021d6:	01e50a3b          	beqi	a0,1,300217e <HAL_CRG_GetIpFreq+0x38>
    if (proc->clkDivGet == NULL) {
 30021da:	02092783          	lw	a5,32(s2)
 30021de:	dbd1                	beqz	a5,3002172 <HAL_CRG_GetIpFreq+0x2c>
 30021e0:	2021                	jal	ra,30021e8 <HAL_CRG_GetIpFreq+0xa2>
    return (baseClkRate * ADC_DIV_FACTOR) / (clkDiv + ADC_DIV_FACTOR);
 30021e2:	0406                	slli	s0,s0,0x1
 30021e4:	0509                	addi	a0,a0,2
 30021e6:	bf6d                	j	30021a0 <HAL_CRG_GetIpFreq+0x5a>
    clkDiv = proc->clkDivGet(matchInfo);
 30021e8:	8526                	mv	a0,s1
 30021ea:	8782                	jr	a5

030021ec <HAL_CRG_IpEnableSet>:
{
 30021ec:	8028                	push	{ra,s0},-16
 30021ee:	842e                	mv	s0,a1
    CHIP_CrgIpMatchInfo *p = GetCrgIpMatchInfo(baseAddress);
 30021f0:	28ad                	jal	ra,300226a <GetCrgIpMatchInfo.trans.0>
        return BASE_STATUS_ERROR;
 30021f2:	4705                	li	a4,1
    if ((p == NULL) || (p->type >= CRG_IP_MAX_TYPE)) {
 30021f4:	cd19                	beqz	a0,3002212 <HAL_CRG_IpEnableSet+0x26>
 30021f6:	415c                	lw	a5,4(a0)
        return BASE_STATUS_ERROR;
 30021f8:	4705                	li	a4,1
    if ((p == NULL) || (p->type >= CRG_IP_MAX_TYPE)) {
 30021fa:	0707f63b          	bgeui	a5,7,3002212 <HAL_CRG_IpEnableSet+0x26>
    if (g_ipClkProc[p->type].enableSet == NULL) {
 30021fe:	0300 3df0 069f      	l.li	a3,0x3003df0
 3002204:	24f697db          	muliadd	a5,a3,a5,36
 3002208:	479c                	lw	a5,8(a5)
 300220a:	c781                	beqz	a5,3002212 <HAL_CRG_IpEnableSet+0x26>
    g_ipClkProc[p->type].enableSet(p, enable);
 300220c:	85a2                	mv	a1,s0
 300220e:	9782                	jalr	a5
    return BASE_STATUS_OK;
 3002210:	4701                	li	a4,0
}
 3002212:	853a                	mv	a0,a4
 3002214:	8024                	popret	{ra,s0},16

03002216 <HAL_CRG_IpClkSelectSet>:
{
 3002216:	8028                	push	{ra,s0},-16
 3002218:	842e                	mv	s0,a1
    CHIP_CrgIpMatchInfo *p = GetCrgIpMatchInfo(baseAddress);
 300221a:	2881                	jal	ra,300226a <GetCrgIpMatchInfo.trans.0>
        return BASE_STATUS_ERROR;
 300221c:	4705                	li	a4,1
    if ((p == NULL) || (p->type >= CRG_IP_MAX_TYPE)) {
 300221e:	cd19                	beqz	a0,300223c <HAL_CRG_IpClkSelectSet+0x26>
 3002220:	415c                	lw	a5,4(a0)
        return BASE_STATUS_ERROR;
 3002222:	4705                	li	a4,1
    if ((p == NULL) || (p->type >= CRG_IP_MAX_TYPE)) {
 3002224:	0707f63b          	bgeui	a5,7,300223c <HAL_CRG_IpClkSelectSet+0x26>
    if (g_ipClkProc[p->type].clkSelSet == NULL) {
 3002228:	0300 3df0 069f      	l.li	a3,0x3003df0
 300222e:	24f697db          	muliadd	a5,a3,a5,36
 3002232:	47dc                	lw	a5,12(a5)
 3002234:	c781                	beqz	a5,300223c <HAL_CRG_IpClkSelectSet+0x26>
    g_ipClkProc[p->type].clkSelSet(p, select);
 3002236:	85a2                	mv	a1,s0
 3002238:	9782                	jalr	a5
    return BASE_STATUS_OK;
 300223a:	4701                	li	a4,0
}
 300223c:	853a                	mv	a0,a4
 300223e:	8024                	popret	{ra,s0},16

03002240 <HAL_CRG_IpClkDivSet>:
{
 3002240:	8028                	push	{ra,s0},-16
 3002242:	842e                	mv	s0,a1
    CHIP_CrgIpMatchInfo *p = GetCrgIpMatchInfo(baseAddress);
 3002244:	201d                	jal	ra,300226a <GetCrgIpMatchInfo.trans.0>
        return BASE_STATUS_ERROR;
 3002246:	4705                	li	a4,1
    if ((p == NULL) || (p->type >= CRG_IP_MAX_TYPE)) {
 3002248:	cd19                	beqz	a0,3002266 <HAL_CRG_IpClkDivSet+0x26>
 300224a:	415c                	lw	a5,4(a0)
        return BASE_STATUS_ERROR;
 300224c:	4705                	li	a4,1
    if ((p == NULL) || (p->type >= CRG_IP_MAX_TYPE)) {
 300224e:	0707f63b          	bgeui	a5,7,3002266 <HAL_CRG_IpClkDivSet+0x26>
    if (g_ipClkProc[p->type].clkDivSet == NULL) {
 3002252:	0300 3df0 069f      	l.li	a3,0x3003df0
 3002258:	24f697db          	muliadd	a5,a3,a5,36
 300225c:	4b9c                	lw	a5,16(a5)
 300225e:	c781                	beqz	a5,3002266 <HAL_CRG_IpClkDivSet+0x26>
    g_ipClkProc[p->type].clkDivSet(p, div);
 3002260:	85a2                	mv	a1,s0
 3002262:	9782                	jalr	a5
    return BASE_STATUS_OK;
 3002264:	4701                	li	a4,0
}
 3002266:	853a                	mv	a0,a4
 3002268:	8024                	popret	{ra,s0},16

0300226a <GetCrgIpMatchInfo.trans.0>:
 300226a:	9f7fe06f          	j	3000c60 <GetCrgIpMatchInfo>

0300226e <GPIO_RspInit>:
__weak void GPIO_RspInit(GPIO_Handle *handle)
{
    GPIO_ASSERT_PARAM(handle != NULL);
    GPIO_ASSERT_PARAM(IsGPIOInstance(handle->baseAddress));
    BASE_FUNC_UNUSED(handle);
}
 300226e:	8082                	ret

03002270 <HAL_GPIO_SetIrqType>:
    GPIO_ASSERT_PARAM(IsGPIOInstance(handle->baseAddress));
    GPIO_PARAM_CHECK_WITH_RET(IsGpioPins(pins), BASE_STATUS_ERROR);
    GPIO_PARAM_CHECK_WITH_RET(IsGpioITMode(mode), BASE_STATUS_ERROR);

    /* It must be disabled to avoid triggering interrupts during configuration. */
    DCL_GPIO_DisableIrq(handle->baseAddress, pins);
 3002270:	4118                	lw	a4,0(a0)
  */
static inline void DCL_GPIO_DisableIrq(GPIO_RegStruct *gpiox, unsigned int pins)
{
    GPIO_ASSERT_PARAM(gpiox != NULL);
    GPIO_PARAM_CHECK_NO_RET(IsGpioPins(pins));
    gpiox->GPIO_IE.reg &= ~pins;
 3002272:	fff5c793          	not	a5,a1
 3002276:	41072683          	lw	a3,1040(a4) # ffffe410 <RAM_END+0xfbffa410>
 300227a:	8efd                	and	a3,a3,a5
 300227c:	40d72823          	sw	a3,1040(a4)

    if ((mode == GPIO_INT_TYPE_HIGH_LEVEL) || (mode == GPIO_INT_TYPE_LOW_LEVEL)) {
 3002280:	ffe60693          	addi	a3,a2,-2 # fffefffe <RAM_END+0xfbfebffe>
 3002284:	0206f93b          	bgeui	a3,2,30022a8 <HAL_GPIO_SetIrqType+0x38>
    handle->baseAddress->GPIO_IBE.reg &= ~pins; /* Disable edge detection */
 3002288:	40872683          	lw	a3,1032(a4)
 300228c:	8efd                	and	a3,a3,a5
 300228e:	40d72423          	sw	a3,1032(a4)
 3002292:	0940036f          	jal	t1,3002326 <HAL_GPIO_SetIrqType+0xb6>
    handle->baseAddress->GPIO_IS.reg |= pins; /* Enable level detection */
 3002296:	8ecd                	or	a3,a3,a1
 3002298:	40d72223          	sw	a3,1028(a4)
    if (mode == GPIO_INT_TYPE_HIGH_LEVEL) {
 300229c:	031610bb          	bnei	a2,3,30022de <HAL_GPIO_SetIrqType+0x6e>
        handle->baseAddress->GPIO_IEV.reg |= pins;
 30022a0:	40c72783          	lw	a5,1036(a4)
 30022a4:	8fcd                	or	a5,a5,a1
 30022a6:	a83d                	j	30022e4 <HAL_GPIO_SetIrqType+0x74>
        GPIO_SetLevelIrqType(handle, pins, mode);
    } else if (mode == GPIO_INT_TYPE_BOTH_EDGE) {
 30022a8:	040616bb          	bnei	a2,4,30022c2 <HAL_GPIO_SetIrqType+0x52>
 30022ac:	0700036f          	jal	t1,300231c <HAL_GPIO_SetIrqType+0xac>
        handle->baseAddress->GPIO_IEV.reg &= ~pins;
        handle->baseAddress->GPIO_IS.reg &= ~pins;
 30022b0:	8ff5                	and	a5,a5,a3
 30022b2:	40f72223          	sw	a5,1028(a4)
        handle->baseAddress->GPIO_IBE.reg |= pins;
 30022b6:	40872783          	lw	a5,1032(a4)
 30022ba:	8fcd                	or	a5,a5,a1
 30022bc:	40f72423          	sw	a5,1032(a4)
 30022c0:	a025                	j	30022e8 <HAL_GPIO_SetIrqType+0x78>
    } else if ((mode == GPIO_INT_TYPE_RISE_EDGE) || (mode == GPIO_INT_TYPE_FALL_EDGE)) {
 30022c2:	02067fbb          	bgeui	a2,2,3002300 <HAL_GPIO_SetIrqType+0x90>
 30022c6:	0600036f          	jal	t1,3002326 <HAL_GPIO_SetIrqType+0xb6>
    handle->baseAddress->GPIO_IS.reg &= ~pins; /* Disable level detection. */
 30022ca:	8efd                	and	a3,a3,a5
 30022cc:	40d72223          	sw	a3,1028(a4)
    handle->baseAddress->GPIO_IBE.reg &= ~pins; /* Clear detection on both edges. */
 30022d0:	40872683          	lw	a3,1032(a4)
 30022d4:	8efd                	and	a3,a3,a5
 30022d6:	40d72423          	sw	a3,1032(a4)
    if (mode == GPIO_INT_TYPE_RISE_EDGE) {
 30022da:	01f601bb          	beqi	a2,1,30022a0 <HAL_GPIO_SetIrqType+0x30>
        handle->baseAddress->GPIO_IEV.reg &= ~pins;
 30022de:	40c72683          	lw	a3,1036(a4)
 30022e2:	8ff5                	and	a5,a5,a3
 30022e4:	40f72623          	sw	a5,1036(a4)
    gpiox->GPIO_IC.reg |= pins;
 30022e8:	41c72783          	lw	a5,1052(a4)
        handle->baseAddress->GPIO_IBE.reg &= ~pins;
        return BASE_STATUS_ERROR;
    }

    DCL_GPIO_EnableIrq(handle->baseAddress, pins);
    return BASE_STATUS_OK;
 30022ec:	4501                	li	a0,0
 30022ee:	8fcd                	or	a5,a5,a1
 30022f0:	40f72e23          	sw	a5,1052(a4)
    gpiox->GPIO_IE.reg |= pins;
 30022f4:	41072783          	lw	a5,1040(a4)
 30022f8:	8ddd                	or	a1,a1,a5
 30022fa:	40b72823          	sw	a1,1040(a4)
}
 30022fe:	8082                	ret
    } else if (mode == GPIO_INT_TYPE_NONE) {
 3002300:	05f61a3b          	bnei	a2,5,30022e8 <HAL_GPIO_SetIrqType+0x78>
 3002304:	0180036f          	jal	t1,300231c <HAL_GPIO_SetIrqType+0xac>
        handle->baseAddress->GPIO_IS.reg &= ~pins;
 3002308:	8efd                	and	a3,a3,a5
 300230a:	40d72223          	sw	a3,1028(a4)
        handle->baseAddress->GPIO_IBE.reg &= ~pins;
 300230e:	40872683          	lw	a3,1032(a4)
        return BASE_STATUS_ERROR;
 3002312:	4505                	li	a0,1
        handle->baseAddress->GPIO_IBE.reg &= ~pins;
 3002314:	8ff5                	and	a5,a5,a3
 3002316:	40f72423          	sw	a5,1032(a4)
        return BASE_STATUS_ERROR;
 300231a:	8082                	ret
        handle->baseAddress->GPIO_IEV.reg &= ~pins;
 300231c:	40c72683          	lw	a3,1036(a4)
 3002320:	8efd                	and	a3,a3,a5
 3002322:	40d72623          	sw	a3,1036(a4)
        handle->baseAddress->GPIO_IS.reg &= ~pins;
 3002326:	40472683          	lw	a3,1028(a4)
 300232a:	8302                	jr	t1

0300232c <HAL_GPIO_Init>:
{
 300232c:	8028                	push	{ra,s0},-16
    DCL_GPIO_SetDirection(handle->baseAddress, handle->pins, handle->dir);
 300232e:	4518                	lw	a4,8(a0)
{
 3002330:	842a                	mv	s0,a0
    DCL_GPIO_SetDirection(handle->baseAddress, handle->pins, handle->dir);
 3002332:	4114                	lw	a3,0(a0)
 3002334:	415c                	lw	a5,4(a0)
    if (dir == GPIO_INPUT_MODE) { /* Set GPIO pin direction */
 3002336:	eb39                	bnez	a4,300238c <HAL_GPIO_Init+0x60>
        gpiox->GPIO_DIR.reg &= ~pins;
 3002338:	4006a703          	lw	a4,1024(a3) # fffe0400 <RAM_END+0xfbfdc400>
 300233c:	fff7c793          	not	a5,a5
 3002340:	8ff9                	and	a5,a5,a4
        gpiox->GPIO_DIR.reg |= pins;
 3002342:	40f6a023          	sw	a5,1024(a3)
    DCL_GPIO_SetValue(handle->baseAddress, handle->pins, handle->value);
 3002346:	4058                	lw	a4,4(s0)
    gpiox->GPIO_DATA[pins].reg = (value == GPIO_HIGH_LEVEL ? pins : BASE_CFG_UNSET); /* Set GPIO pin level */
 3002348:	4810                	lw	a2,16(s0)
 300234a:	87ba                	mv	a5,a4
 300234c:	010601bb          	beqi	a2,1,3002352 <HAL_GPIO_Init+0x26>
 3002350:	4781                	li	a5,0
 3002352:	04e6869b          	addshf	a3,a3,a4,sll,2
 3002356:	c29c                	sw	a5,0(a3)
    HAL_GPIO_SetIrqType(handle, handle->pins, handle->interruptMode);
 3002358:	4450                	lw	a2,12(s0)
 300235a:	404c                	lw	a1,4(s0)
 300235c:	8522                	mv	a0,s0
 300235e:	3f09                	jal	ra,3002270 <HAL_GPIO_SetIrqType>
        handle->GPIO_CallbackFuncs[i].pin = (1 << i);
 3002360:	4785                	li	a5,1
 3002362:	cc1c                	sw	a5,24(s0)
 3002364:	4789                	li	a5,2
 3002366:	d01c                	sw	a5,32(s0)
 3002368:	4791                	li	a5,4
 300236a:	d41c                	sw	a5,40(s0)
 300236c:	47a1                	li	a5,8
 300236e:	d81c                	sw	a5,48(s0)
 3002370:	47c1                	li	a5,16
 3002372:	dc1c                	sw	a5,56(s0)
 3002374:	02000793          	li	a5,32
 3002378:	c03c                	sw	a5,64(s0)
 300237a:	04000793          	li	a5,64
 300237e:	c43c                	sw	a5,72(s0)
 3002380:	08000793          	li	a5,128
 3002384:	c83c                	sw	a5,80(s0)
    GPIO_RspInit(handle);
 3002386:	8522                	mv	a0,s0
}
 3002388:	8020                	pop	{ra,s0},16
    GPIO_RspInit(handle);
 300238a:	b5d5                	j	300226e <GPIO_RspInit>
    } else if (dir == GPIO_OUTPUT_MODE) {
 300238c:	01e71ebb          	bnei	a4,1,3002346 <HAL_GPIO_Init+0x1a>
        gpiox->GPIO_DIR.reg |= pins;
 3002390:	4006a703          	lw	a4,1024(a3)
 3002394:	8fd9                	or	a5,a5,a4
 3002396:	b775                	j	3002342 <HAL_GPIO_Init+0x16>

03002398 <HAL_PGA_Init>:
    /* PGA parameter check: pga gain value, pga mux selection, pga vin sw check, pga switch */
    PGA_PARAM_CHECK_WITH_RET(pgaHandle->gain <= PGA_PGA_MAX_GAIN, BASE_STATUS_ERROR);
    PGA_PARAM_CHECK_WITH_RET(pgaHandle->pgaMux <= PGA_PAG_MAX_SMUX, BASE_STATUS_ERROR);
    PGA_PARAM_CHECK_WITH_RET(IsPGASwSelection(pgaHandle->pgaSwVinN), BASE_STATUS_ERROR);
    PGA_PARAM_CHECK_WITH_RET(IsPGASwSelection(pgaHandle->pgaSwVinP), BASE_STATUS_ERROR);
    if (pgaHandle->enable == true) {
 3002398:	2958                	lbu	a4,20(a0)
 300239a:	411c                	lw	a5,0(a0)
 300239c:	c325                	beqz	a4,30023fc <HAL_PGA_Init+0x64>
        pgaHandle->baseAddress->PGA_CTRL0.reg |= PGA_CTRL0_ENABLE;            /* Overall enable */
 300239e:	4398                	lw	a4,0(a5)
 30023a0:	00776713          	ori	a4,a4,7
 30023a4:	c398                	sw	a4,0(a5)
        pgaHandle->baseAddress->PGA_CTRL2.BIT.pga_gain = pgaHandle->gain;     /* PGA gain value */
 30023a6:	4794                	lw	a3,8(a5)
 30023a8:	4918                	lw	a4,16(a0)
 30023aa:	fc76f693          	andi	a3,a3,-57
 30023ae:	8b1d                	andi	a4,a4,7
 30023b0:	06e6a71b          	orshf	a4,a3,a4,sll,3
 30023b4:	c798                	sw	a4,8(a5)
        pgaHandle->baseAddress->PGA_CTRL2.BIT.pga_smux = pgaHandle->pgaMux;   /* Input channel selection. */
 30023b6:	4794                	lw	a3,8(a5)
 30023b8:	4158                	lw	a4,4(a0)
 30023ba:	00777613          	andi	a2,a4,7
 30023be:	ff86f713          	andi	a4,a3,-8
 30023c2:	8f51                	or	a4,a4,a2
 30023c4:	c798                	sw	a4,8(a5)
        pgaHandle->baseAddress->PGA_CTRL3.BIT.pga_sw_enlv_p = pgaHandle->pgaSwVinP; /* PGA Vin P input channel. */
 30023c6:	47d4                	lw	a3,12(a5)
 30023c8:	4518                	lw	a4,8(a0)
 30023ca:	f0f6f693          	andi	a3,a3,-241
 30023ce:	8b3d                	andi	a4,a4,15
 30023d0:	08e6a71b          	orshf	a4,a3,a4,sll,4
 30023d4:	c7d8                	sw	a4,12(a5)
        pgaHandle->baseAddress->PGA_CTRL3.BIT.pga_sw_enlv_n = pgaHandle->pgaSwVinN; /* PGA Vin N input channel */
 30023d6:	4558                	lw	a4,12(a0)
 30023d8:	47d4                	lw	a3,12(a5)
 30023da:	00f77613          	andi	a2,a4,15
 30023de:	ff06f713          	andi	a4,a3,-16
 30023e2:	8f51                	or	a4,a4,a2
 30023e4:	c7d8                	sw	a4,12(a5)
        pgaHandle->baseAddress->PGA_CTRL3.BIT.pga_ext_loopback = pgaHandle->extLoopbackEn;
 30023e6:	3958                	lbu	a4,21(a0)
 30023e8:	47d4                	lw	a3,12(a5)
 30023ea:	00377613          	andi	a2,a4,3
 30023ee:	cff6f713          	andi	a4,a3,-769
 30023f2:	10c7271b          	orshf	a4,a4,a2,sll,8
 30023f6:	c7d8                	sw	a4,12(a5)
    } else {
        pgaHandle->baseAddress->PGA_CTRL0.reg &= (~PGA_CTRL0_ENABLE);
    }
    return BASE_STATUS_OK;
}
 30023f8:	4501                	li	a0,0
 30023fa:	8082                	ret
        pgaHandle->baseAddress->PGA_CTRL0.reg &= (~PGA_CTRL0_ENABLE);
 30023fc:	4398                	lw	a4,0(a5)
 30023fe:	9b61                	andi	a4,a4,-8
 3002400:	c398                	sw	a4,0(a5)
 3002402:	bfdd                	j	30023f8 <HAL_PGA_Init+0x60>

03002404 <HAL_TIMER_RspInit>:
  * @retval  None
  */
__weak void HAL_TIMER_RspInit(TIMER_Handle *handle)
{
    BASE_FUNC_UNUSED(handle);
}
 3002404:	8082                	ret

03002406 <HAL_TIMER_Init>:
  * @param   handle  Timer Handle
  * @retval  BASE_STATUS_OK    Success
  * @retval  BASE_STATUS_ERROR parameter check fail
  */
BASE_StatusType HAL_TIMER_Init(TIMER_Handle *handle)
{
 3002406:	8018                	push	{ra},-16
    TIMER_PARAM_CHECK_WITH_RET(IsTimerMode(handle->mode), BASE_STATUS_ERROR);
    TIMER_PARAM_CHECK_WITH_RET(IsTimerSize(handle->size), BASE_STATUS_ERROR);
    TIMER_PARAM_CHECK_WITH_RET(IsTimerDiv(handle->prescaler), BASE_STATUS_ERROR);
    TIMER_PARAM_CHECK_WITH_RET(IsTimerInterrupt(handle->interruptEn), BASE_STATUS_ERROR);

    handle->baseAddress->timer_intclr = BASE_CFG_SET;
 3002408:	411c                	lw	a5,0(a0)
 300240a:	4705                	li	a4,1
 300240c:	c7d8                	sw	a4,12(a5)
    handle->baseAddress->timer_load = handle->load;
 300240e:	4158                	lw	a4,4(a0)
 3002410:	c398                	sw	a4,0(a5)
    handle->baseAddress->timerbgload = handle->bgLoad;
 3002412:	4d18                	lw	a4,24(a0)
 3002414:	cf98                	sw	a4,24(a5)
    handle->baseAddress->TIMERx_CONTROL.BIT.timeren = BASE_CFG_DISABLE;
 3002416:	4798                	lw	a4,8(a5)
 3002418:	f7f77713          	andi	a4,a4,-129
 300241c:	c798                	sw	a4,8(a5)
    handle->baseAddress->TIMERx_CONTROL.BIT.intenable = handle->interruptEn;
 300241e:	4794                	lw	a3,8(a5)
 3002420:	4558                	lw	a4,12(a0)
 3002422:	00177613          	andi	a2,a4,1
 3002426:	fdf6f713          	andi	a4,a3,-33
 300242a:	0ac7271b          	orshf	a4,a4,a2,sll,5
 300242e:	c798                	sw	a4,8(a5)
    handle->baseAddress->TIMERx_CONTROL.BIT.timerpre = handle->prescaler;
 3002430:	4798                	lw	a4,8(a5)
 3002432:	4914                	lw	a3,16(a0)
 3002434:	9b4d                	andi	a4,a4,-13
 3002436:	8a8d                	andi	a3,a3,3
 3002438:	04d7271b          	orshf	a4,a4,a3,sll,2
 300243c:	c798                	sw	a4,8(a5)
    handle->baseAddress->TIMERx_CONTROL.BIT.timersize = handle->size;
 300243e:	4798                	lw	a4,8(a5)
 3002440:	4954                	lw	a3,20(a0)
 3002442:	20b9                	jal	ra,3002490 <HAL_TIMER_Init+0x8a>
 3002444:	c798                	sw	a4,8(a5)
    if (handle->mode == TIMER_MODE_RUN_ONTSHOT) {
 3002446:	4518                	lw	a4,8(a0)
 3002448:	02071c3b          	bnei	a4,2,3002478 <HAL_TIMER_Init+0x72>
        handle->baseAddress->TIMERx_CONTROL.BIT.oneshot = BASE_CFG_SET;
 300244c:	4798                	lw	a4,8(a5)
 300244e:	00176713          	ori	a4,a4,1
    } else {
        handle->baseAddress->TIMERx_CONTROL.BIT.oneshot = BASE_CFG_UNSET;
        handle->baseAddress->TIMERx_CONTROL.BIT.timermode =
 3002452:	c798                	sw	a4,8(a5)
            (handle->mode == TIMER_MODE_RUN_FREE) ? BASE_CFG_UNSET : BASE_CFG_SET;
    }
    handle->baseAddress->TIMERx_CONTROLB.BIT.dmasreqen = handle->dmaAdcSingleReqEnable;
 3002454:	411c                	lw	a5,0(a0)
 3002456:	02454683          	lbu	a3,36(a0)
 300245a:	4fd8                	lw	a4,28(a5)
 300245c:	2815                	jal	ra,3002490 <HAL_TIMER_Init+0x8a>
 300245e:	cfd8                	sw	a4,28(a5)
    handle->baseAddress->TIMERx_CONTROLB.BIT.dmabreqen = handle->dmaBurstReqEnable;
 3002460:	02554703          	lbu	a4,37(a0)
 3002464:	4fd4                	lw	a3,28(a5)
 3002466:	00177613          	andi	a2,a4,1
 300246a:	ffe6f713          	andi	a4,a3,-2
 300246e:	8f51                	or	a4,a4,a2
 3002470:	cfd8                	sw	a4,28(a5)
    HAL_TIMER_RspInit(handle);
 3002472:	3f49                	jal	ra,3002404 <HAL_TIMER_RspInit>
    return BASE_STATUS_OK;
}
 3002474:	4501                	li	a0,0
 3002476:	8014                	popret	{ra},16
        handle->baseAddress->TIMERx_CONTROL.BIT.oneshot = BASE_CFG_UNSET;
 3002478:	4798                	lw	a4,8(a5)
 300247a:	9b79                	andi	a4,a4,-2
 300247c:	c798                	sw	a4,8(a5)
            (handle->mode == TIMER_MODE_RUN_FREE) ? BASE_CFG_UNSET : BASE_CFG_SET;
 300247e:	4518                	lw	a4,8(a0)
        handle->baseAddress->TIMERx_CONTROL.BIT.timermode =
 3002480:	4794                	lw	a3,8(a5)
 3002482:	00e03633          	snez	a2,a4
 3002486:	fbf6f713          	andi	a4,a3,-65
 300248a:	0cc7271b          	orshf	a4,a4,a2,sll,6
 300248e:	b7d1                	j	3002452 <HAL_TIMER_Init+0x4c>
    handle->baseAddress->TIMERx_CONTROLB.BIT.dmasreqen = handle->dmaAdcSingleReqEnable;
 3002490:	8a85                	andi	a3,a3,1
 3002492:	9b75                	andi	a4,a4,-3
 3002494:	02d7271b          	orshf	a4,a4,a3,sll,1
 3002498:	8082                	ret

0300249a <HAL_TIMER_Start>:
void HAL_TIMER_Start(TIMER_Handle *handle)
{
    TIMER_ASSERT_PARAM(handle != NULL);
    TIMER_ASSERT_PARAM(IsTIMERInstance(handle->baseAddress));

    handle->baseAddress->TIMERx_CONTROL.BIT.timeren = BASE_CFG_SET;
 300249a:	411c                	lw	a5,0(a0)
 300249c:	4798                	lw	a4,8(a5)
 300249e:	08076713          	ori	a4,a4,128
 30024a2:	c798                	sw	a4,8(a5)
}
 30024a4:	8082                	ret

030024a6 <HAL_TIMER_IrqClear>:
void HAL_TIMER_IrqClear(TIMER_Handle *handle)
{
    TIMER_ASSERT_PARAM(handle != NULL);
    TIMER_ASSERT_PARAM(IsTIMERInstance(handle->baseAddress));

    handle->baseAddress->timer_intclr = BASE_CFG_SET;
 30024a6:	411c                	lw	a5,0(a0)
 30024a8:	4705                	li	a4,1
 30024aa:	c7d8                	sw	a4,12(a5)
    IRQ_ClearN(handle->irqNum);
 30024ac:	4d5c                	lw	a5,28(a0)
    asm volatile("fence");
 30024ae:	0ff0000f          	fence
    WRITE_CUSTOM_CSR_VAL(LOCIPCLR, irqNum);
 30024b2:	82be                	mv	t0,a5
 30024b4:	bf029073          	csrw	0xbf0,t0
}
 30024b8:	8082                	ret

030024ba <HAL_TIMER_RegisterCallback>:
  * @param   handle       Timer Handle
  * @param   callBackFunc CallBack function of user. @ref TIMER_CallBackFunc
  * @retval  BASE_STATUS_OK
  */
BASE_StatusType HAL_TIMER_RegisterCallback(TIMER_Handle *handle, TIMER_CallBackFunc callBackFunc)
{
 30024ba:	8128                	push	{ra,s0},-32
 30024bc:	842a                	mv	s0,a0
    BASE_StatusType status = BASE_STATUS_OK;

    TIMER_ASSERT_PARAM(handle != NULL);
    TIMER_ASSERT_PARAM(callBackFunc != NULL);

    IRQ_Unregister(handle->irqNum);
 30024be:	4d48                	lw	a0,28(a0)
{
 30024c0:	c62e                	sw	a1,12(sp)
    IRQ_Unregister(handle->irqNum);
 30024c2:	cf4ff0ef          	jal	ra,30019b6 <IRQ_Unregister>
    handle->Callback = callBackFunc;
 30024c6:	45b2                	lw	a1,12(sp)
    IRQ_Register(handle->irqNum, handle->Callback, handle);
 30024c8:	4c48                	lw	a0,28(s0)
 30024ca:	8622                	mv	a2,s0
    handle->Callback = callBackFunc;
 30024cc:	d00c                	sw	a1,32(s0)
    IRQ_Register(handle->irqNum, handle->Callback, handle);
 30024ce:	cbeff0ef          	jal	ra,300198c <IRQ_Register>
    return status;
}
 30024d2:	4501                	li	a0,0
 30024d4:	8124                	popret	{ra,s0},32

030024d6 <HAL_UART_Init>:
  * @brief Initialize the UART hardware configuration and configure parameters based on the specified handle.
  * @param uartHandle UART handle.
  * @retval BASE status type: OK, ERROR, BUSY, TIMEOUT.
  */
BASE_StatusType HAL_UART_Init(UART_Handle *uartHandle)
{
 30024d6:	8028                	push	{ra,s0},-16
 30024d8:	842a                	mv	s0,a0
    UART_PARAM_CHECK_WITH_RET(IsUartTransmode(uartHandle->txMode), BASE_STATUS_ERROR);
    UART_PARAM_CHECK_WITH_RET(IsUartTransmode(uartHandle->rxMode), BASE_STATUS_ERROR);
    UART_PARAM_CHECK_WITH_RET(IsUartFIFOThreshold(uartHandle->fifoTxThr), BASE_STATUS_ERROR);
    UART_PARAM_CHECK_WITH_RET(IsUartFIFOThreshold(uartHandle->fifoRxThr), BASE_STATUS_ERROR);

    while (uartHandle->baseAddress->UART_FR.BIT.busy == 0x01) {
 30024da:	4108                	lw	a0,0(a0)
 30024dc:	4d1c                	lw	a5,24(a0)
 30024de:	838d                	srli	a5,a5,0x3
 30024e0:	8b85                	andi	a5,a5,1
 30024e2:	01f78ebb          	beqi	a5,1,30024dc <HAL_UART_Init+0x6>
        ;
    }
    uartHandle->baseAddress->UART_CR.BIT.uarten = BASE_CFG_DISABLE;
 30024e6:	591c                	lw	a5,48(a0)
 30024e8:	9bf9                	andi	a5,a5,-2
 30024ea:	d91c                	sw	a5,48(a0)
    uartClock = HAL_CRG_GetIpFreq((void *)uartHandle->baseAddress);
 30024ec:	39a9                	jal	ra,3002146 <HAL_CRG_GetIpFreq>
    /* The baud rate divider(BRD) based on the baud rate and clock frequency, calculation formula */
    if (uartHandle->baudRate > (uartClock / OVERSAMPLING_PARAM)) {
 30024ee:	4058                	lw	a4,4(s0)
 30024f0:	00455793          	srli	a5,a0,0x4
 30024f4:	08e7ff63          	bgeu	a5,a4,3002592 <HAL_UART_Init+0xbc>
    return clk * 8;  /* 8 is greaterMaxraund param */
 30024f8:	050e                	slli	a0,a0,0x3
    ret = (((x) + ((divisor) / 2)) / (divisor));  /* Round up the result, add 1/2 */
 30024fa:	42e5051b          	addshf	a0,a0,a4,srl,1
 30024fe:	02e55733          	divu	a4,a0,a4
        quot = DivClosest(GreaterMaxraund(uartClock), uartHandle->baudRate);
    } else {
        quot = DivClosest(SmallerMaxraund(uartClock), uartHandle->baudRate);
    }
    /* Clear the baud rate divider register */
    uartHandle->baseAddress->UART_FBRD.reg = 0;
 3002502:	401c                	lw	a5,0(s0)
    uartHandle->baseAddress->UART_IBRD.reg = 0;
    /* The fractional baud rate divider value is stored to the lower 6 bits of the FBRD */
    uartHandle->baseAddress->UART_FBRD.reg = (quot & 0x3F);
 3002504:	03f77693          	andi	a3,a4,63
    /* Right shift 6 bits is the integer baud rate divider value, is stored to IBRD */
    uartHandle->baseAddress->UART_IBRD.reg = (quot >> 6);
 3002508:	8319                	srli	a4,a4,0x6
    uartHandle->baseAddress->UART_FBRD.reg = 0;
 300250a:	0207a423          	sw	zero,40(a5)
    uartHandle->baseAddress->UART_IBRD.reg = 0;
 300250e:	0207a223          	sw	zero,36(a5)
    uartHandle->baseAddress->UART_FBRD.reg = (quot & 0x3F);
 3002512:	d794                	sw	a3,40(a5)
    uartHandle->baseAddress->UART_IBRD.reg = (quot >> 6);
 3002514:	d3d8                	sw	a4,36(a5)

    uartHandle->baseAddress->UART_LCR_H.BIT.wlen = uartHandle->dataLength;      /* Frame length setting */
 3002516:	57d4                	lw	a3,44(a5)
 3002518:	4418                	lw	a4,8(s0)
 300251a:	00377613          	andi	a2,a4,3
 300251e:	f9f6f713          	andi	a4,a3,-97
 3002522:	0ac7271b          	orshf	a4,a4,a2,sll,5
 3002526:	d7d8                	sw	a4,44(a5)
    uartHandle->baseAddress->UART_LCR_H.BIT.stp2 = uartHandle->stopBits;        /* Stop bit setting */
 3002528:	4454                	lw	a3,12(s0)
 300252a:	57d8                	lw	a4,44(a5)
 300252c:	8a85                	andi	a3,a3,1
 300252e:	9b5d                	andi	a4,a4,-9
 3002530:	06d7271b          	orshf	a4,a4,a3,sll,3
 3002534:	d7d8                	sw	a4,44(a5)
    if (uartHandle->parity == UART_PARITY_NONE) {                               /* Parity setting */
 3002536:	4814                	lw	a3,16(s0)
 3002538:	0216983b          	bnei	a3,2,3002598 <HAL_UART_Init+0xc2>
        uartHandle->baseAddress->UART_LCR_H.BIT.pen = BASE_CFG_DISABLE;
 300253c:	57d8                	lw	a4,44(a5)
 300253e:	9b75                	andi	a4,a4,-3
    } else {
        unsigned int val = 0x0002;                          /* UART_LCR_H [1]bit enable */
        val |= (uartHandle->parity) << 2;                   /* Set uartHandle->parity into UART_LCR_H [2]bit */
        uartHandle->baseAddress->UART_LCR_H.reg |= val;
 3002540:	d7d8                	sw	a4,44(a5)
    }
    if (uartHandle->fifoMode == true) {                     /* FIFO threshold setting */
 3002542:	02c44703          	lbu	a4,44(s0)
 3002546:	c715                	beqz	a4,3002572 <HAL_UART_Init+0x9c>
        uartHandle->baseAddress->UART_LCR_H.BIT.fen = BASE_CFG_ENABLE;
 3002548:	57d8                	lw	a4,44(a5)
 300254a:	01076713          	ori	a4,a4,16
 300254e:	d7d8                	sw	a4,44(a5)
        uartHandle->baseAddress->UART_IFLS.BIT.rxiflsel = uartHandle->fifoRxThr;
 3002550:	5858                	lw	a4,52(s0)
 3002552:	5bd4                	lw	a3,52(a5)
 3002554:	00777613          	andi	a2,a4,7
 3002558:	fc76f713          	andi	a4,a3,-57
 300255c:	06c7271b          	orshf	a4,a4,a2,sll,3
 3002560:	dbd8                	sw	a4,52(a5)
        uartHandle->baseAddress->UART_IFLS.BIT.txiflsel = uartHandle->fifoTxThr;
 3002562:	5818                	lw	a4,48(s0)
 3002564:	5bd4                	lw	a3,52(a5)
 3002566:	00777613          	andi	a2,a4,7
 300256a:	ff86f713          	andi	a4,a3,-8
 300256e:	8f51                	or	a4,a4,a2
 3002570:	dbd8                	sw	a4,52(a5)
    }
    if (uartHandle->hwFlowCtr == UART_HW_FLOWCTR_ENABLE) {  /* Hardwarer flow control setting */
 3002572:	5c18                	lw	a4,56(s0)
 3002574:	0107133b          	bnei	a4,1,3002580 <HAL_UART_Init+0xaa>
        uartHandle->baseAddress->UART_CR.reg |= 0xC000;
 3002578:	5b98                	lw	a4,48(a5)
 300257a:	66b1                	lui	a3,0xc
 300257c:	8f55                	or	a4,a4,a3
 300257e:	db98                	sw	a4,48(a5)
    }
    uartHandle->baseAddress->UART_CR.reg |= 0x301;          /* Enable bit use 0x301 is to set txe/rxe/uarten */
 3002580:	5b98                	lw	a4,48(a5)
    uartHandle->txState = UART_STATE_READY;
    uartHandle->rxState = UART_STATE_READY;
    return BASE_STATUS_OK;
}
 3002582:	4501                	li	a0,0
    uartHandle->baseAddress->UART_CR.reg |= 0x301;          /* Enable bit use 0x301 is to set txe/rxe/uarten */
 3002584:	30176713          	ori	a4,a4,769
 3002588:	db98                	sw	a4,48(a5)
    uartHandle->txState = UART_STATE_READY;
 300258a:	4785                	li	a5,1
 300258c:	c43c                	sw	a5,72(s0)
    uartHandle->rxState = UART_STATE_READY;
 300258e:	c47c                	sw	a5,76(s0)
}
 3002590:	8024                	popret	{ra,s0},16
    if (divisor == 0) {
 3002592:	db25                	beqz	a4,3002502 <HAL_UART_Init+0x2c>
    return clk * 4;  /* 4 is smallerMaxraund param */
 3002594:	050a                	slli	a0,a0,0x2
 3002596:	b795                	j	30024fa <HAL_UART_Init+0x24>
        uartHandle->baseAddress->UART_LCR_H.reg |= val;
 3002598:	57d8                	lw	a4,44(a5)
 300259a:	04d7271b          	orshf	a4,a4,a3,sll,2
 300259e:	00276713          	ori	a4,a4,2
 30025a2:	bf79                	j	3002540 <HAL_UART_Init+0x6a>

030025a4 <main>:
GPIO_Handle g_gpio0;
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

int main(void)
{
 30025a4:	8018                	push	{ra},-16
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */
    SystemInit();
 30025a6:	2091                	jal	ra,30025ea <SystemInit>
 30025a8:	a001                	j	30025a8 <main+0x4>

030025aa <APT8EventCallback>:
__weak void APT8EventCallback(void *aptHandle)
{
    BASE_FUNC_UNUSED(aptHandle);
    /* USER CODE BEGIN APT8_EVENT_INTERRUPT */
    /* USER CODE END APT8_EVENT_INTERRUPT */
}
 30025aa:	8082                	ret

030025ac <TIMER0CallbackFunction>:
    HAL_PGA_Init(&g_pga1);
}

__weak void TIMER0CallbackFunction(void *handle)
{
    HAL_TIMER_IrqClear((TIMER_Handle *)handle);
 30025ac:	bded                	j	30024a6 <HAL_TIMER_IrqClear>

030025ae <TIMER2CallbackFunction>:
 30025ae:	bde5                	j	30024a6 <HAL_TIMER_IrqClear>

030025b0 <TIMER1CallbackFunction>:
 30025b0:	bddd                	j	30024a6 <HAL_TIMER_IrqClear>

030025b2 <APT4TimerCallback>:
 30025b2:	8082                	ret

030025b4 <ADC2Interrupt1Callback>:
 30025b4:	8082                	ret

030025b6 <APT0EventCallback>:
 30025b6:	8082                	ret

030025b8 <APT0TimerCallback>:
 30025b8:	8082                	ret

030025ba <APT3EventCallback>:
 30025ba:	8082                	ret

030025bc <APT3TimerCallback>:
 30025bc:	8082                	ret

030025be <CRG_Config>:
{
 30025be:	8228                	push	{ra,s0},-48
    crg.baseAddress     = CRG;
 30025c0:	100007b7          	lui	a5,0x10000
 30025c4:	c23e                	sw	a5,4(sp)
    crg.pllPreDiv       = CRG_PLL_PREDIV_4;
 30025c6:	478d                	li	a5,3
 30025c8:	c63e                	sw	a5,12(sp)
    crg.pllFbDiv        = 32; /* PLL Multiplier 32 */
 30025ca:	02000793          	li	a5,32
{
 30025ce:	842a                	mv	s0,a0
    crg.pllFbDiv        = 32; /* PLL Multiplier 32 */
 30025d0:	c83e                	sw	a5,16(sp)
    if (HAL_CRG_Init(&crg) != BASE_STATUS_OK) {
 30025d2:	0048                	addi	a0,sp,4
    crg.coreClkSelect   = CRG_CORE_CLK_SELECT_PLL;
 30025d4:	4789                	li	a5,2
    crg.pllRefClkSelect = CRG_PLL_REF_CLK_SELECT_HOSC;
 30025d6:	c402                	sw	zero,8(sp)
    crg.pllPostDiv      = CRG_PLL_POSTDIV_1;
 30025d8:	ca02                	sw	zero,20(sp)
    crg.coreClkSelect   = CRG_CORE_CLK_SELECT_PLL;
 30025da:	ce3e                	sw	a5,28(sp)
    if (HAL_CRG_Init(&crg) != BASE_STATUS_OK) {
 30025dc:	3489                	jal	ra,300201e <HAL_CRG_Init>
 30025de:	e501                	bnez	a0,30025e6 <CRG_Config+0x28>
    *coreClkSelect = crg.coreClkSelect;
 30025e0:	47f2                	lw	a5,28(sp)
 30025e2:	c01c                	sw	a5,0(s0)
}
 30025e4:	8224                	popret	{ra,s0},48
        return BASE_STATUS_ERROR;
 30025e6:	4505                	li	a0,1
 30025e8:	bff5                	j	30025e4 <CRG_Config+0x26>

030025ea <SystemInit>:
    aptSlave.cntrSyncSrc = APT_CNTR_SYNC_SRC_SYNCIN;
    HAL_APT_SlaveSyncInit(&g_apt2, &aptSlave);
}

void SystemInit(void)
{
 30025ea:	84d8                	push	{ra,s0-s11},-128
    SYSCTRL0->SC_SYS_STAT.BIT.update_mode = 0;
 30025ec:	101007b7          	lui	a5,0x10100
 30025f0:	4f98                	lw	a4,24(a5)
 30025f2:	9b3d                	andi	a4,a4,-17
 30025f4:	cf98                	sw	a4,24(a5)
    SYSCTRL0->SC_SYS_STAT.BIT.update_mode_clear = 1;
 30025f6:	4f98                	lw	a4,24(a5)
 30025f8:	00176713          	ori	a4,a4,1
 30025fc:	cf98                	sw	a4,24(a5)
    iconfig->iocmg_17.BIT.func = 0x0; /* 0x0 is GPIO1_6 */
 30025fe:	149f07b7          	lui	a5,0x149f0
 3002602:	4398                	lw	a4,0(a5)
 3002604:	9b41                	andi	a4,a4,-16
 3002606:	1ba010ef          	jal	ra,30037c0 <SystemInit+0x11d6>
    iconfig->iocmg_17.BIT.ds = IO_DRV_LEVEL2;
 300260a:	1e6010ef          	jal	ra,30037f0 <SystemInit+0x1206>
 300260e:	1b2010ef          	jal	ra,30037c0 <SystemInit+0x11d6>
    iconfig->iocmg_17.BIT.pd = BASE_CFG_DISABLE;
 3002612:	1e8010ef          	jal	ra,30037fa <SystemInit+0x1210>
 3002616:	1aa010ef          	jal	ra,30037c0 <SystemInit+0x11d6>
    iconfig->iocmg_17.BIT.pu = BASE_CFG_DISABLE;
 300261a:	1e6010ef          	jal	ra,3003800 <SystemInit+0x1216>
 300261e:	1a2010ef          	jal	ra,30037c0 <SystemInit+0x11d6>
    iconfig->iocmg_17.BIT.sr = IO_SPEED_SLOW;
 3002622:	1e4010ef          	jal	ra,3003806 <SystemInit+0x121c>
 3002626:	19a010ef          	jal	ra,30037c0 <SystemInit+0x11d6>
    iconfig->iocmg_17.BIT.se = BASE_CFG_DISABLE;
 300262a:	1ec010ef          	jal	ra,3003816 <SystemInit+0x122c>
 300262e:	c398                	sw	a4,0(a5)
    iconfig->iocmg_43.BIT.func = 0x0; /* 0x0 is GPIO5_0 */
 3002630:	57b8                	lw	a4,104(a5)
 3002632:	9b41                	andi	a4,a4,-16
 3002634:	192010ef          	jal	ra,30037c6 <SystemInit+0x11dc>
    iconfig->iocmg_43.BIT.ds = IO_DRV_LEVEL2;
 3002638:	1b8010ef          	jal	ra,30037f0 <SystemInit+0x1206>
 300263c:	18a010ef          	jal	ra,30037c6 <SystemInit+0x11dc>
    iconfig->iocmg_43.BIT.pd = BASE_CFG_DISABLE;
 3002640:	1ba010ef          	jal	ra,30037fa <SystemInit+0x1210>
 3002644:	182010ef          	jal	ra,30037c6 <SystemInit+0x11dc>
    iconfig->iocmg_43.BIT.pu = BASE_CFG_DISABLE;
 3002648:	1b8010ef          	jal	ra,3003800 <SystemInit+0x1216>
 300264c:	17a010ef          	jal	ra,30037c6 <SystemInit+0x11dc>
    iconfig->iocmg_43.BIT.sr = IO_SPEED_SLOW;
 3002650:	1b6010ef          	jal	ra,3003806 <SystemInit+0x121c>
 3002654:	172010ef          	jal	ra,30037c6 <SystemInit+0x11dc>
    iconfig->iocmg_43.BIT.se = BASE_CFG_DISABLE;
 3002658:	1be010ef          	jal	ra,3003816 <SystemInit+0x122c>
 300265c:	d7b8                	sw	a4,104(a5)
    iconfig->iocmg_48.BIT.func = 0x0; /* 0x0 is GPIO5_5 */
 300265e:	5ff8                	lw	a4,124(a5)
 3002660:	9b41                	andi	a4,a4,-16
 3002662:	16a010ef          	jal	ra,30037cc <SystemInit+0x11e2>
    iconfig->iocmg_48.BIT.ds = IO_DRV_LEVEL2;
 3002666:	18a010ef          	jal	ra,30037f0 <SystemInit+0x1206>
 300266a:	162010ef          	jal	ra,30037cc <SystemInit+0x11e2>
    iconfig->iocmg_48.BIT.pd = BASE_CFG_DISABLE;
 300266e:	18c010ef          	jal	ra,30037fa <SystemInit+0x1210>
 3002672:	15a010ef          	jal	ra,30037cc <SystemInit+0x11e2>
    iconfig->iocmg_48.BIT.pu = BASE_CFG_DISABLE;
 3002676:	18a010ef          	jal	ra,3003800 <SystemInit+0x1216>
 300267a:	152010ef          	jal	ra,30037cc <SystemInit+0x11e2>
    iconfig->iocmg_48.BIT.sr = IO_SPEED_SLOW;
 300267e:	188010ef          	jal	ra,3003806 <SystemInit+0x121c>
 3002682:	14a010ef          	jal	ra,30037cc <SystemInit+0x11e2>
    iconfig->iocmg_48.BIT.se = BASE_CFG_DISABLE;
 3002686:	190010ef          	jal	ra,3003816 <SystemInit+0x122c>
 300268a:	dff8                	sw	a4,124(a5)
 300268c:	14a010ef          	jal	ra,30037d6 <SystemInit+0x11ec>
    iconfig->iocmg_49.BIT.func = 0x0; /* 0x0 is GPIO5_6 */
 3002690:	9b41                	andi	a4,a4,-16
 3002692:	140010ef          	jal	ra,30037d2 <SystemInit+0x11e8>
    iconfig->iocmg_49.BIT.ds = IO_DRV_LEVEL2;
 3002696:	15a010ef          	jal	ra,30037f0 <SystemInit+0x1206>
 300269a:	138010ef          	jal	ra,30037d2 <SystemInit+0x11e8>
 300269e:	15c010ef          	jal	ra,30037fa <SystemInit+0x1210>
    iconfig->iocmg_49.BIT.pd = BASE_CFG_DISABLE;
 30026a2:	130010ef          	jal	ra,30037d2 <SystemInit+0x11e8>
 30026a6:	15a010ef          	jal	ra,3003800 <SystemInit+0x1216>
    iconfig->iocmg_49.BIT.pu = BASE_CFG_DISABLE;
 30026aa:	128010ef          	jal	ra,30037d2 <SystemInit+0x11e8>
 30026ae:	158010ef          	jal	ra,3003806 <SystemInit+0x121c>
    iconfig->iocmg_49.BIT.sr = IO_SPEED_SLOW;
 30026b2:	120010ef          	jal	ra,30037d2 <SystemInit+0x11e8>
 30026b6:	160010ef          	jal	ra,3003816 <SystemInit+0x122c>
    iconfig->iocmg_49.BIT.se = BASE_CFG_DISABLE;
 30026ba:	08e7a023          	sw	a4,128(a5) # 149f0080 <RAM_END+0x109ec080>
 30026be:	122010ef          	jal	ra,30037e0 <SystemInit+0x11f6>
    iconfig->iocmg_50.BIT.func = 0x0; /* 0x0 is GPIO5_7 */
 30026c2:	9b41                	andi	a4,a4,-16
 30026c4:	118010ef          	jal	ra,30037dc <SystemInit+0x11f2>
    iconfig->iocmg_50.BIT.ds = IO_DRV_LEVEL2;
 30026c8:	128010ef          	jal	ra,30037f0 <SystemInit+0x1206>
 30026cc:	110010ef          	jal	ra,30037dc <SystemInit+0x11f2>
 30026d0:	12a010ef          	jal	ra,30037fa <SystemInit+0x1210>
    iconfig->iocmg_50.BIT.pd = BASE_CFG_DISABLE;
 30026d4:	108010ef          	jal	ra,30037dc <SystemInit+0x11f2>
 30026d8:	128010ef          	jal	ra,3003800 <SystemInit+0x1216>
    iconfig->iocmg_50.BIT.pu = BASE_CFG_DISABLE;
 30026dc:	100010ef          	jal	ra,30037dc <SystemInit+0x11f2>
 30026e0:	126010ef          	jal	ra,3003806 <SystemInit+0x121c>
    iconfig->iocmg_50.BIT.sr = IO_SPEED_SLOW;
 30026e4:	0f8010ef          	jal	ra,30037dc <SystemInit+0x11f2>
 30026e8:	12e010ef          	jal	ra,3003816 <SystemInit+0x122c>
    iconfig->iocmg_50.BIT.se = BASE_CFG_DISABLE;
 30026ec:	08e7a223          	sw	a4,132(a5)
 30026f0:	0fa010ef          	jal	ra,30037ea <SystemInit+0x1200>
    iconfig->iocmg_53.BIT.func = 0x0; /* 0x0 is GPIO6_2 */
 30026f4:	9b41                	andi	a4,a4,-16
 30026f6:	0f0010ef          	jal	ra,30037e6 <SystemInit+0x11fc>
    iconfig->iocmg_53.BIT.ds = IO_DRV_LEVEL2;
 30026fa:	0f6010ef          	jal	ra,30037f0 <SystemInit+0x1206>
 30026fe:	0e8010ef          	jal	ra,30037e6 <SystemInit+0x11fc>
 3002702:	0f8010ef          	jal	ra,30037fa <SystemInit+0x1210>
    iconfig->iocmg_53.BIT.pd = BASE_CFG_DISABLE;
 3002706:	0e0010ef          	jal	ra,30037e6 <SystemInit+0x11fc>
 300270a:	0f6010ef          	jal	ra,3003800 <SystemInit+0x1216>
    iconfig->iocmg_53.BIT.pu = BASE_CFG_DISABLE;
 300270e:	0d8010ef          	jal	ra,30037e6 <SystemInit+0x11fc>
 3002712:	0f4010ef          	jal	ra,3003806 <SystemInit+0x121c>
    iconfig->iocmg_53.BIT.sr = IO_SPEED_SLOW;
 3002716:	0d0010ef          	jal	ra,30037e6 <SystemInit+0x11fc>
 300271a:	0fc010ef          	jal	ra,3003816 <SystemInit+0x122c>
    iconfig->iocmg_53.BIT.se = BASE_CFG_DISABLE;
 300271e:	08e7a823          	sw	a4,144(a5)
 3002722:	0ee010ef          	jal	ra,3003810 <SystemInit+0x1226>
    iconfig->iocmg_55.BIT.func = 0x0; /* 0x0 is GPIO6_4 */
 3002726:	9b41                	andi	a4,a4,-16
 3002728:	0e4010ef          	jal	ra,300380c <SystemInit+0x1222>
    iconfig->iocmg_55.BIT.ds = IO_DRV_LEVEL2;
 300272c:	0c4010ef          	jal	ra,30037f0 <SystemInit+0x1206>
 3002730:	0dc010ef          	jal	ra,300380c <SystemInit+0x1222>
 3002734:	0c6010ef          	jal	ra,30037fa <SystemInit+0x1210>
    iconfig->iocmg_55.BIT.pd = BASE_CFG_DISABLE;
 3002738:	0d4010ef          	jal	ra,300380c <SystemInit+0x1222>
 300273c:	0c4010ef          	jal	ra,3003800 <SystemInit+0x1216>
    iconfig->iocmg_55.BIT.pu = BASE_CFG_DISABLE;
 3002740:	0cc010ef          	jal	ra,300380c <SystemInit+0x1222>
 3002744:	0c2010ef          	jal	ra,3003806 <SystemInit+0x121c>
    iconfig->iocmg_55.BIT.sr = IO_SPEED_SLOW;
 3002748:	0c4010ef          	jal	ra,300380c <SystemInit+0x1222>
 300274c:	0ca010ef          	jal	ra,3003816 <SystemInit+0x122c>
    iconfig->iocmg_55.BIT.se = BASE_CFG_DISABLE;
 3002750:	08e7ac23          	sw	a4,152(a5)
    iconfig->iocmg_8.BIT.func = 0x0; /* 0x0 is GPIO0_5 */
 3002754:	147f0737          	lui	a4,0x147f0
 3002758:	4754                	lw	a3,12(a4)
 300275a:	9ac1                	andi	a3,a3,-16
 300275c:	0c0010ef          	jal	ra,300381c <SystemInit+0x1232>
    iconfig->iocmg_8.BIT.ds = IO_DRV_LEVEL2;
 3002760:	20a010ef          	jal	ra,300396a <SystemInit+0x1380>
 3002764:	0b8010ef          	jal	ra,300381c <SystemInit+0x1232>
    iconfig->iocmg_8.BIT.pd = BASE_CFG_DISABLE;
 3002768:	20c010ef          	jal	ra,3003974 <SystemInit+0x138a>
 300276c:	0b0010ef          	jal	ra,300381c <SystemInit+0x1232>
    iconfig->iocmg_8.BIT.pu = BASE_CFG_DISABLE;
 3002770:	20a010ef          	jal	ra,300397a <SystemInit+0x1390>
 3002774:	0a8010ef          	jal	ra,300381c <SystemInit+0x1232>
    iconfig->iocmg_8.BIT.sr = IO_SPEED_SLOW;
 3002778:	20e010ef          	jal	ra,3003986 <SystemInit+0x139c>
 300277c:	0a0010ef          	jal	ra,300381c <SystemInit+0x1232>
    iconfig->iocmg_8.BIT.se = BASE_CFG_DISABLE;
 3002780:	1e4010ef          	jal	ra,3003964 <SystemInit+0x137a>
 3002784:	c754                	sw	a3,12(a4)
    iconfig->iocmg_9.BIT.func = 0x0; /* 0x0 is GPIO0_6 */
 3002786:	4b14                	lw	a3,16(a4)
 3002788:	9ac1                	andi	a3,a3,-16
 300278a:	098010ef          	jal	ra,3003822 <SystemInit+0x1238>
    iconfig->iocmg_9.BIT.ds = IO_DRV_LEVEL2;
 300278e:	1dc010ef          	jal	ra,300396a <SystemInit+0x1380>
 3002792:	090010ef          	jal	ra,3003822 <SystemInit+0x1238>
    iconfig->iocmg_9.BIT.pd = BASE_CFG_DISABLE;
 3002796:	1de010ef          	jal	ra,3003974 <SystemInit+0x138a>
 300279a:	088010ef          	jal	ra,3003822 <SystemInit+0x1238>
    iconfig->iocmg_9.BIT.pu = BASE_CFG_DISABLE;
 300279e:	1dc010ef          	jal	ra,300397a <SystemInit+0x1390>
 30027a2:	080010ef          	jal	ra,3003822 <SystemInit+0x1238>
    iconfig->iocmg_9.BIT.sr = IO_SPEED_SLOW;
 30027a6:	1e0010ef          	jal	ra,3003986 <SystemInit+0x139c>
 30027aa:	078010ef          	jal	ra,3003822 <SystemInit+0x1238>
    iconfig->iocmg_9.BIT.se = BASE_CFG_DISABLE;
 30027ae:	1b6010ef          	jal	ra,3003964 <SystemInit+0x137a>
 30027b2:	cb14                	sw	a3,16(a4)
    iconfig->iocmg_10.BIT.func = 0x0; /* 0x0 is GPIO0_7 */
 30027b4:	4b54                	lw	a3,20(a4)
 30027b6:	9ac1                	andi	a3,a3,-16
 30027b8:	070010ef          	jal	ra,3003828 <SystemInit+0x123e>
    iconfig->iocmg_10.BIT.ds = IO_DRV_LEVEL2;
 30027bc:	1ae010ef          	jal	ra,300396a <SystemInit+0x1380>
 30027c0:	068010ef          	jal	ra,3003828 <SystemInit+0x123e>
    iconfig->iocmg_10.BIT.pd = BASE_CFG_DISABLE;
 30027c4:	1b0010ef          	jal	ra,3003974 <SystemInit+0x138a>
 30027c8:	060010ef          	jal	ra,3003828 <SystemInit+0x123e>
    iconfig->iocmg_10.BIT.pu = BASE_CFG_DISABLE;
 30027cc:	1ae010ef          	jal	ra,300397a <SystemInit+0x1390>
 30027d0:	058010ef          	jal	ra,3003828 <SystemInit+0x123e>
    iconfig->iocmg_10.BIT.sr = IO_SPEED_SLOW;
 30027d4:	1b2010ef          	jal	ra,3003986 <SystemInit+0x139c>
 30027d8:	050010ef          	jal	ra,3003828 <SystemInit+0x123e>
    iconfig->iocmg_10.BIT.se = BASE_CFG_DISABLE;
 30027dc:	188010ef          	jal	ra,3003964 <SystemInit+0x137a>
 30027e0:	cb54                	sw	a3,20(a4)
    iconfig->iocmg_11.BIT.func = 0x0; /* 0x0 is GPIO1_0 */
 30027e2:	4f14                	lw	a3,24(a4)
 30027e4:	9ac1                	andi	a3,a3,-16
 30027e6:	048010ef          	jal	ra,300382e <SystemInit+0x1244>
    iconfig->iocmg_11.BIT.ds = IO_DRV_LEVEL2;
 30027ea:	180010ef          	jal	ra,300396a <SystemInit+0x1380>
 30027ee:	040010ef          	jal	ra,300382e <SystemInit+0x1244>
    iconfig->iocmg_11.BIT.pd = BASE_CFG_DISABLE;
 30027f2:	182010ef          	jal	ra,3003974 <SystemInit+0x138a>
 30027f6:	038010ef          	jal	ra,300382e <SystemInit+0x1244>
    iconfig->iocmg_11.BIT.pu = BASE_CFG_DISABLE;
 30027fa:	180010ef          	jal	ra,300397a <SystemInit+0x1390>
 30027fe:	030010ef          	jal	ra,300382e <SystemInit+0x1244>
    iconfig->iocmg_11.BIT.sr = IO_SPEED_SLOW;
 3002802:	184010ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002806:	028010ef          	jal	ra,300382e <SystemInit+0x1244>
    iconfig->iocmg_11.BIT.se = BASE_CFG_DISABLE;
 300280a:	15a010ef          	jal	ra,3003964 <SystemInit+0x137a>
 300280e:	cf14                	sw	a3,24(a4)
    iconfig->iocmg_12.BIT.func = 0x0; /* 0x0 is GPIO1_1 */
 3002810:	4f54                	lw	a3,28(a4)
 3002812:	9ac1                	andi	a3,a3,-16
 3002814:	020010ef          	jal	ra,3003834 <SystemInit+0x124a>
    iconfig->iocmg_12.BIT.ds = IO_DRV_LEVEL2;
 3002818:	152010ef          	jal	ra,300396a <SystemInit+0x1380>
 300281c:	018010ef          	jal	ra,3003834 <SystemInit+0x124a>
    iconfig->iocmg_12.BIT.pd = BASE_CFG_DISABLE;
 3002820:	154010ef          	jal	ra,3003974 <SystemInit+0x138a>
 3002824:	010010ef          	jal	ra,3003834 <SystemInit+0x124a>
    iconfig->iocmg_12.BIT.pu = BASE_CFG_DISABLE;
 3002828:	152010ef          	jal	ra,300397a <SystemInit+0x1390>
 300282c:	008010ef          	jal	ra,3003834 <SystemInit+0x124a>
    iconfig->iocmg_12.BIT.sr = IO_SPEED_SLOW;
 3002830:	156010ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002834:	000010ef          	jal	ra,3003834 <SystemInit+0x124a>
    iconfig->iocmg_12.BIT.se = BASE_CFG_DISABLE;
 3002838:	12c010ef          	jal	ra,3003964 <SystemInit+0x137a>
 300283c:	cf54                	sw	a3,28(a4)
    iconfig->iocmg_14.BIT.func = 0x0; /* 0x0 is GPIO1_3 */
 300283e:	5354                	lw	a3,36(a4)
 3002840:	9ac1                	andi	a3,a3,-16
 3002842:	7f9000ef          	jal	ra,300383a <SystemInit+0x1250>
    iconfig->iocmg_14.BIT.ds = IO_DRV_LEVEL2;
 3002846:	124010ef          	jal	ra,300396a <SystemInit+0x1380>
 300284a:	7f1000ef          	jal	ra,300383a <SystemInit+0x1250>
    iconfig->iocmg_14.BIT.pd = BASE_CFG_DISABLE;
 300284e:	126010ef          	jal	ra,3003974 <SystemInit+0x138a>
 3002852:	7e9000ef          	jal	ra,300383a <SystemInit+0x1250>
    iconfig->iocmg_14.BIT.pu = BASE_CFG_DISABLE;
 3002856:	124010ef          	jal	ra,300397a <SystemInit+0x1390>
 300285a:	7e1000ef          	jal	ra,300383a <SystemInit+0x1250>
    iconfig->iocmg_14.BIT.sr = IO_SPEED_SLOW;
 300285e:	128010ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002862:	7d9000ef          	jal	ra,300383a <SystemInit+0x1250>
    iconfig->iocmg_14.BIT.se = BASE_CFG_DISABLE;
 3002866:	0fe010ef          	jal	ra,3003964 <SystemInit+0x137a>
 300286a:	d354                	sw	a3,36(a4)
    iconfig->iocmg_15.BIT.func = 0x0; /* 0x0 is GPIO1_4 */
 300286c:	5714                	lw	a3,40(a4)
 300286e:	9ac1                	andi	a3,a3,-16
 3002870:	7d1000ef          	jal	ra,3003840 <SystemInit+0x1256>
    iconfig->iocmg_15.BIT.ds = IO_DRV_LEVEL2;
 3002874:	0f6010ef          	jal	ra,300396a <SystemInit+0x1380>
 3002878:	7c9000ef          	jal	ra,3003840 <SystemInit+0x1256>
    iconfig->iocmg_15.BIT.pd = BASE_CFG_DISABLE;
 300287c:	0f8010ef          	jal	ra,3003974 <SystemInit+0x138a>
 3002880:	7c1000ef          	jal	ra,3003840 <SystemInit+0x1256>
    iconfig->iocmg_15.BIT.pu = BASE_CFG_DISABLE;
 3002884:	0f6010ef          	jal	ra,300397a <SystemInit+0x1390>
 3002888:	7b9000ef          	jal	ra,3003840 <SystemInit+0x1256>
    iconfig->iocmg_15.BIT.sr = IO_SPEED_SLOW;
 300288c:	0fa010ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002890:	7b1000ef          	jal	ra,3003840 <SystemInit+0x1256>
    iconfig->iocmg_15.BIT.se = BASE_CFG_DISABLE;
 3002894:	0d0010ef          	jal	ra,3003964 <SystemInit+0x137a>
 3002898:	d714                	sw	a3,40(a4)
    iconfig->iocmg_18.BIT.func = 0x9; /* 0x9 is ACMP1_ANA_N */
 300289a:	43d4                	lw	a3,4(a5)
 300289c:	9ac1                	andi	a3,a3,-16
 300289e:	0096e693          	ori	a3,a3,9
 30028a2:	7a5000ef          	jal	ra,3003846 <SystemInit+0x125c>
    iconfig->iocmg_18.BIT.ds = IO_DRV_LEVEL2;
 30028a6:	0c4010ef          	jal	ra,300396a <SystemInit+0x1380>
 30028aa:	79d000ef          	jal	ra,3003846 <SystemInit+0x125c>
    iconfig->iocmg_18.BIT.pd = BASE_CFG_DISABLE;
 30028ae:	0c6010ef          	jal	ra,3003974 <SystemInit+0x138a>
 30028b2:	795000ef          	jal	ra,3003846 <SystemInit+0x125c>
    iconfig->iocmg_18.BIT.pu = BASE_CFG_DISABLE;
 30028b6:	0c4010ef          	jal	ra,300397a <SystemInit+0x1390>
 30028ba:	78d000ef          	jal	ra,3003846 <SystemInit+0x125c>
    iconfig->iocmg_18.BIT.sr = IO_SPEED_SLOW;
 30028be:	0c8010ef          	jal	ra,3003986 <SystemInit+0x139c>
 30028c2:	785000ef          	jal	ra,3003846 <SystemInit+0x125c>
    iconfig->iocmg_18.BIT.se = BASE_CFG_DISABLE;
 30028c6:	09e010ef          	jal	ra,3003964 <SystemInit+0x137a>
 30028ca:	c3d4                	sw	a3,4(a5)
    iconfig->iocmg_21.BIT.func = 0x9; /* 0x9 is ACMP1_ANA_P */
 30028cc:	4b94                	lw	a3,16(a5)
 30028ce:	9ac1                	andi	a3,a3,-16
 30028d0:	0096e693          	ori	a3,a3,9
 30028d4:	779000ef          	jal	ra,300384c <SystemInit+0x1262>
    iconfig->iocmg_21.BIT.ds = IO_DRV_LEVEL2;
 30028d8:	092010ef          	jal	ra,300396a <SystemInit+0x1380>
 30028dc:	771000ef          	jal	ra,300384c <SystemInit+0x1262>
    iconfig->iocmg_21.BIT.pd = BASE_CFG_DISABLE;
 30028e0:	094010ef          	jal	ra,3003974 <SystemInit+0x138a>
 30028e4:	769000ef          	jal	ra,300384c <SystemInit+0x1262>
    iconfig->iocmg_21.BIT.pu = BASE_CFG_DISABLE;
 30028e8:	092010ef          	jal	ra,300397a <SystemInit+0x1390>
 30028ec:	761000ef          	jal	ra,300384c <SystemInit+0x1262>
    iconfig->iocmg_21.BIT.sr = IO_SPEED_SLOW;
 30028f0:	096010ef          	jal	ra,3003986 <SystemInit+0x139c>
 30028f4:	759000ef          	jal	ra,300384c <SystemInit+0x1262>
    iconfig->iocmg_21.BIT.se = BASE_CFG_DISABLE;
 30028f8:	06c010ef          	jal	ra,3003964 <SystemInit+0x137a>
 30028fc:	cb94                	sw	a3,16(a5)
    iconfig->iocmg_22.BIT.func = 0x8; /* 0x8 is ADC1_ANA_A2 */
 30028fe:	4bd4                	lw	a3,20(a5)
 3002900:	777000ef          	jal	ra,3003876 <SystemInit+0x128c>
 3002904:	74f000ef          	jal	ra,3003852 <SystemInit+0x1268>
    iconfig->iocmg_22.BIT.ds = IO_DRV_LEVEL2;
 3002908:	062010ef          	jal	ra,300396a <SystemInit+0x1380>
 300290c:	747000ef          	jal	ra,3003852 <SystemInit+0x1268>
    iconfig->iocmg_22.BIT.pd = BASE_CFG_DISABLE;
 3002910:	064010ef          	jal	ra,3003974 <SystemInit+0x138a>
 3002914:	73f000ef          	jal	ra,3003852 <SystemInit+0x1268>
    iconfig->iocmg_22.BIT.pu = BASE_CFG_DISABLE;
 3002918:	062010ef          	jal	ra,300397a <SystemInit+0x1390>
 300291c:	737000ef          	jal	ra,3003852 <SystemInit+0x1268>
    iconfig->iocmg_22.BIT.sr = IO_SPEED_SLOW;
 3002920:	066010ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002924:	72f000ef          	jal	ra,3003852 <SystemInit+0x1268>
    iconfig->iocmg_22.BIT.se = BASE_CFG_DISABLE;
 3002928:	03c010ef          	jal	ra,3003964 <SystemInit+0x137a>
 300292c:	cbd4                	sw	a3,20(a5)
    iconfig->iocmg_23.BIT.func = 0x8; /* 0x8 is ADC1_ANA_B2 */
 300292e:	4f94                	lw	a3,24(a5)
 3002930:	747000ef          	jal	ra,3003876 <SystemInit+0x128c>
 3002934:	725000ef          	jal	ra,3003858 <SystemInit+0x126e>
    iconfig->iocmg_23.BIT.ds = IO_DRV_LEVEL2;
 3002938:	032010ef          	jal	ra,300396a <SystemInit+0x1380>
 300293c:	71d000ef          	jal	ra,3003858 <SystemInit+0x126e>
    iconfig->iocmg_23.BIT.pd = BASE_CFG_DISABLE;
 3002940:	034010ef          	jal	ra,3003974 <SystemInit+0x138a>
 3002944:	715000ef          	jal	ra,3003858 <SystemInit+0x126e>
    iconfig->iocmg_23.BIT.pu = BASE_CFG_DISABLE;
 3002948:	032010ef          	jal	ra,300397a <SystemInit+0x1390>
 300294c:	70d000ef          	jal	ra,3003858 <SystemInit+0x126e>
    iconfig->iocmg_23.BIT.sr = IO_SPEED_SLOW;
 3002950:	036010ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002954:	705000ef          	jal	ra,3003858 <SystemInit+0x126e>
    iconfig->iocmg_23.BIT.se = BASE_CFG_DISABLE;
 3002958:	00c010ef          	jal	ra,3003964 <SystemInit+0x137a>
 300295c:	cf94                	sw	a3,24(a5)
    iconfig->iocmg_26.BIT.func = 0x8; /* 0x8 is ADC1_ANA_A4 */
 300295e:	53d4                	lw	a3,36(a5)
 3002960:	717000ef          	jal	ra,3003876 <SystemInit+0x128c>
 3002964:	6fb000ef          	jal	ra,300385e <SystemInit+0x1274>
    iconfig->iocmg_26.BIT.ds = IO_DRV_LEVEL2;
 3002968:	002010ef          	jal	ra,300396a <SystemInit+0x1380>
 300296c:	6f3000ef          	jal	ra,300385e <SystemInit+0x1274>
    iconfig->iocmg_26.BIT.pd = BASE_CFG_DISABLE;
 3002970:	004010ef          	jal	ra,3003974 <SystemInit+0x138a>
 3002974:	6eb000ef          	jal	ra,300385e <SystemInit+0x1274>
    iconfig->iocmg_26.BIT.pu = BASE_CFG_DISABLE;
 3002978:	002010ef          	jal	ra,300397a <SystemInit+0x1390>
 300297c:	6e3000ef          	jal	ra,300385e <SystemInit+0x1274>
    iconfig->iocmg_26.BIT.sr = IO_SPEED_SLOW;
 3002980:	006010ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002984:	6db000ef          	jal	ra,300385e <SystemInit+0x1274>
    iconfig->iocmg_26.BIT.se = BASE_CFG_DISABLE;
 3002988:	7dd000ef          	jal	ra,3003964 <SystemInit+0x137a>
 300298c:	d3d4                	sw	a3,36(a5)
    iconfig->iocmg_27.BIT.func = 0x8; /* 0x8 is ADC1_ANA_A5 */
 300298e:	5794                	lw	a3,40(a5)
 3002990:	6e7000ef          	jal	ra,3003876 <SystemInit+0x128c>
 3002994:	6d1000ef          	jal	ra,3003864 <SystemInit+0x127a>
    iconfig->iocmg_27.BIT.ds = IO_DRV_LEVEL2;
 3002998:	7d3000ef          	jal	ra,300396a <SystemInit+0x1380>
 300299c:	6c9000ef          	jal	ra,3003864 <SystemInit+0x127a>
    iconfig->iocmg_27.BIT.pd = BASE_CFG_DISABLE;
 30029a0:	7d5000ef          	jal	ra,3003974 <SystemInit+0x138a>
 30029a4:	6c1000ef          	jal	ra,3003864 <SystemInit+0x127a>
    iconfig->iocmg_27.BIT.pu = BASE_CFG_DISABLE;
 30029a8:	7d3000ef          	jal	ra,300397a <SystemInit+0x1390>
 30029ac:	6b9000ef          	jal	ra,3003864 <SystemInit+0x127a>
    iconfig->iocmg_27.BIT.sr = IO_SPEED_SLOW;
 30029b0:	7d7000ef          	jal	ra,3003986 <SystemInit+0x139c>
 30029b4:	6b1000ef          	jal	ra,3003864 <SystemInit+0x127a>
    iconfig->iocmg_27.BIT.se = BASE_CFG_DISABLE;
 30029b8:	7ad000ef          	jal	ra,3003964 <SystemInit+0x137a>
 30029bc:	d794                	sw	a3,40(a5)
    iconfig->iocmg_19.BIT.func = 0x8; /* 0x8 is ADC1_ANA_B4 */
 30029be:	4794                	lw	a3,8(a5)
 30029c0:	6b7000ef          	jal	ra,3003876 <SystemInit+0x128c>
 30029c4:	6a7000ef          	jal	ra,300386a <SystemInit+0x1280>
    iconfig->iocmg_19.BIT.ds = IO_DRV_LEVEL2;
 30029c8:	7a3000ef          	jal	ra,300396a <SystemInit+0x1380>
 30029cc:	69f000ef          	jal	ra,300386a <SystemInit+0x1280>
    iconfig->iocmg_19.BIT.pd = BASE_CFG_DISABLE;
 30029d0:	7a5000ef          	jal	ra,3003974 <SystemInit+0x138a>
 30029d4:	697000ef          	jal	ra,300386a <SystemInit+0x1280>
    iconfig->iocmg_19.BIT.pu = BASE_CFG_DISABLE;
 30029d8:	7a3000ef          	jal	ra,300397a <SystemInit+0x1390>
 30029dc:	68f000ef          	jal	ra,300386a <SystemInit+0x1280>
    iconfig->iocmg_19.BIT.sr = IO_SPEED_SLOW;
 30029e0:	7a7000ef          	jal	ra,3003986 <SystemInit+0x139c>
 30029e4:	687000ef          	jal	ra,300386a <SystemInit+0x1280>
    iconfig->iocmg_19.BIT.se = BASE_CFG_DISABLE;
 30029e8:	77d000ef          	jal	ra,3003964 <SystemInit+0x137a>
 30029ec:	c794                	sw	a3,8(a5)
    iconfig->iocmg_20.BIT.func = 0x8; /* 0x8 is ADC1_ANA_B5 */
 30029ee:	47d4                	lw	a3,12(a5)
 30029f0:	687000ef          	jal	ra,3003876 <SystemInit+0x128c>
 30029f4:	67d000ef          	jal	ra,3003870 <SystemInit+0x1286>
    iconfig->iocmg_20.BIT.ds = IO_DRV_LEVEL2;
 30029f8:	773000ef          	jal	ra,300396a <SystemInit+0x1380>
 30029fc:	675000ef          	jal	ra,3003870 <SystemInit+0x1286>
    iconfig->iocmg_20.BIT.pd = BASE_CFG_DISABLE;
 3002a00:	775000ef          	jal	ra,3003974 <SystemInit+0x138a>
 3002a04:	66d000ef          	jal	ra,3003870 <SystemInit+0x1286>
    iconfig->iocmg_20.BIT.pu = BASE_CFG_DISABLE;
 3002a08:	773000ef          	jal	ra,300397a <SystemInit+0x1390>
 3002a0c:	665000ef          	jal	ra,3003870 <SystemInit+0x1286>
    iconfig->iocmg_20.BIT.sr = IO_SPEED_SLOW;
 3002a10:	777000ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002a14:	65d000ef          	jal	ra,3003870 <SystemInit+0x1286>
    iconfig->iocmg_20.BIT.se = BASE_CFG_DISABLE;
 3002a18:	74d000ef          	jal	ra,3003964 <SystemInit+0x137a>
 3002a1c:	c7d4                	sw	a3,12(a5)
    iconfig->iocmg_24.BIT.func = 0x8; /* 0x8 is PGA1_ANA_EXT */
 3002a1e:	4fd4                	lw	a3,28(a5)
 3002a20:	657000ef          	jal	ra,3003876 <SystemInit+0x128c>
 3002a24:	65b000ef          	jal	ra,300387e <SystemInit+0x1294>
    iconfig->iocmg_24.BIT.ds = IO_DRV_LEVEL2;
 3002a28:	743000ef          	jal	ra,300396a <SystemInit+0x1380>
 3002a2c:	653000ef          	jal	ra,300387e <SystemInit+0x1294>
    iconfig->iocmg_24.BIT.pd = BASE_CFG_DISABLE;
 3002a30:	745000ef          	jal	ra,3003974 <SystemInit+0x138a>
 3002a34:	64b000ef          	jal	ra,300387e <SystemInit+0x1294>
    iconfig->iocmg_24.BIT.pu = BASE_CFG_DISABLE;
 3002a38:	743000ef          	jal	ra,300397a <SystemInit+0x1390>
 3002a3c:	643000ef          	jal	ra,300387e <SystemInit+0x1294>
    iconfig->iocmg_24.BIT.sr = IO_SPEED_SLOW;
 3002a40:	747000ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002a44:	cfd4                	sw	a3,28(a5)
    iconfig->iocmg_24.BIT.se = BASE_CFG_DISABLE;
 3002a46:	4fd0                	lw	a2,28(a5)
 3002a48:	147e06b7          	lui	a3,0x147e0
 3002a4c:	70d000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002a50:	cfd0                	sw	a2,28(a5)
    iconfig->iocmg_25.BIT.func = 0x4; /* 0x4 is POE0 */
 3002a52:	5390                	lw	a2,32(a5)
 3002a54:	9a41                	andi	a2,a2,-16
 3002a56:	00466613          	ori	a2,a2,4
 3002a5a:	62b000ef          	jal	ra,3003884 <SystemInit+0x129a>
    iconfig->iocmg_25.BIT.ds = IO_DRV_LEVEL2;
 3002a5e:	6d9000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002a62:	623000ef          	jal	ra,3003884 <SystemInit+0x129a>
    iconfig->iocmg_25.BIT.pd = BASE_CFG_DISABLE;
 3002a66:	6db000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002a6a:	61b000ef          	jal	ra,3003884 <SystemInit+0x129a>
    iconfig->iocmg_25.BIT.pu = BASE_CFG_DISABLE;
 3002a6e:	6d9000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002a72:	613000ef          	jal	ra,3003884 <SystemInit+0x129a>
    iconfig->iocmg_25.BIT.sr = IO_SPEED_SLOW;
 3002a76:	6d7000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002a7a:	60b000ef          	jal	ra,3003884 <SystemInit+0x129a>
    iconfig->iocmg_25.BIT.se = BASE_CFG_DISABLE;
 3002a7e:	6db000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002a82:	d390                	sw	a2,32(a5)
 3002a84:	60b000ef          	jal	ra,300388e <SystemInit+0x12a4>
    iconfig->iocmg_54.BIT.func = 0x2; /* 0x2 is POE2 */
 3002a88:	9a41                	andi	a2,a2,-16
 3002a8a:	00266613          	ori	a2,a2,2
 3002a8e:	5fd000ef          	jal	ra,300388a <SystemInit+0x12a0>
    iconfig->iocmg_54.BIT.ds = IO_DRV_LEVEL2;
 3002a92:	6a5000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002a96:	5f5000ef          	jal	ra,300388a <SystemInit+0x12a0>
    iconfig->iocmg_54.BIT.pd = BASE_CFG_DISABLE;
 3002a9a:	6a7000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002a9e:	5ed000ef          	jal	ra,300388a <SystemInit+0x12a0>
    iconfig->iocmg_54.BIT.pu = BASE_CFG_DISABLE;
 3002aa2:	6a5000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002aa6:	5e5000ef          	jal	ra,300388a <SystemInit+0x12a0>
    iconfig->iocmg_54.BIT.sr = IO_SPEED_SLOW;
 3002aaa:	6a3000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002aae:	5dd000ef          	jal	ra,300388a <SystemInit+0x12a0>
    iconfig->iocmg_54.BIT.se = BASE_CFG_DISABLE;
 3002ab2:	6a7000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002ab6:	08c7aa23          	sw	a2,148(a5)
    iconfig->iocmg_28.BIT.func = 0x3; /* 0x3 is APT8_PWMB */
 3002aba:	57d0                	lw	a2,44(a5)
 3002abc:	5fd000ef          	jal	ra,30038b8 <SystemInit+0x12ce>
 3002ac0:	5d5000ef          	jal	ra,3003894 <SystemInit+0x12aa>
    iconfig->iocmg_28.BIT.ds = IO_DRV_LEVEL2;
 3002ac4:	673000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002ac8:	5cd000ef          	jal	ra,3003894 <SystemInit+0x12aa>
    iconfig->iocmg_28.BIT.pd = BASE_CFG_DISABLE;
 3002acc:	675000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002ad0:	5c5000ef          	jal	ra,3003894 <SystemInit+0x12aa>
    iconfig->iocmg_28.BIT.pu = BASE_CFG_DISABLE;
 3002ad4:	673000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002ad8:	5bd000ef          	jal	ra,3003894 <SystemInit+0x12aa>
    iconfig->iocmg_28.BIT.sr = IO_SPEED_SLOW;
 3002adc:	671000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002ae0:	5b5000ef          	jal	ra,3003894 <SystemInit+0x12aa>
    iconfig->iocmg_28.BIT.se = BASE_CFG_DISABLE;
 3002ae4:	675000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002ae8:	d7d0                	sw	a2,44(a5)
    iconfig->iocmg_32.BIT.func = 0x3; /* 0x3 is APT0_PWMA */
 3002aea:	5fd0                	lw	a2,60(a5)
 3002aec:	5cd000ef          	jal	ra,30038b8 <SystemInit+0x12ce>
 3002af0:	5ab000ef          	jal	ra,300389a <SystemInit+0x12b0>
    iconfig->iocmg_32.BIT.ds = IO_DRV_LEVEL2;
 3002af4:	643000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002af8:	5a3000ef          	jal	ra,300389a <SystemInit+0x12b0>
    iconfig->iocmg_32.BIT.pd = BASE_CFG_DISABLE;
 3002afc:	645000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002b00:	59b000ef          	jal	ra,300389a <SystemInit+0x12b0>
    iconfig->iocmg_32.BIT.pu = BASE_CFG_DISABLE;
 3002b04:	643000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002b08:	593000ef          	jal	ra,300389a <SystemInit+0x12b0>
    iconfig->iocmg_32.BIT.sr = IO_SPEED_SLOW;
 3002b0c:	641000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002b10:	58b000ef          	jal	ra,300389a <SystemInit+0x12b0>
    iconfig->iocmg_32.BIT.se = BASE_CFG_DISABLE;
 3002b14:	645000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002b18:	dfd0                	sw	a2,60(a5)
    iconfig->iocmg_35.BIT.func = 0x3; /* 0x3 is APT0_PWMB */
 3002b1a:	47b0                	lw	a2,72(a5)
 3002b1c:	59d000ef          	jal	ra,30038b8 <SystemInit+0x12ce>
 3002b20:	581000ef          	jal	ra,30038a0 <SystemInit+0x12b6>
    iconfig->iocmg_35.BIT.ds = IO_DRV_LEVEL2;
 3002b24:	613000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002b28:	579000ef          	jal	ra,30038a0 <SystemInit+0x12b6>
    iconfig->iocmg_35.BIT.pd = BASE_CFG_DISABLE;
 3002b2c:	615000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002b30:	571000ef          	jal	ra,30038a0 <SystemInit+0x12b6>
    iconfig->iocmg_35.BIT.pu = BASE_CFG_DISABLE;
 3002b34:	613000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002b38:	569000ef          	jal	ra,30038a0 <SystemInit+0x12b6>
    iconfig->iocmg_35.BIT.sr = IO_SPEED_SLOW;
 3002b3c:	611000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002b40:	561000ef          	jal	ra,30038a0 <SystemInit+0x12b6>
    iconfig->iocmg_35.BIT.se = BASE_CFG_DISABLE;
 3002b44:	615000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002b48:	c7b0                	sw	a2,72(a5)
    iconfig->iocmg_33.BIT.func = 0x3; /* 0x3 is APT1_PWMA */
 3002b4a:	43b0                	lw	a2,64(a5)
 3002b4c:	56d000ef          	jal	ra,30038b8 <SystemInit+0x12ce>
 3002b50:	557000ef          	jal	ra,30038a6 <SystemInit+0x12bc>
    iconfig->iocmg_33.BIT.ds = IO_DRV_LEVEL2;
 3002b54:	5e3000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002b58:	54f000ef          	jal	ra,30038a6 <SystemInit+0x12bc>
    iconfig->iocmg_33.BIT.pd = BASE_CFG_DISABLE;
 3002b5c:	5e5000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002b60:	547000ef          	jal	ra,30038a6 <SystemInit+0x12bc>
    iconfig->iocmg_33.BIT.pu = BASE_CFG_DISABLE;
 3002b64:	5e3000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002b68:	53f000ef          	jal	ra,30038a6 <SystemInit+0x12bc>
    iconfig->iocmg_33.BIT.sr = IO_SPEED_SLOW;
 3002b6c:	5e1000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002b70:	537000ef          	jal	ra,30038a6 <SystemInit+0x12bc>
    iconfig->iocmg_33.BIT.se = BASE_CFG_DISABLE;
 3002b74:	5e5000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002b78:	c3b0                	sw	a2,64(a5)
    iconfig->iocmg_36.BIT.func = 0x3; /* 0x3 is APT1_PWMB */
 3002b7a:	47f0                	lw	a2,76(a5)
 3002b7c:	53d000ef          	jal	ra,30038b8 <SystemInit+0x12ce>
 3002b80:	52d000ef          	jal	ra,30038ac <SystemInit+0x12c2>
    iconfig->iocmg_36.BIT.ds = IO_DRV_LEVEL2;
 3002b84:	5b3000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002b88:	525000ef          	jal	ra,30038ac <SystemInit+0x12c2>
    iconfig->iocmg_36.BIT.pd = BASE_CFG_DISABLE;
 3002b8c:	5b5000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002b90:	51d000ef          	jal	ra,30038ac <SystemInit+0x12c2>
    iconfig->iocmg_36.BIT.pu = BASE_CFG_DISABLE;
 3002b94:	5b3000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002b98:	515000ef          	jal	ra,30038ac <SystemInit+0x12c2>
    iconfig->iocmg_36.BIT.sr = IO_SPEED_SLOW;
 3002b9c:	5b1000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002ba0:	50d000ef          	jal	ra,30038ac <SystemInit+0x12c2>
    iconfig->iocmg_36.BIT.se = BASE_CFG_DISABLE;
 3002ba4:	5b5000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002ba8:	c7f0                	sw	a2,76(a5)
    iconfig->iocmg_34.BIT.func = 0x3; /* 0x3 is APT2_PWMA */
 3002baa:	43f0                	lw	a2,68(a5)
 3002bac:	50d000ef          	jal	ra,30038b8 <SystemInit+0x12ce>
 3002bb0:	503000ef          	jal	ra,30038b2 <SystemInit+0x12c8>
    iconfig->iocmg_34.BIT.ds = IO_DRV_LEVEL2;
 3002bb4:	583000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002bb8:	4fb000ef          	jal	ra,30038b2 <SystemInit+0x12c8>
    iconfig->iocmg_34.BIT.pd = BASE_CFG_DISABLE;
 3002bbc:	585000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002bc0:	4f3000ef          	jal	ra,30038b2 <SystemInit+0x12c8>
    iconfig->iocmg_34.BIT.pu = BASE_CFG_DISABLE;
 3002bc4:	583000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002bc8:	4eb000ef          	jal	ra,30038b2 <SystemInit+0x12c8>
    iconfig->iocmg_34.BIT.sr = IO_SPEED_SLOW;
 3002bcc:	581000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002bd0:	4e3000ef          	jal	ra,30038b2 <SystemInit+0x12c8>
    iconfig->iocmg_34.BIT.se = BASE_CFG_DISABLE;
 3002bd4:	585000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002bd8:	c3f0                	sw	a2,68(a5)
    iconfig->iocmg_37.BIT.func = 0x3; /* 0x3 is APT2_PWMB */
 3002bda:	4bb0                	lw	a2,80(a5)
 3002bdc:	4dd000ef          	jal	ra,30038b8 <SystemInit+0x12ce>
 3002be0:	4e1000ef          	jal	ra,30038c0 <SystemInit+0x12d6>
    iconfig->iocmg_37.BIT.ds = IO_DRV_LEVEL2;
 3002be4:	553000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002be8:	4d9000ef          	jal	ra,30038c0 <SystemInit+0x12d6>
    iconfig->iocmg_37.BIT.pd = BASE_CFG_DISABLE;
 3002bec:	555000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002bf0:	4d1000ef          	jal	ra,30038c0 <SystemInit+0x12d6>
    iconfig->iocmg_37.BIT.pu = BASE_CFG_DISABLE;
 3002bf4:	553000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002bf8:	4c9000ef          	jal	ra,30038c0 <SystemInit+0x12d6>
    iconfig->iocmg_37.BIT.sr = IO_SPEED_SLOW;
 3002bfc:	551000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002c00:	4c1000ef          	jal	ra,30038c0 <SystemInit+0x12d6>
    iconfig->iocmg_37.BIT.se = BASE_CFG_DISABLE;
 3002c04:	555000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002c08:	cbb0                	sw	a2,80(a5)
    iconfig->iocmg_38.BIT.func = 0x9; /* 0x9 is PGA0_ANA_P */
 3002c0a:	4bf0                	lw	a2,84(a5)
 3002c0c:	9a41                	andi	a2,a2,-16
 3002c0e:	00966613          	ori	a2,a2,9
 3002c12:	4b5000ef          	jal	ra,30038c6 <SystemInit+0x12dc>
    iconfig->iocmg_38.BIT.ds = IO_DRV_LEVEL2;
 3002c16:	521000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002c1a:	4ad000ef          	jal	ra,30038c6 <SystemInit+0x12dc>
    iconfig->iocmg_38.BIT.pd = BASE_CFG_DISABLE;
 3002c1e:	523000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002c22:	4a5000ef          	jal	ra,30038c6 <SystemInit+0x12dc>
    iconfig->iocmg_38.BIT.pu = BASE_CFG_DISABLE;
 3002c26:	521000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002c2a:	49d000ef          	jal	ra,30038c6 <SystemInit+0x12dc>
    iconfig->iocmg_38.BIT.sr = IO_SPEED_SLOW;
 3002c2e:	51f000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002c32:	495000ef          	jal	ra,30038c6 <SystemInit+0x12dc>
    iconfig->iocmg_38.BIT.se = BASE_CFG_DISABLE;
 3002c36:	523000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002c3a:	cbf0                	sw	a2,84(a5)
    iconfig->iocmg_39.BIT.func = 0x9; /* 0x9 is PGA0_ANA_N */
 3002c3c:	4fb0                	lw	a2,88(a5)
 3002c3e:	9a41                	andi	a2,a2,-16
 3002c40:	00966613          	ori	a2,a2,9
 3002c44:	489000ef          	jal	ra,30038cc <SystemInit+0x12e2>
    iconfig->iocmg_39.BIT.ds = IO_DRV_LEVEL2;
 3002c48:	4ef000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002c4c:	481000ef          	jal	ra,30038cc <SystemInit+0x12e2>
    iconfig->iocmg_39.BIT.pd = BASE_CFG_DISABLE;
 3002c50:	4f1000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002c54:	479000ef          	jal	ra,30038cc <SystemInit+0x12e2>
    iconfig->iocmg_39.BIT.pu = BASE_CFG_DISABLE;
 3002c58:	4ef000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002c5c:	471000ef          	jal	ra,30038cc <SystemInit+0x12e2>
    iconfig->iocmg_39.BIT.sr = IO_SPEED_SLOW;
 3002c60:	4ed000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002c64:	469000ef          	jal	ra,30038cc <SystemInit+0x12e2>
    iconfig->iocmg_39.BIT.se = BASE_CFG_DISABLE;
 3002c68:	4f1000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002c6c:	cfb0                	sw	a2,88(a5)
    iconfig->iocmg_40.BIT.func = 0x8; /* 0x8 is PGA0_ANA_EXT */
 3002c6e:	4ff0                	lw	a2,92(a5)
 3002c70:	4bf000ef          	jal	ra,300392e <SystemInit+0x1344>
 3002c74:	45f000ef          	jal	ra,30038d2 <SystemInit+0x12e8>
    iconfig->iocmg_40.BIT.ds = IO_DRV_LEVEL2;
 3002c78:	4bf000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002c7c:	457000ef          	jal	ra,30038d2 <SystemInit+0x12e8>
    iconfig->iocmg_40.BIT.pd = BASE_CFG_DISABLE;
 3002c80:	4c1000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002c84:	44f000ef          	jal	ra,30038d2 <SystemInit+0x12e8>
    iconfig->iocmg_40.BIT.pu = BASE_CFG_DISABLE;
 3002c88:	4bf000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002c8c:	447000ef          	jal	ra,30038d2 <SystemInit+0x12e8>
    iconfig->iocmg_40.BIT.sr = IO_SPEED_SLOW;
 3002c90:	4bd000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002c94:	43f000ef          	jal	ra,30038d2 <SystemInit+0x12e8>
    iconfig->iocmg_40.BIT.se = BASE_CFG_DISABLE;
 3002c98:	4c1000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002c9c:	cff0                	sw	a2,92(a5)
    iconfig->iocmg_41.BIT.func = 0x8; /* 0x8 is ADC0_ANA_A3 */
 3002c9e:	53b0                	lw	a2,96(a5)
 3002ca0:	48f000ef          	jal	ra,300392e <SystemInit+0x1344>
 3002ca4:	435000ef          	jal	ra,30038d8 <SystemInit+0x12ee>
    iconfig->iocmg_41.BIT.ds = IO_DRV_LEVEL2;
 3002ca8:	48f000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002cac:	42d000ef          	jal	ra,30038d8 <SystemInit+0x12ee>
    iconfig->iocmg_41.BIT.pd = BASE_CFG_DISABLE;
 3002cb0:	491000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002cb4:	425000ef          	jal	ra,30038d8 <SystemInit+0x12ee>
    iconfig->iocmg_41.BIT.pu = BASE_CFG_DISABLE;
 3002cb8:	48f000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002cbc:	41d000ef          	jal	ra,30038d8 <SystemInit+0x12ee>
    iconfig->iocmg_41.BIT.sr = IO_SPEED_SLOW;
 3002cc0:	48d000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002cc4:	415000ef          	jal	ra,30038d8 <SystemInit+0x12ee>
    iconfig->iocmg_41.BIT.se = BASE_CFG_DISABLE;
 3002cc8:	491000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002ccc:	d3b0                	sw	a2,96(a5)
    iconfig->iocmg_42.BIT.func = 0x8; /* 0x8 is ADC0_ANA_A4 */
 3002cce:	53f0                	lw	a2,100(a5)
 3002cd0:	45f000ef          	jal	ra,300392e <SystemInit+0x1344>
 3002cd4:	40b000ef          	jal	ra,30038de <SystemInit+0x12f4>
    iconfig->iocmg_42.BIT.ds = IO_DRV_LEVEL2;
 3002cd8:	45f000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002cdc:	403000ef          	jal	ra,30038de <SystemInit+0x12f4>
    iconfig->iocmg_42.BIT.pd = BASE_CFG_DISABLE;
 3002ce0:	461000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002ce4:	3fb000ef          	jal	ra,30038de <SystemInit+0x12f4>
    iconfig->iocmg_42.BIT.pu = BASE_CFG_DISABLE;
 3002ce8:	45f000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002cec:	3f3000ef          	jal	ra,30038de <SystemInit+0x12f4>
    iconfig->iocmg_42.BIT.sr = IO_SPEED_SLOW;
 3002cf0:	45d000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002cf4:	3eb000ef          	jal	ra,30038de <SystemInit+0x12f4>
    iconfig->iocmg_42.BIT.se = BASE_CFG_DISABLE;
 3002cf8:	461000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002cfc:	d3f0                	sw	a2,100(a5)
 3002cfe:	3eb000ef          	jal	ra,30038e8 <SystemInit+0x12fe>
 3002d02:	415000ef          	jal	ra,3003916 <SystemInit+0x132c>
    iconfig->iocmg_58.BIT.func = 0x1; /* 0x1 is APT3_PWMA */
 3002d06:	3df000ef          	jal	ra,30038e4 <SystemInit+0x12fa>
    iconfig->iocmg_58.BIT.ds = IO_DRV_LEVEL2;
 3002d0a:	42d000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002d0e:	3d7000ef          	jal	ra,30038e4 <SystemInit+0x12fa>
    iconfig->iocmg_58.BIT.pd = BASE_CFG_DISABLE;
 3002d12:	42f000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002d16:	3cf000ef          	jal	ra,30038e4 <SystemInit+0x12fa>
    iconfig->iocmg_58.BIT.pu = BASE_CFG_DISABLE;
 3002d1a:	42d000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002d1e:	3c7000ef          	jal	ra,30038e4 <SystemInit+0x12fa>
    iconfig->iocmg_58.BIT.sr = IO_SPEED_SLOW;
 3002d22:	42b000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002d26:	3bf000ef          	jal	ra,30038e4 <SystemInit+0x12fa>
    iconfig->iocmg_58.BIT.se = BASE_CFG_DISABLE;
 3002d2a:	42f000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002d2e:	0ac7a223          	sw	a2,164(a5)
 3002d32:	3c1000ef          	jal	ra,30038f2 <SystemInit+0x1308>
 3002d36:	3e1000ef          	jal	ra,3003916 <SystemInit+0x132c>
    iconfig->iocmg_61.BIT.func = 0x1; /* 0x1 is APT3_PWMB */
 3002d3a:	3b5000ef          	jal	ra,30038ee <SystemInit+0x1304>
    iconfig->iocmg_61.BIT.ds = IO_DRV_LEVEL2;
 3002d3e:	3f9000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002d42:	3ad000ef          	jal	ra,30038ee <SystemInit+0x1304>
    iconfig->iocmg_61.BIT.pd = BASE_CFG_DISABLE;
 3002d46:	3fb000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002d4a:	3a5000ef          	jal	ra,30038ee <SystemInit+0x1304>
    iconfig->iocmg_61.BIT.pu = BASE_CFG_DISABLE;
 3002d4e:	3f9000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002d52:	39d000ef          	jal	ra,30038ee <SystemInit+0x1304>
    iconfig->iocmg_61.BIT.sr = IO_SPEED_SLOW;
 3002d56:	3f7000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002d5a:	395000ef          	jal	ra,30038ee <SystemInit+0x1304>
    iconfig->iocmg_61.BIT.se = BASE_CFG_DISABLE;
 3002d5e:	3fb000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002d62:	0ac7a823          	sw	a2,176(a5)
 3002d66:	397000ef          	jal	ra,30038fc <SystemInit+0x1312>
 3002d6a:	3ad000ef          	jal	ra,3003916 <SystemInit+0x132c>
    iconfig->iocmg_59.BIT.func = 0x1; /* 0x1 is APT4_PWMA */
 3002d6e:	38b000ef          	jal	ra,30038f8 <SystemInit+0x130e>
    iconfig->iocmg_59.BIT.ds = IO_DRV_LEVEL2;
 3002d72:	3c5000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002d76:	383000ef          	jal	ra,30038f8 <SystemInit+0x130e>
    iconfig->iocmg_59.BIT.pd = BASE_CFG_DISABLE;
 3002d7a:	3c7000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002d7e:	37b000ef          	jal	ra,30038f8 <SystemInit+0x130e>
    iconfig->iocmg_59.BIT.pu = BASE_CFG_DISABLE;
 3002d82:	3c5000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002d86:	373000ef          	jal	ra,30038f8 <SystemInit+0x130e>
    iconfig->iocmg_59.BIT.sr = IO_SPEED_SLOW;
 3002d8a:	3c3000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002d8e:	36b000ef          	jal	ra,30038f8 <SystemInit+0x130e>
    iconfig->iocmg_59.BIT.se = BASE_CFG_DISABLE;
 3002d92:	3c7000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002d96:	0ac7a423          	sw	a2,168(a5)
 3002d9a:	36d000ef          	jal	ra,3003906 <SystemInit+0x131c>
 3002d9e:	379000ef          	jal	ra,3003916 <SystemInit+0x132c>
    iconfig->iocmg_62.BIT.func = 0x1; /* 0x1 is APT4_PWMB */
 3002da2:	361000ef          	jal	ra,3003902 <SystemInit+0x1318>
    iconfig->iocmg_62.BIT.ds = IO_DRV_LEVEL2;
 3002da6:	391000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002daa:	359000ef          	jal	ra,3003902 <SystemInit+0x1318>
    iconfig->iocmg_62.BIT.pd = BASE_CFG_DISABLE;
 3002dae:	393000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002db2:	351000ef          	jal	ra,3003902 <SystemInit+0x1318>
    iconfig->iocmg_62.BIT.pu = BASE_CFG_DISABLE;
 3002db6:	391000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002dba:	349000ef          	jal	ra,3003902 <SystemInit+0x1318>
    iconfig->iocmg_62.BIT.sr = IO_SPEED_SLOW;
 3002dbe:	38f000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002dc2:	341000ef          	jal	ra,3003902 <SystemInit+0x1318>
    iconfig->iocmg_62.BIT.se = BASE_CFG_DISABLE;
 3002dc6:	393000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002dca:	0ac7aa23          	sw	a2,180(a5)
 3002dce:	343000ef          	jal	ra,3003910 <SystemInit+0x1326>
 3002dd2:	345000ef          	jal	ra,3003916 <SystemInit+0x132c>
    iconfig->iocmg_60.BIT.func = 0x1; /* 0x1 is APT5_PWMA */
 3002dd6:	337000ef          	jal	ra,300390c <SystemInit+0x1322>
    iconfig->iocmg_60.BIT.ds = IO_DRV_LEVEL2;
 3002dda:	35d000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002dde:	32f000ef          	jal	ra,300390c <SystemInit+0x1322>
    iconfig->iocmg_60.BIT.pd = BASE_CFG_DISABLE;
 3002de2:	35f000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002de6:	327000ef          	jal	ra,300390c <SystemInit+0x1322>
    iconfig->iocmg_60.BIT.pu = BASE_CFG_DISABLE;
 3002dea:	35d000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002dee:	31f000ef          	jal	ra,300390c <SystemInit+0x1322>
    iconfig->iocmg_60.BIT.sr = IO_SPEED_SLOW;
 3002df2:	35b000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002df6:	317000ef          	jal	ra,300390c <SystemInit+0x1322>
    iconfig->iocmg_60.BIT.se = BASE_CFG_DISABLE;
 3002dfa:	35f000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002dfe:	0ac7a623          	sw	a2,172(a5)
 3002e02:	321000ef          	jal	ra,3003922 <SystemInit+0x1338>
 3002e06:	311000ef          	jal	ra,3003916 <SystemInit+0x132c>
    iconfig->iocmg_63.BIT.func = 0x1; /* 0x1 is APT5_PWMB */
 3002e0a:	315000ef          	jal	ra,300391e <SystemInit+0x1334>
    iconfig->iocmg_63.BIT.ds = IO_DRV_LEVEL2;
 3002e0e:	329000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002e12:	30d000ef          	jal	ra,300391e <SystemInit+0x1334>
    iconfig->iocmg_63.BIT.pd = BASE_CFG_DISABLE;
 3002e16:	32b000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002e1a:	305000ef          	jal	ra,300391e <SystemInit+0x1334>
    iconfig->iocmg_63.BIT.pu = BASE_CFG_DISABLE;
 3002e1e:	329000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002e22:	2fd000ef          	jal	ra,300391e <SystemInit+0x1334>
    iconfig->iocmg_63.BIT.sr = IO_SPEED_SLOW;
 3002e26:	327000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002e2a:	2f5000ef          	jal	ra,300391e <SystemInit+0x1334>
    iconfig->iocmg_63.BIT.se = BASE_CFG_DISABLE;
 3002e2e:	32b000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002e32:	0ac7ac23          	sw	a2,184(a5)
    iconfig->iocmg_67.BIT.func = 0x8; /* 0x8 is ADC2_ANA_A4 */
 3002e36:	46d0                	lw	a2,12(a3)
 3002e38:	2f7000ef          	jal	ra,300392e <SystemInit+0x1344>
 3002e3c:	2ed000ef          	jal	ra,3003928 <SystemInit+0x133e>
    iconfig->iocmg_67.BIT.ds = IO_DRV_LEVEL2;
 3002e40:	2f7000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002e44:	2e5000ef          	jal	ra,3003928 <SystemInit+0x133e>
    iconfig->iocmg_67.BIT.pd = BASE_CFG_DISABLE;
 3002e48:	2f9000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002e4c:	2dd000ef          	jal	ra,3003928 <SystemInit+0x133e>
    iconfig->iocmg_67.BIT.pu = BASE_CFG_DISABLE;
 3002e50:	2f7000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002e54:	2d5000ef          	jal	ra,3003928 <SystemInit+0x133e>
    iconfig->iocmg_67.BIT.sr = IO_SPEED_SLOW;
 3002e58:	2f5000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002e5c:	2cd000ef          	jal	ra,3003928 <SystemInit+0x133e>
    iconfig->iocmg_67.BIT.se = BASE_CFG_DISABLE;
 3002e60:	2f9000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002e64:	c6d0                	sw	a2,12(a3)
    iconfig->iocmg_66.BIT.func = 0x8; /* 0x8 is ADC2_ANA_A3 */
 3002e66:	4690                	lw	a2,8(a3)
 3002e68:	2c7000ef          	jal	ra,300392e <SystemInit+0x1344>
 3002e6c:	2e7000ef          	jal	ra,3003952 <SystemInit+0x1368>
    iconfig->iocmg_66.BIT.ds = IO_DRV_LEVEL2;
 3002e70:	2c7000ef          	jal	ra,3003936 <SystemInit+0x134c>
 3002e74:	2df000ef          	jal	ra,3003952 <SystemInit+0x1368>
    iconfig->iocmg_66.BIT.pd = BASE_CFG_DISABLE;
 3002e78:	2c9000ef          	jal	ra,3003940 <SystemInit+0x1356>
 3002e7c:	2d7000ef          	jal	ra,3003952 <SystemInit+0x1368>
    iconfig->iocmg_66.BIT.pu = BASE_CFG_DISABLE;
 3002e80:	2c7000ef          	jal	ra,3003946 <SystemInit+0x135c>
 3002e84:	2cf000ef          	jal	ra,3003952 <SystemInit+0x1368>
    iconfig->iocmg_66.BIT.sr = IO_SPEED_SLOW;
 3002e88:	2c5000ef          	jal	ra,300394c <SystemInit+0x1362>
 3002e8c:	2c7000ef          	jal	ra,3003952 <SystemInit+0x1368>
    iconfig->iocmg_66.BIT.se = BASE_CFG_DISABLE;
 3002e90:	2c9000ef          	jal	ra,3003958 <SystemInit+0x136e>
 3002e94:	c690                	sw	a2,8(a3)
    iconfig->iocmg_6.BIT.func = 0x4; /* 0x4 is UART0_TXD */
 3002e96:	4354                	lw	a3,4(a4)
 3002e98:	9ac1                	andi	a3,a3,-16
 3002e9a:	0046e693          	ori	a3,a3,4
 3002e9e:	2c1000ef          	jal	ra,300395e <SystemInit+0x1374>
    iconfig->iocmg_6.BIT.ds = IO_DRV_LEVEL2;
 3002ea2:	2c9000ef          	jal	ra,300396a <SystemInit+0x1380>
 3002ea6:	2b9000ef          	jal	ra,300395e <SystemInit+0x1374>
    iconfig->iocmg_6.BIT.pd = BASE_CFG_DISABLE;
 3002eaa:	2cb000ef          	jal	ra,3003974 <SystemInit+0x138a>
 3002eae:	2b1000ef          	jal	ra,300395e <SystemInit+0x1374>
    iconfig->iocmg_6.BIT.pu = BASE_CFG_DISABLE;
 3002eb2:	2c9000ef          	jal	ra,300397a <SystemInit+0x1390>
 3002eb6:	2a9000ef          	jal	ra,300395e <SystemInit+0x1374>
    iconfig->iocmg_6.BIT.sr = IO_SPEED_SLOW;
 3002eba:	2cd000ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002ebe:	2a1000ef          	jal	ra,300395e <SystemInit+0x1374>
    iconfig->iocmg_6.BIT.se = BASE_CFG_DISABLE;
 3002ec2:	2a3000ef          	jal	ra,3003964 <SystemInit+0x137a>
 3002ec6:	c354                	sw	a3,4(a4)
    iconfig->iocmg_7.BIT.func = 0x4; /* 0x4 is UART0_RXD */
 3002ec8:	4714                	lw	a3,8(a4)
 3002eca:	9ac1                	andi	a3,a3,-16
 3002ecc:	0046e693          	ori	a3,a3,4
 3002ed0:	2b1000ef          	jal	ra,3003980 <SystemInit+0x1396>
    iconfig->iocmg_7.BIT.ds = IO_DRV_LEVEL2;
 3002ed4:	297000ef          	jal	ra,300396a <SystemInit+0x1380>
 3002ed8:	2a9000ef          	jal	ra,3003980 <SystemInit+0x1396>
    iconfig->iocmg_7.BIT.pd = BASE_CFG_DISABLE;
 3002edc:	299000ef          	jal	ra,3003974 <SystemInit+0x138a>
 3002ee0:	2a1000ef          	jal	ra,3003980 <SystemInit+0x1396>
    iconfig->iocmg_7.BIT.pu = BASE_CFG_DISABLE;
 3002ee4:	297000ef          	jal	ra,300397a <SystemInit+0x1390>
 3002ee8:	299000ef          	jal	ra,3003980 <SystemInit+0x1396>
    iconfig->iocmg_7.BIT.sr = IO_SPEED_SLOW;
 3002eec:	29b000ef          	jal	ra,3003986 <SystemInit+0x139c>
 3002ef0:	291000ef          	jal	ra,3003980 <SystemInit+0x1396>
    iconfig->iocmg_7.BIT.se = BASE_CFG_DISABLE;
 3002ef4:	271000ef          	jal	ra,3003964 <SystemInit+0x137a>
 3002ef8:	c714                	sw	a3,8(a4)
 3002efa:	297000ef          	jal	ra,3003990 <SystemInit+0x13a6>
    iconfig->iocmg_51.BIT.func = 0x3; /* 0x3 is UART2_TXD */
 3002efe:	9b41                	andi	a4,a4,-16
 3002f00:	00376713          	ori	a4,a4,3
 3002f04:	289000ef          	jal	ra,300398c <SystemInit+0x13a2>
    iconfig->iocmg_51.BIT.ds = IO_DRV_LEVEL2;
 3002f08:	0e9000ef          	jal	ra,30037f0 <SystemInit+0x1206>
 3002f0c:	281000ef          	jal	ra,300398c <SystemInit+0x13a2>
 3002f10:	0eb000ef          	jal	ra,30037fa <SystemInit+0x1210>
    iconfig->iocmg_51.BIT.pd = BASE_CFG_DISABLE;
 3002f14:	279000ef          	jal	ra,300398c <SystemInit+0x13a2>
 3002f18:	0e9000ef          	jal	ra,3003800 <SystemInit+0x1216>
    iconfig->iocmg_51.BIT.pu = BASE_CFG_DISABLE;
 3002f1c:	271000ef          	jal	ra,300398c <SystemInit+0x13a2>
 3002f20:	0e7000ef          	jal	ra,3003806 <SystemInit+0x121c>
    iconfig->iocmg_51.BIT.sr = IO_SPEED_SLOW;
 3002f24:	269000ef          	jal	ra,300398c <SystemInit+0x13a2>
 3002f28:	0ef000ef          	jal	ra,3003816 <SystemInit+0x122c>
    iconfig->iocmg_51.BIT.se = BASE_CFG_DISABLE;
 3002f2c:	08e7a423          	sw	a4,136(a5)
 3002f30:	26b000ef          	jal	ra,300399a <SystemInit+0x13b0>
    iconfig->iocmg_52.BIT.func = 0x3; /* 0x3 is UART2_RXD */
 3002f34:	9b41                	andi	a4,a4,-16
 3002f36:	00376713          	ori	a4,a4,3
 3002f3a:	25d000ef          	jal	ra,3003996 <SystemInit+0x13ac>
    iconfig->iocmg_52.BIT.ds = IO_DRV_LEVEL2;
 3002f3e:	0b3000ef          	jal	ra,30037f0 <SystemInit+0x1206>
 3002f42:	255000ef          	jal	ra,3003996 <SystemInit+0x13ac>
 3002f46:	0b5000ef          	jal	ra,30037fa <SystemInit+0x1210>
    iconfig->iocmg_52.BIT.pd = BASE_CFG_DISABLE;
 3002f4a:	24d000ef          	jal	ra,3003996 <SystemInit+0x13ac>
 3002f4e:	0b3000ef          	jal	ra,3003800 <SystemInit+0x1216>
    iconfig->iocmg_52.BIT.pu = BASE_CFG_DISABLE;
 3002f52:	245000ef          	jal	ra,3003996 <SystemInit+0x13ac>
 3002f56:	0b1000ef          	jal	ra,3003806 <SystemInit+0x121c>
    iconfig->iocmg_52.BIT.sr = IO_SPEED_SLOW;
 3002f5a:	23d000ef          	jal	ra,3003996 <SystemInit+0x13ac>
 3002f5e:	0b9000ef          	jal	ra,3003816 <SystemInit+0x122c>
    iconfig->iocmg_52.BIT.se = BASE_CFG_DISABLE;
 3002f62:	08e7a623          	sw	a4,140(a5)
    HAL_CRG_IpEnableSet(UART0_BASE, IP_CLK_ENABLE);
 3002f66:	4585                	li	a1,1
 3002f68:	14000537          	lui	a0,0x14000
 3002f6c:	317000ef          	jal	ra,3003a82 <SystemInit+0x1498>
    HAL_CRG_IpClkSelectSet(UART0_BASE, CRG_PLL_NO_PREDV);
 3002f70:	4581                	li	a1,0
 3002f72:	14000537          	lui	a0,0x14000
 3002f76:	2d7000ef          	jal	ra,3003a4c <SystemInit+0x1462>
    g_uart0.baseAddress = UART0;
 3002f7a:	57418513          	addi	a0,gp,1396 # 4000bc8 <g_uart0>
 3002f7e:	140007b7          	lui	a5,0x14000
 3002f82:	c11c                	sw	a5,0(a0)
    g_uart0.baudRate = UART0_BAND_RATE;
 3002f84:	0001 c200 041f      	l.li	s0,0x1c200
    g_uart0.irqNum = IRQ_UART0;
 3002f8a:	47f1                	li	a5,28
    g_uart0.dataLength = UART_DATALENGTH_8BIT;
 3002f8c:	4c0d                	li	s8,3
    g_uart0.stopBits = UART_STOPBITS_ONE;
 3002f8e:	4481                	li	s1,0
    g_uart0.irqNum = IRQ_UART0;
 3002f90:	c97c                	sw	a5,84(a0)
    g_uart0.baudRate = UART0_BAND_RATE;
 3002f92:	c140                	sw	s0,4(a0)
    g_uart0.dataLength = UART_DATALENGTH_8BIT;
 3002f94:	01852423          	sw	s8,8(a0) # 14000008 <RAM_END+0xfffc008>
    g_uart0.stopBits = UART_STOPBITS_ONE;
 3002f98:	c544                	sw	s1,12(a0)
    g_uart0.parity = UART_PARITY_NONE;
 3002f9a:	4a09                	li	s4,2
 3002f9c:	205000ef          	jal	ra,30039a0 <SystemInit+0x13b6>
    g_uart0.fifoMode = BASE_CFG_ENABLE;
 3002fa0:	4a85                	li	s5,1
 3002fa2:	209000ef          	jal	ra,30039aa <SystemInit+0x13c0>
    HAL_CRG_IpEnableSet(UART2_BASE, IP_CLK_ENABLE);
 3002fa6:	14002537          	lui	a0,0x14002
 3002faa:	4585                	li	a1,1
 3002fac:	2d7000ef          	jal	ra,3003a82 <SystemInit+0x1498>
    HAL_CRG_IpClkSelectSet(UART2_BASE, CRG_PLL_NO_PREDV);
 3002fb0:	14002537          	lui	a0,0x14002
 3002fb4:	297000ef          	jal	ra,3003a4a <SystemInit+0x1460>
    g_uart2.baseAddress = UART2;
 3002fb8:	5e418513          	addi	a0,gp,1508 # 4000c38 <g_uart2>
 3002fbc:	140027b7          	lui	a5,0x14002
 3002fc0:	c11c                	sw	a5,0(a0)
    g_uart2.irqNum = IRQ_UART2;
 3002fc2:	47f9                	li	a5,30
 3002fc4:	c97c                	sw	a5,84(a0)
    g_uart2.baudRate = UART2_BAND_RATE;
 3002fc6:	c140                	sw	s0,4(a0)
    g_uart2.dataLength = UART_DATALENGTH_8BIT;
 3002fc8:	01852423          	sw	s8,8(a0) # 14002008 <RAM_END+0xfffe008>
    g_uart2.stopBits = UART_STOPBITS_ONE;
 3002fcc:	c544                	sw	s1,12(a0)
 3002fce:	1d3000ef          	jal	ra,30039a0 <SystemInit+0x13b6>
    g_uart2.rxMode = UART_MODE_BLOCKING;
 3002fd2:	1d9000ef          	jal	ra,30039aa <SystemInit+0x13c0>
    HAL_CRG_IpEnableSet(ACMP1_BASE, BASE_CFG_ENABLE);
 3002fd6:	18301437          	lui	s0,0x18301
 3002fda:	4585                	li	a1,1
 3002fdc:	00840513          	addi	a0,s0,8 # 18301008 <RAM_END+0x142fd008>
 3002fe0:	2a3000ef          	jal	ra,3003a82 <SystemInit+0x1498>
    g_acmp1.baseAddress =  ACMP1_BASE;
 3002fe4:	e8818513          	addi	a0,gp,-376 # 40004dc <g_acmp1>
    g_acmp1.inOutConfig.vinNNum = ACMP_VIN_MUX2;
 3002fe8:	4c91                	li	s9,4
    g_acmp1.baseAddress =  ACMP1_BASE;
 3002fea:	00840793          	addi	a5,s0,8
 3002fee:	c11c                	sw	a5,0(a0)
    g_acmp1.enable = true;
 3002ff0:	035505a3          	sb	s5,43(a0)
    g_acmp1.syncEn = false;
 3002ff4:	02050523          	sb	zero,42(a0)
    g_acmp1.inOutConfig.vinNNum = ACMP_VIN_MUX2;
 3002ff8:	01952e23          	sw	s9,28(a0)
    g_acmp1.inOutConfig.vinPNum = ACMP_VIN_MUX2;
 3002ffc:	01952c23          	sw	s9,24(a0)
    g_acmp1.inOutConfig.swVinPNum = ACMP_SW_VIN2;
 3003000:	03952023          	sw	s9,32(a0)
    g_acmp1.inOutConfig.swVinNNum = ACMP_SW_VIN2;
 3003004:	03952223          	sw	s9,36(a0)
    g_acmp1.inOutConfig.polarity = ACMP_OUT_NOT_INVERT;
 3003008:	c944                	sw	s1,20(a0)
    g_acmp1.filterCtrl.filterMode = ACMP_FILTER_NONE;
 300300a:	c144                	sw	s1,4(a0)
    g_acmp1.hysteresisVol = 0; /* 0: without hysteresis */
 300300c:	b506                	sh	s1,40(a0)
    HAL_ACMP_Init(&g_acmp1);
 300300e:	c75fd0ef          	jal	ra,3000c82 <HAL_ACMP_Init>
    HAL_CRG_IpEnableSet(APT0_BASE, IP_CLK_ENABLE);
 3003012:	14a00537          	lui	a0,0x14a00
 3003016:	4585                	li	a1,1
 3003018:	26b000ef          	jal	ra,3003a82 <SystemInit+0x1498>
    g_apt0.baseAddress = APT0;
 300301c:	09418913          	addi	s2,gp,148 # 40006e8 <g_apt0>
 3003020:	14a007b7          	lui	a5,0x14a00
 3003024:	00f92023          	sw	a5,0(s2)
    g_apt0.irqNumEvt = IRQ_APT0_EVT;
 3003028:	03000793          	li	a5,48
 300302c:	04f92c23          	sw	a5,88(s2)
    g_apt0.irqNumTmr = IRQ_APT0_TMR;
 3003030:	03100793          	li	a5,49
 3003034:	04f92e23          	sw	a5,92(s2)
    g_apt0.waveform.cntInitVal = 0;
 3003038:	0c3517b7          	lui	a5,0xc351
 300303c:	c3578693          	addi	a3,a5,-971 # c350c35 <RAM_END+0x834cc35>
    g_apt0.adcTrg.trgScaleSOCA = 1;
 3003040:	1869 0001 079f      	l.li	a5,0x18690001
    g_apt0.waveform.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 3003046:	4405                	li	s0,1
    g_apt0.adcTrg.trgScaleSOCA = 1;
 3003048:	02f92a23          	sw	a5,52(s2)
    g_apt0.adcTrg.trgScaleSOCB = 1;
 300304c:	67c1                	lui	a5,0x10
    g_apt0.waveform.dividerFactor = 1 - 1;
 300304e:	186a0bb7          	lui	s7,0x186a0
    g_apt0.waveform.cntInitVal = 0;
 3003052:	00d92e23          	sw	a3,28(s2)
    g_apt0.waveform.deadBandCnt = 200;
 3003056:	0c800c13          	li	s8,200
    g_apt0.adcTrg.trgSrcSOCB = APT_CS_SRC_CNTR_CMPB_DOWN;
 300305a:	469d                	li	a3,7
    g_apt0.adcTrg.trgScaleSOCB = 1;
 300305c:	97a2                	add	a5,a5,s0
    g_apt0.waveform.cntMode = APT_COUNT_MODE_UP_DOWN;
 300305e:	01492823          	sw	s4,16(s2)
    g_apt0.waveform.basicType = APT_PWM_BASIC_A_HIGH_B_LOW;
 3003062:	00992223          	sw	s1,4(s2)
    g_apt0.waveform.chAOutType = APT_PWM_OUT_BASIC_TYPE;
 3003066:	00992423          	sw	s1,8(s2)
    g_apt0.waveform.chBOutType = APT_PWM_OUT_BASIC_TYPE;
 300306a:	00992623          	sw	s1,12(s2)
    g_apt0.waveform.dividerFactor = 1 - 1;
 300306e:	01792a23          	sw	s7,20(s2)
    g_apt0.waveform.timerPeriod = 6250;
 3003072:	00992c23          	sw	s1,24(s2)
    g_apt0.waveform.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 3003076:	02892023          	sw	s0,32(s2)
    g_apt0.waveform.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO;
 300307a:	02892223          	sw	s0,36(s2)
    g_apt0.waveform.deadBandCnt = 200;
 300307e:	03891423          	sh	s8,40(s2)
    g_apt0.adcTrg.trgEnSOCA = BASE_CFG_ENABLE;
 3003082:	02890623          	sb	s0,44(s2)
    g_apt0.adcTrg.trgSrcSOCA = APT_CS_SRC_CNTR_CMPA_UP;
 3003086:	03992823          	sw	s9,48(s2)
    g_apt0.adcTrg.trgEnSOCB = BASE_CFG_ENABLE;
 300308a:	03590c23          	sb	s5,56(s2)
    g_apt0.adcTrg.trgSrcSOCB = APT_CS_SRC_CNTR_CMPB_DOWN;
 300308e:	02d92e23          	sw	a3,60(s2)
    g_apt0.adcTrg.trgScaleSOCB = 1;
 3003092:	04f92023          	sw	a5,64(s2)
    g_apt0.adcTrg.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 3003096:	04892223          	sw	s0,68(s2)
    g_apt0.adcTrg.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO;
 300309a:	04892423          	sw	s0,72(s2)
    g_apt0.tmrInterrupt.tmrInterruptEn = BASE_CFG_ENABLE;
 300309e:	05590623          	sb	s5,76(s2)
    g_apt0.tmrInterrupt.tmrInterruptSrc = APT_INT_SRC_CNTR_ZERO;
 30030a2:	04892823          	sw	s0,80(s2)
    g_apt0.tmrInterrupt.tmrInterruptScale = 1;
 30030a6:	04891a23          	sh	s0,84(s2)
    APT_OutCtrlProtectEx protectApt = {0};
 30030aa:	02400d13          	li	s10,36
 30030ae:	143000ef          	jal	ra,30039f0 <SystemInit+0x1406>
    protectApt.ocEventEnEx = BASE_CFG_ENABLE;
 30030b2:	01510e23          	sb	s5,28(sp)
 30030b6:	107000ef          	jal	ra,30039bc <SystemInit+0x13d2>
    protectApt.originalEvtEx = APT_EM_ORIGINAL_SRC_ACMP1;
 30030ba:	49c1                	li	s3,16
    protectApt.ocSysEvent = APT_SYS_EVT_DEBUG | APT_SYS_EVT_CLK | APT_SYS_EVT_MEM;
 30030bc:	07000d93          	li	s11,112
    protectApt.ocEvtInterruptEnEx = BASE_CFG_ENABLE;
 30030c0:	03510623          	sb	s5,44(sp)
    protectApt.ocSysEvent = APT_SYS_EVT_DEBUG | APT_SYS_EVT_CLK | APT_SYS_EVT_MEM;
 30030c4:	d86e                	sw	s11,48(sp)
    protectApt.originalEvtEx = APT_EM_ORIGINAL_SRC_ACMP1;
 30030c6:	da4e                	sw	s3,52(sp)
    protectApt.evtPolarityMaskEx = APT_EM_ACMP1_INVERT_BIT;
 30030c8:	dc4e                	sw	s3,56(sp)
    HAL_APT_ProtectInitEx(&g_apt0, &protectApt);
 30030ca:	086c                	addi	a1,sp,28
 30030cc:	854a                	mv	a0,s2
 30030ce:	105000ef          	jal	ra,30039d2 <SystemInit+0x13e8>
    HAL_APT_PWMInit(&g_apt0);
 30030d2:	854a                	mv	a0,s2
 30030d4:	125000ef          	jal	ra,30039f8 <SystemInit+0x140e>
    HAL_APT_RegisterCallBack(&g_apt0, APT_EVENT_INTERRUPT, APT0EventCallback);
 30030d8:	0300 25b6 061f      	l.li	a2,0x30025b6
 30030de:	85a2                	mv	a1,s0
 30030e0:	854a                	mv	a0,s2
 30030e2:	11d000ef          	jal	ra,30039fe <SystemInit+0x1414>
    IRQ_SetPriority(g_apt0.irqNumEvt, 7);
 30030e6:	459d                	li	a1,7
 30030e8:	05892503          	lw	a0,88(s2)
 30030ec:	18b000ef          	jal	ra,3003a76 <SystemInit+0x148c>
    HAL_APT_IRQService(&g_apt0);
 30030f0:	854a                	mv	a0,s2
 30030f2:	0e7000ef          	jal	ra,30039d8 <SystemInit+0x13ee>
    IRQ_EnableN(g_apt0.irqNumEvt);
 30030f6:	05892503          	lw	a0,88(s2)
 30030fa:	183000ef          	jal	ra,3003a7c <SystemInit+0x1492>
    HAL_APT_RegisterCallBack(&g_apt0, APT_TIMER_INTERRUPT, APT0TimerCallback);
 30030fe:	0300 25b8 061f      	l.li	a2,0x30025b8
 3003104:	4581                	li	a1,0
 3003106:	854a                	mv	a0,s2
 3003108:	0f7000ef          	jal	ra,30039fe <SystemInit+0x1414>
    IRQ_SetPriority(g_apt0.irqNumTmr, 5);
 300310c:	4595                	li	a1,5
 300310e:	05c92503          	lw	a0,92(s2)
 3003112:	165000ef          	jal	ra,3003a76 <SystemInit+0x148c>
    HAL_APT_IRQService(&g_apt0);
 3003116:	854a                	mv	a0,s2
 3003118:	0c1000ef          	jal	ra,30039d8 <SystemInit+0x13ee>
    IRQ_EnableN(g_apt0.irqNumTmr);
 300311c:	05c92503          	lw	a0,92(s2)
 3003120:	15d000ef          	jal	ra,3003a7c <SystemInit+0x1492>
    HAL_CRG_IpEnableSet(APT1_BASE, IP_CLK_ENABLE);
 3003124:	14a01537          	lui	a0,0x14a01
 3003128:	159000ef          	jal	ra,3003a80 <SystemInit+0x1496>
    g_apt1.baseAddress = APT1;
 300312c:	0fc18b13          	addi	s6,gp,252 # 4000750 <g_apt1>
 3003130:	14a017b7          	lui	a5,0x14a01
 3003134:	00fb2023          	sw	a5,0(s6)
    g_apt1.waveform.cntInitVal = 0;
 3003138:	0c351737          	lui	a4,0xc351
    g_apt1.irqNumEvt = IRQ_APT1_EVT;
 300313c:	03200793          	li	a5,50
 3003140:	04fb2c23          	sw	a5,88(s6)
    g_apt1.waveform.cntInitVal = 0;
 3003144:	c3570613          	addi	a2,a4,-971 # c350c35 <RAM_END+0x834cc35>
    g_apt1.irqNumTmr = IRQ_APT1_TMR;
 3003148:	03300793          	li	a5,51
 300314c:	04fb2e23          	sw	a5,92(s6)
    g_apt1.waveform.cntMode = APT_COUNT_MODE_UP_DOWN;
 3003150:	014b2823          	sw	s4,16(s6)
    g_apt1.waveform.basicType = APT_PWM_BASIC_A_HIGH_B_LOW;
 3003154:	009b2223          	sw	s1,4(s6)
    g_apt1.waveform.chAOutType = APT_PWM_OUT_BASIC_TYPE;
 3003158:	009b2423          	sw	s1,8(s6)
    g_apt1.waveform.chBOutType = APT_PWM_OUT_BASIC_TYPE;
 300315c:	009b2623          	sw	s1,12(s6)
    g_apt1.waveform.dividerFactor = 1 - 1;
 3003160:	017b2a23          	sw	s7,20(s6)
    g_apt1.waveform.timerPeriod = 6250;
 3003164:	009b2c23          	sw	s1,24(s6)
    g_apt1.waveform.cntInitVal = 0;
 3003168:	00cb2e23          	sw	a2,28(s6)
    g_apt1.waveform.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 300316c:	028b2023          	sw	s0,32(s6)
    g_apt1.waveform.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO;
 3003170:	028b2223          	sw	s0,36(s6)
    g_apt1.waveform.deadBandCnt = 200;
 3003174:	038b1423          	sh	s8,40(s6)
 3003178:	079000ef          	jal	ra,30039f0 <SystemInit+0x1406>
    HAL_APT_ProtectInitEx(&g_apt1, &protectApt);
 300317c:	855a                	mv	a0,s6
 300317e:	045000ef          	jal	ra,30039c2 <SystemInit+0x13d8>
    HAL_APT_PWMInit(&g_apt1);
 3003182:	855a                	mv	a0,s6
 3003184:	075000ef          	jal	ra,30039f8 <SystemInit+0x140e>
    HAL_CRG_IpEnableSet(APT2_BASE, IP_CLK_ENABLE);
 3003188:	14a02537          	lui	a0,0x14a02
 300318c:	0f5000ef          	jal	ra,3003a80 <SystemInit+0x1496>
    g_apt2.baseAddress = APT2;
 3003190:	16418b93          	addi	s7,gp,356 # 40007b8 <g_apt2>
 3003194:	14a027b7          	lui	a5,0x14a02
 3003198:	00fba023          	sw	a5,0(s7) # 186a0000 <RAM_END+0x1469c000>
    g_apt2.irqNumEvt = IRQ_APT2_EVT;
 300319c:	03400793          	li	a5,52
 30031a0:	04fbac23          	sw	a5,88(s7)
    g_apt2.irqNumTmr = IRQ_APT2_TMR;
 30031a4:	03500793          	li	a5,53
 30031a8:	04fbae23          	sw	a5,92(s7)
    g_apt2.waveform.cntInitVal = 0;
 30031ac:	0c351737          	lui	a4,0xc351
    g_apt2.waveform.dividerFactor = 1 - 1;
 30031b0:	186a07b7          	lui	a5,0x186a0
 30031b4:	00fbaa23          	sw	a5,20(s7)
    g_apt2.waveform.cntInitVal = 0;
 30031b8:	c3570793          	addi	a5,a4,-971 # c350c35 <RAM_END+0x834cc35>
    g_apt2.waveform.cntMode = APT_COUNT_MODE_UP_DOWN;
 30031bc:	014ba823          	sw	s4,16(s7)
    g_apt2.waveform.basicType = APT_PWM_BASIC_A_HIGH_B_LOW;
 30031c0:	009ba223          	sw	s1,4(s7)
    g_apt2.waveform.chAOutType = APT_PWM_OUT_BASIC_TYPE;
 30031c4:	009ba423          	sw	s1,8(s7)
    g_apt2.waveform.chBOutType = APT_PWM_OUT_BASIC_TYPE;
 30031c8:	009ba623          	sw	s1,12(s7)
    g_apt2.waveform.timerPeriod = 6250;
 30031cc:	009bac23          	sw	s1,24(s7)
    g_apt2.waveform.cntInitVal = 0;
 30031d0:	00fbae23          	sw	a5,28(s7)
    g_apt2.waveform.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 30031d4:	028ba023          	sw	s0,32(s7)
    g_apt2.waveform.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO;
 30031d8:	028ba223          	sw	s0,36(s7)
    g_apt2.waveform.deadBandCnt = 200;
 30031dc:	038b9423          	sh	s8,40(s7)
 30031e0:	011000ef          	jal	ra,30039f0 <SystemInit+0x1406>
    HAL_APT_ProtectInitEx(&g_apt2, &protectApt);
 30031e4:	855e                	mv	a0,s7
 30031e6:	7dc000ef          	jal	ra,30039c2 <SystemInit+0x13d8>
    HAL_APT_PWMInit(&g_apt2);
 30031ea:	855e                	mv	a0,s7
 30031ec:	00d000ef          	jal	ra,30039f8 <SystemInit+0x140e>
    HAL_CRG_IpEnableSet(APT3_BASE, IP_CLK_ENABLE);
 30031f0:	14a03537          	lui	a0,0x14a03
 30031f4:	08d000ef          	jal	ra,3003a80 <SystemInit+0x1496>
    g_apt3.baseAddress = APT3;
 30031f8:	1cc18993          	addi	s3,gp,460 # 4000820 <g_apt3>
 30031fc:	14a037b7          	lui	a5,0x14a03
 3003200:	00f9a023          	sw	a5,0(s3)
    g_apt3.irqNumEvt = IRQ_APT3_EVT;
 3003204:	03600793          	li	a5,54
 3003208:	04f9ac23          	sw	a5,88(s3)
    g_apt3.irqNumTmr = IRQ_APT3_TMR;
 300320c:	03700793          	li	a5,55
 3003210:	04f9ae23          	sw	a5,92(s3)
    g_apt3.waveform.dividerFactor = 1 - 1;
 3003214:	3e8007b7          	lui	a5,0x3e800
 3003218:	00f9aa23          	sw	a5,20(s3)
    g_apt3.waveform.cntInitVal = 0;
 300321c:	1f402637          	lui	a2,0x1f402
    g_apt3.adcTrg.trgSrcSOCA = APT_CS_SRC_CNTR_CMPA_DOWN;
 3003220:	4795                	li	a5,5
    g_apt3.waveform.cntInitVal = 0;
 3003222:	f4060513          	addi	a0,a2,-192 # 1f401f40 <RAM_END+0x1b3fdf40>
    g_apt3.adcTrg.trgSrcSOCA = APT_CS_SRC_CNTR_CMPA_DOWN;
 3003226:	02f9a823          	sw	a5,48(s3)
    g_apt3.adcTrg.trgScaleSOCA = 1;
 300322a:	2ee0 0001 079f      	l.li	a5,0x2ee00001
    g_apt3.waveform.cntInitVal = 0;
 3003230:	00a9ae23          	sw	a0,28(s3)
    g_apt3.waveform.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO | APT_COMPARE_LOAD_EVENT_PERIOD;
 3003234:	4c0d                	li	s8,3
    g_apt3.waveform.deadBandCnt = 300;
 3003236:	12c00513          	li	a0,300
    g_apt3.adcTrg.trgScaleSOCA = 1;
 300323a:	02f9aa23          	sw	a5,52(s3)
    g_apt3.adcTrg.trgSrcSOCB = APT_CS_SRC_CNTR_CMPB_DOWN;
 300323e:	469d                	li	a3,7
    g_apt3.adcTrg.trgScaleSOCB = 1;
 3003240:	0fa0 0001 079f      	l.li	a5,0xfa00001
    g_apt3.waveform.cntMode = APT_COUNT_MODE_UP_DOWN;
 3003246:	0149a823          	sw	s4,16(s3)
    g_apt3.waveform.basicType = APT_PWM_BASIC_A_HIGH_B_LOW;
 300324a:	0099a223          	sw	s1,4(s3)
    g_apt3.waveform.chAOutType = APT_PWM_OUT_BASIC_TYPE;
 300324e:	0099a423          	sw	s1,8(s3)
    g_apt3.waveform.chBOutType = APT_PWM_OUT_BASIC_TYPE;
 3003252:	0099a623          	sw	s1,12(s3)
    g_apt3.waveform.timerPeriod = 16000;
 3003256:	0099ac23          	sw	s1,24(s3)
    g_apt3.waveform.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 300325a:	0289a023          	sw	s0,32(s3)
    g_apt3.waveform.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO | APT_COMPARE_LOAD_EVENT_PERIOD;
 300325e:	0389a223          	sw	s8,36(s3)
    g_apt3.waveform.deadBandCnt = 300;
 3003262:	02a99423          	sh	a0,40(s3)
    g_apt3.adcTrg.trgEnSOCA = BASE_CFG_ENABLE;
 3003266:	03598623          	sb	s5,44(s3)
    g_apt3.adcTrg.trgEnSOCB = BASE_CFG_ENABLE;
 300326a:	03598c23          	sb	s5,56(s3)
    g_apt3.adcTrg.trgSrcSOCB = APT_CS_SRC_CNTR_CMPB_DOWN;
 300326e:	02d9ae23          	sw	a3,60(s3)
    g_apt3.adcTrg.trgScaleSOCB = 1;
 3003272:	04f9a023          	sw	a5,64(s3)
    g_apt3.adcTrg.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 3003276:	0489a223          	sw	s0,68(s3)
    g_apt3.adcTrg.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_PERIOD;
 300327a:	0549a423          	sw	s4,72(s3)
    g_apt3.tmrInterrupt.tmrInterruptEn = BASE_CFG_ENABLE;
 300327e:	05598623          	sb	s5,76(s3)
    g_apt3.tmrInterrupt.tmrInterruptSrc = APT_INT_SRC_CNTR_ZERO;
 3003282:	0489a823          	sw	s0,80(s3)
    g_apt3.tmrInterrupt.tmrInterruptScale = 1;
 3003286:	04899a23          	sh	s0,84(s3)
 300328a:	2f89                	jal	ra,30039dc <SystemInit+0x13f2>
    APT_OutCtrlProtectEx protectApt = {0};
 300328c:	27ad                	jal	ra,30039f6 <SystemInit+0x140c>
    protectApt.ocEventEnEx = BASE_CFG_ENABLE;
 300328e:	00810e23          	sb	s0,28(sp)
 3003292:	272d                	jal	ra,30039bc <SystemInit+0x13d2>
    protectApt.ocEvtInterruptEnEx = BASE_CFG_ENABLE;
 3003294:	02810623          	sb	s0,44(sp)
    HAL_APT_ProtectInitEx(&g_apt3, &protectApt);
 3003298:	086c                	addi	a1,sp,28
 300329a:	854e                	mv	a0,s3
 300329c:	27b1                	jal	ra,30039e8 <SystemInit+0x13fe>
 300329e:	2f15                	jal	ra,30039d2 <SystemInit+0x13e8>
    HAL_APT_PWMInit(&g_apt3);
 30032a0:	854e                	mv	a0,s3
 30032a2:	2f99                	jal	ra,30039f8 <SystemInit+0x140e>
    HAL_APT_RegisterCallBack(&g_apt3, APT_EVENT_INTERRUPT, APT3EventCallback);
 30032a4:	0300 25ba 061f      	l.li	a2,0x30025ba
 30032aa:	854e                	mv	a0,s3
 30032ac:	2f81                	jal	ra,30039fc <SystemInit+0x1412>
    IRQ_SetPriority(g_apt3.irqNumEvt, 7);
 30032ae:	0589a503          	lw	a0,88(s3)
 30032b2:	459d                	li	a1,7
 30032b4:	7c2000ef          	jal	ra,3003a76 <SystemInit+0x148c>
 30032b8:	2f39                	jal	ra,30039d6 <SystemInit+0x13ec>
    IRQ_EnableN(g_apt3.irqNumEvt);
 30032ba:	0589a503          	lw	a0,88(s3)
 30032be:	7be000ef          	jal	ra,3003a7c <SystemInit+0x1492>
    HAL_APT_RegisterCallBack(&g_apt3, APT_TIMER_INTERRUPT, APT3TimerCallback);
 30032c2:	0300 25bc 061f      	l.li	a2,0x30025bc
 30032c8:	854e                	mv	a0,s3
 30032ca:	4581                	li	a1,0
 30032cc:	2f0d                	jal	ra,30039fe <SystemInit+0x1414>
    IRQ_SetPriority(g_apt3.irqNumTmr, 4);
 30032ce:	05c9a503          	lw	a0,92(s3)
 30032d2:	85e6                	mv	a1,s9
 30032d4:	7a2000ef          	jal	ra,3003a76 <SystemInit+0x148c>
 30032d8:	2dfd                	jal	ra,30039d6 <SystemInit+0x13ec>
    IRQ_EnableN(g_apt3.irqNumTmr);
 30032da:	05c9a503          	lw	a0,92(s3)
 30032de:	79e000ef          	jal	ra,3003a7c <SystemInit+0x1492>
    HAL_CRG_IpEnableSet(APT4_BASE, IP_CLK_ENABLE);
 30032e2:	14a04537          	lui	a0,0x14a04
 30032e6:	79a000ef          	jal	ra,3003a80 <SystemInit+0x1496>
    g_apt4.baseAddress = APT4;
 30032ea:	23418a93          	addi	s5,gp,564 # 4000888 <g_apt4>
 30032ee:	14a047b7          	lui	a5,0x14a04
 30032f2:	00faa023          	sw	a5,0(s5)
    g_apt4.waveform.cntInitVal = 0;
 30032f6:	1f4025b7          	lui	a1,0x1f402
    g_apt4.irqNumEvt = IRQ_APT4_EVT;
 30032fa:	03800793          	li	a5,56
 30032fe:	04faac23          	sw	a5,88(s5)
    g_apt4.waveform.dividerFactor = 1 - 1;
 3003302:	3e800737          	lui	a4,0x3e800
    g_apt4.irqNumTmr = IRQ_APT4_TMR;
 3003306:	03900793          	li	a5,57
    g_apt4.waveform.cntInitVal = 0;
 300330a:	f4058813          	addi	a6,a1,-192 # 1f401f40 <RAM_END+0x1b3fdf40>
    g_apt4.waveform.deadBandCnt = 300;
 300330e:	12c00513          	li	a0,300
    g_apt4.irqNumTmr = IRQ_APT4_TMR;
 3003312:	04faae23          	sw	a5,92(s5)
    g_apt4.waveform.cntMode = APT_COUNT_MODE_UP_DOWN;
 3003316:	014aa823          	sw	s4,16(s5)
    g_apt4.waveform.basicType = APT_PWM_BASIC_A_HIGH_B_LOW;
 300331a:	009aa223          	sw	s1,4(s5)
    g_apt4.waveform.chAOutType = APT_PWM_OUT_BASIC_TYPE;
 300331e:	009aa423          	sw	s1,8(s5)
    g_apt4.waveform.chBOutType = APT_PWM_OUT_BASIC_TYPE;
 3003322:	009aa623          	sw	s1,12(s5)
    g_apt4.waveform.dividerFactor = 1 - 1;
 3003326:	00eaaa23          	sw	a4,20(s5)
    g_apt4.waveform.timerPeriod = 16000;
 300332a:	009aac23          	sw	s1,24(s5)
    g_apt4.waveform.cntInitVal = 0;
 300332e:	010aae23          	sw	a6,28(s5)
    g_apt4.waveform.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 3003332:	028aa023          	sw	s0,32(s5)
    g_apt4.waveform.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO | APT_COMPARE_LOAD_EVENT_PERIOD;
 3003336:	038aa223          	sw	s8,36(s5)
    g_apt4.waveform.deadBandCnt = 300;
 300333a:	02aa9423          	sh	a0,40(s5)
    g_apt4.tmrInterrupt.tmrInterruptEn = BASE_CFG_ENABLE;
 300333e:	048a8623          	sb	s0,76(s5)
    g_apt4.tmrInterrupt.tmrInterruptSrc = APT_INT_SRC_CNTR_PERIOD;
 3003342:	054aa823          	sw	s4,80(s5)
    g_apt4.tmrInterrupt.tmrInterruptScale = 1;
 3003346:	048a9a23          	sh	s0,84(s5)
 300334a:	2d49                	jal	ra,30039dc <SystemInit+0x13f2>
    APT_OutCtrlProtectEx protectApt = {0};
 300334c:	256d                	jal	ra,30039f6 <SystemInit+0x140c>
    protectApt.ocEventEnEx = BASE_CFG_ENABLE;
 300334e:	00810e23          	sb	s0,28(sp)
 3003352:	25ad                	jal	ra,30039bc <SystemInit+0x13d2>
    protectApt.ocActionEx = APT_OUT_CTRL_ACTION_LOW;
 3003354:	2d51                	jal	ra,30039e8 <SystemInit+0x13fe>
    HAL_APT_ProtectInitEx(&g_apt4, &protectApt);
 3003356:	01c10813          	addi	a6,sp,28
 300335a:	85c2                	mv	a1,a6
 300335c:	8556                	mv	a0,s5
 300335e:	2d95                	jal	ra,30039d2 <SystemInit+0x13e8>
    HAL_APT_PWMInit(&g_apt4);
 3003360:	8556                	mv	a0,s5
 3003362:	2d59                	jal	ra,30039f8 <SystemInit+0x140e>
    HAL_APT_RegisterCallBack(&g_apt4, APT_TIMER_INTERRUPT, APT4TimerCallback);
 3003364:	0300 25b2 061f      	l.li	a2,0x30025b2
 300336a:	8556                	mv	a0,s5
 300336c:	4581                	li	a1,0
 300336e:	2d41                	jal	ra,30039fe <SystemInit+0x1414>
    IRQ_SetPriority(g_apt4.irqNumTmr, 4);
 3003370:	05caa503          	lw	a0,92(s5)
 3003374:	85e6                	mv	a1,s9
 3003376:	2701                	jal	ra,3003a76 <SystemInit+0x148c>
    HAL_APT_IRQService(&g_apt4);
 3003378:	8556                	mv	a0,s5
 300337a:	2db9                	jal	ra,30039d8 <SystemInit+0x13ee>
    IRQ_EnableN(g_apt4.irqNumTmr);
 300337c:	05caa503          	lw	a0,92(s5)
 3003380:	2df5                	jal	ra,3003a7c <SystemInit+0x1492>
    HAL_CRG_IpEnableSet(APT5_BASE, IP_CLK_ENABLE);
 3003382:	14a05537          	lui	a0,0x14a05
 3003386:	2ded                	jal	ra,3003a80 <SystemInit+0x1496>
    g_apt5.baseAddress = APT5;
 3003388:	29c18c13          	addi	s8,gp,668 # 40008f0 <g_apt5>
 300338c:	14a057b7          	lui	a5,0x14a05
    g_apt5.waveform.dividerFactor = 1 - 1;
 3003390:	3e800637          	lui	a2,0x3e800
    g_apt5.baseAddress = APT5;
 3003394:	00fc2023          	sw	a5,0(s8)
    g_apt5.waveform.cntInitVal = 0;
 3003398:	1f4025b7          	lui	a1,0x1f402
    g_apt5.irqNumEvt = IRQ_APT5_EVT;
 300339c:	03a00793          	li	a5,58
 30033a0:	04fc2c23          	sw	a5,88(s8)
    g_apt5.waveform.dividerFactor = 1 - 1;
 30033a4:	00cc2a23          	sw	a2,20(s8)
    g_apt5.irqNumTmr = IRQ_APT5_TMR;
 30033a8:	03b00793          	li	a5,59
    g_apt5.waveform.cntInitVal = 0;
 30033ac:	f4058613          	addi	a2,a1,-192 # 1f401f40 <RAM_END+0x1b3fdf40>
    g_apt5.waveform.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO | APT_COMPARE_LOAD_EVENT_PERIOD;
 30033b0:	470d                	li	a4,3
    g_apt5.waveform.deadBandCnt = 300;
 30033b2:	12c00513          	li	a0,300
    g_apt5.irqNumTmr = IRQ_APT5_TMR;
 30033b6:	04fc2e23          	sw	a5,92(s8)
    g_apt5.waveform.cntMode = APT_COUNT_MODE_UP_DOWN;
 30033ba:	014c2823          	sw	s4,16(s8)
    g_apt5.waveform.basicType = APT_PWM_BASIC_A_HIGH_B_LOW;
 30033be:	009c2223          	sw	s1,4(s8)
    g_apt5.waveform.chAOutType = APT_PWM_OUT_BASIC_TYPE;
 30033c2:	009c2423          	sw	s1,8(s8)
    g_apt5.waveform.chBOutType = APT_PWM_OUT_BASIC_TYPE;
 30033c6:	009c2623          	sw	s1,12(s8)
    g_apt5.waveform.timerPeriod = 16000;
 30033ca:	009c2c23          	sw	s1,24(s8)
    g_apt5.waveform.cntInitVal = 0;
 30033ce:	00cc2e23          	sw	a2,28(s8)
    g_apt5.waveform.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 30033d2:	028c2023          	sw	s0,32(s8)
    g_apt5.waveform.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO | APT_COMPARE_LOAD_EVENT_PERIOD;
 30033d6:	02ec2223          	sw	a4,36(s8)
    g_apt5.waveform.deadBandCnt = 300;
 30033da:	02ac1423          	sh	a0,40(s8)
 30033de:	2d09                	jal	ra,30039f0 <SystemInit+0x1406>
    protectApt.ocEventEnEx = BASE_CFG_ENABLE;
 30033e0:	00810e23          	sb	s0,28(sp)
 30033e4:	2be1                	jal	ra,30039bc <SystemInit+0x13d2>
    HAL_APT_ProtectInitEx(&g_apt5, &protectApt);
 30033e6:	8562                	mv	a0,s8
 30033e8:	086c                	addi	a1,sp,28
 30033ea:	2bfd                	jal	ra,30039e8 <SystemInit+0x13fe>
 30033ec:	23dd                	jal	ra,30039d2 <SystemInit+0x13e8>
    HAL_APT_PWMInit(&g_apt5);
 30033ee:	8562                	mv	a0,s8
 30033f0:	2521                	jal	ra,30039f8 <SystemInit+0x140e>
    HAL_CRG_IpEnableSet(APT8_BASE, IP_CLK_ENABLE);
 30033f2:	14a08537          	lui	a0,0x14a08
 30033f6:	2569                	jal	ra,3003a80 <SystemInit+0x1496>
    g_apt8.baseAddress = APT8;
 30033f8:	30418493          	addi	s1,gp,772 # 4000958 <g_apt8>
 30033fc:	14a087b7          	lui	a5,0x14a08
 3003400:	c09c                	sw	a5,0(s1)
    g_apt8.irqNumEvt = IRQ_APT8_EVT;
 3003402:	04000793          	li	a5,64
 3003406:	ccbc                	sw	a5,88(s1)
    g_apt8.irqNumTmr = IRQ_APT8_TMR;
 3003408:	04100793          	li	a5,65
 300340c:	ccfc                	sw	a5,92(s1)
    g_apt8.waveform.cntMode = APT_COUNT_MODE_UP;
 300340e:	4a01                	li	s4,0
 3003410:	2dad                	jal	ra,3003a8a <SystemInit+0x14a0>
    g_apt8.waveform.dividerFactor = 1 - 1;
 3003412:	138807b7          	lui	a5,0x13880
 3003416:	c8dc                	sw	a5,20(s1)
    g_apt8.adcTrg.trgScaleSOCA = 1;
 3003418:	04e2 0001 079f      	l.li	a5,0x4e20001
 300341e:	d8dc                	sw	a5,52(s1)
    g_apt8.adcTrg.trgSrcSOCB = APT_CS_SRC_CNTR_CMPB_UP;
 3003420:	4719                	li	a4,6
    g_apt8.adcTrg.trgScaleSOCB = 1;
 3003422:	0ea6 0001 079f      	l.li	a5,0xea60001
    g_apt8.waveform.basicType = APT_PWM_BASIC_A_LOW_B_HIGH;
 3003428:	c0c0                	sw	s0,4(s1)
    g_apt8.waveform.chAOutType = APT_PWM_OUT_BASIC_TYPE;
 300342a:	0144a423          	sw	s4,8(s1)
    g_apt8.waveform.chBOutType = APT_PWM_OUT_BASIC_TYPE;
 300342e:	0144a623          	sw	s4,12(s1)
    g_apt8.waveform.timerPeriod = 5000;
 3003432:	0144ac23          	sw	s4,24(s1)
    g_apt8.waveform.cntInitVal = 0;
 3003436:	0144ae23          	sw	s4,28(s1)
    g_apt8.waveform.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 300343a:	d080                	sw	s0,32(s1)
    g_apt8.waveform.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO;
 300343c:	d0c0                	sw	s0,36(s1)
    g_apt8.waveform.deadBandCnt = 0;
 300343e:	03449423          	sh	s4,40(s1)
    g_apt8.adcTrg.trgEnSOCA = BASE_CFG_ENABLE;
 3003442:	02848623          	sb	s0,44(s1)
    g_apt8.adcTrg.trgSrcSOCA = APT_CS_SRC_CNTR_CMPA_UP;
 3003446:	0394a823          	sw	s9,48(s1)
    g_apt8.adcTrg.trgEnSOCB = BASE_CFG_ENABLE;
 300344a:	02848c23          	sb	s0,56(s1)
    g_apt8.adcTrg.trgSrcSOCB = APT_CS_SRC_CNTR_CMPB_UP;
 300344e:	dcd8                	sw	a4,60(s1)
    g_apt8.adcTrg.trgScaleSOCB = 1;
 3003450:	c0bc                	sw	a5,64(s1)
    g_apt8.adcTrg.cntCmpLoadMode = APT_BUFFER_INDEPENDENT_LOAD;
 3003452:	c0e0                	sw	s0,68(s1)
    g_apt8.adcTrg.cntCmpLoadEvt = APT_COMPARE_LOAD_EVENT_ZERO;
 3003454:	c4a0                	sw	s0,72(s1)
 3003456:	2b69                	jal	ra,30039f0 <SystemInit+0x1406>
    protectApt.ocEventEnEx = BASE_CFG_ENABLE;
 3003458:	00810e23          	sb	s0,28(sp)
 300345c:	2385                	jal	ra,30039bc <SystemInit+0x13d2>
    protectApt.ocEvtInterruptEnEx = BASE_CFG_ENABLE;
 300345e:	02810623          	sb	s0,44(sp)
    protectApt.ocSysEvent = APT_SYS_EVT_DEBUG | APT_SYS_EVT_CLK | APT_SYS_EVT_MEM;
 3003462:	d86e                	sw	s11,48(sp)
    protectApt.originalEvtEx = APT_EM_ORIGINAL_SRC_POE0;
 3003464:	da22                	sw	s0,52(sp)
    protectApt.evtPolarityMaskEx = APT_EM_POE0_INVERT_BIT;
 3003466:	dc22                	sw	s0,56(sp)
    HAL_APT_ProtectInitEx(&g_apt8, &protectApt);
 3003468:	8526                	mv	a0,s1
 300346a:	239d                	jal	ra,30039d0 <SystemInit+0x13e6>
    HAL_APT_PWMInit(&g_apt8);
 300346c:	8526                	mv	a0,s1
 300346e:	2369                	jal	ra,30039f8 <SystemInit+0x140e>
    HAL_APT_RegisterCallBack(&g_apt8, APT_EVENT_INTERRUPT, APT8EventCallback);
 3003470:	0300 25aa 061f      	l.li	a2,0x30025aa
 3003476:	8526                	mv	a0,s1
 3003478:	2351                	jal	ra,30039fc <SystemInit+0x1412>
    IRQ_SetPriority(g_apt8.irqNumEvt, 7);
 300347a:	4ca8                	lw	a0,88(s1)
 300347c:	459d                	li	a1,7
 300347e:	2be5                	jal	ra,3003a76 <SystemInit+0x148c>
    HAL_APT_IRQService(&g_apt8);
 3003480:	8526                	mv	a0,s1
 3003482:	2b99                	jal	ra,30039d8 <SystemInit+0x13ee>
    IRQ_EnableN(g_apt8.irqNumEvt);
 3003484:	4ca8                	lw	a0,88(s1)
 3003486:	2bdd                	jal	ra,3003a7c <SystemInit+0x1492>
    HAL_CRG_IpEnableSet(ADC0_BASE, IP_CLK_ENABLE);
 3003488:	18000537          	lui	a0,0x18000
 300348c:	2bd5                	jal	ra,3003a80 <SystemInit+0x1496>
    HAL_CRG_IpClkSelectSet(ADC0_BASE, CRG_ADC_CLK_SELECT_PLL_DIV);
 300348e:	4589                	li	a1,2
 3003490:	18000537          	lui	a0,0x18000
 3003494:	2b65                	jal	ra,3003a4c <SystemInit+0x1462>
    HAL_CRG_IpClkDivSet(ADC0_BASE, CRG_ADC_DIV_5);
 3003496:	45a1                	li	a1,8
 3003498:	18000537          	lui	a0,0x18000
 300349c:	2b49                	jal	ra,3003a2e <SystemInit+0x1444>
    g_adc0.baseAddress = ADC0;
 300349e:	eb418493          	addi	s1,gp,-332 # 4000508 <g_adc0>
 30034a2:	180007b7          	lui	a5,0x18000
 30034a6:	c09c                	sw	a5,0(s1)
 30034a8:	2ba9                	jal	ra,3003a02 <SystemInit+0x1418>
    g_adc0.irqNumOver = IRQ_ADC0_OVINT;
 30034aa:	05c00793          	li	a5,92
 30034ae:	c89c                	sw	a5,16(s1)
    g_adc0.ADC_IntxParam[0].irqNum = IRQ_ADC0_INT1;     /* interrupt 0 */
 30034b0:	05d00793          	li	a5,93
 30034b4:	d0bc                	sw	a5,96(s1)
    g_adc0.ADC_IntxParam[1].irqNum = IRQ_ADC0_INT2;     /* interrupt 1 */
 30034b6:	05e00793          	li	a5,94
 30034ba:	d4bc                	sw	a5,104(s1)
    g_adc0.ADC_IntxParam[2].irqNum = IRQ_ADC0_INT3;     /* interrupt 2 */
 30034bc:	05f00793          	li	a5,95
 30034c0:	d8bc                	sw	a5,112(s1)
    g_adc0.ADC_IntxParam[3].irqNum = IRQ_ADC0_INT4;     /* interrupt 3 */
 30034c2:	06000793          	li	a5,96
 30034c6:	23b5                	jal	ra,3003a32 <SystemInit+0x1448>
    SOC_Param socParam = {0};
 30034c8:	4661                	li	a2,24
 30034ca:	2325                	jal	ra,30039f2 <SystemInit+0x1408>
    socParam.sampleHoldTime =  2; /* adc sample holed time 2 adc_clk */
 30034cc:	4d89                	li	s11,2
    socParam.sampleTotalTime = 3; /* adc sample total time 3 adc_clk */
 30034ce:	4d0d                	li	s10,3
    socParam.periphTrigSource = ADC_TRIGSOC_APT3_SOCA;
 30034d0:	469d                	li	a3,7
    socParam.sampleHoldTime =  2; /* adc sample holed time 2 adc_clk */
 30034d2:	d26e                	sw	s11,36(sp)
    socParam.sampleTotalTime = 3; /* adc sample total time 3 adc_clk */
 30034d4:	d06a                	sw	s10,32(sp)
    socParam.periphTrigSource = ADC_TRIGSOC_APT3_SOCA;
 30034d6:	d636                	sw	a3,44(sp)
    socParam.finishMode = ADC_SOCFINISH_NONE;
 30034d8:	da22                	sw	s0,52(sp)
    HAL_ADC_ConfigureSoc(&g_adc0, ADC_SOC_NUM0, &socParam);
 30034da:	0870                	addi	a2,sp,28
 30034dc:	4581                	li	a1,0
 30034de:	2b35                	jal	ra,3003a1a <SystemInit+0x1430>
    socParam.adcInput = ADC_CH_ADCINA0; /* PGA0_OUT(ADC INA0) */
 30034e0:	ce02                	sw	zero,28(sp)
    HAL_ADC_ConfigureSoc(&g_adc0, ADC_SOC_NUM1, &socParam);
 30034e2:	85a2                	mv	a1,s0
 30034e4:	231d                	jal	ra,3003a0a <SystemInit+0x1420>
    socParam.adcInput = ADC_CH_ADCINA3; /* PIN28(ADC INA3) */
 30034e6:	ce6a                	sw	s10,28(sp)
    HAL_ADC_ConfigureSoc(&g_adc0, ADC_SOC_NUM2, &socParam);
 30034e8:	85ee                	mv	a1,s11
 30034ea:	2305                	jal	ra,3003a0a <SystemInit+0x1420>
    socParam.adcInput = ADC_CH_ADCINA4; /* PIN29(ADC INA4) */
 30034ec:	ce66                	sw	s9,28(sp)
 30034ee:	2b15                	jal	ra,3003a22 <SystemInit+0x1438>
    socParam.periphTrigSource = ADC_TRIGSOC_APT3_SOCB;
 30034f0:	4721                	li	a4,8
 30034f2:	d63a                	sw	a4,44(sp)
    HAL_ADC_ConfigureSoc(&g_adc0, ADC_SOC_NUM3, &socParam);
 30034f4:	85ea                	mv	a1,s10
 30034f6:	2305                	jal	ra,3003a16 <SystemInit+0x142c>
    HAL_CRG_IpEnableSet(ADC1_BASE, IP_CLK_ENABLE);
 30034f8:	18001537          	lui	a0,0x18001
 30034fc:	2351                	jal	ra,3003a80 <SystemInit+0x1496>
    HAL_CRG_IpClkSelectSet(ADC1_BASE, CRG_ADC_CLK_SELECT_PLL_DIV);
 30034fe:	18001537          	lui	a0,0x18001
 3003502:	85ee                	mv	a1,s11
 3003504:	23a1                	jal	ra,3003a4c <SystemInit+0x1462>
    HAL_CRG_IpClkDivSet(ADC1_BASE, CRG_ADC_DIV_5);
 3003506:	18001537          	lui	a0,0x18001
 300350a:	230d                	jal	ra,3003a2c <SystemInit+0x1442>
    g_adc1.baseAddress = ADC1;
 300350c:	180017b7          	lui	a5,0x18001
 3003510:	f5418493          	addi	s1,gp,-172 # 40005a8 <g_adc1>
 3003514:	c09c                	sw	a5,0(s1)
    g_adc1.irqNumOver = IRQ_ADC1_OVINT;
 3003516:	06100793          	li	a5,97
 300351a:	21e5                	jal	ra,3003a02 <SystemInit+0x1418>
 300351c:	c89c                	sw	a5,16(s1)
    g_adc1.ADC_IntxParam[0].irqNum = IRQ_ADC1_INT1;     /* interrupt 0 */
 300351e:	06200793          	li	a5,98
 3003522:	d0bc                	sw	a5,96(s1)
    g_adc1.ADC_IntxParam[1].irqNum = IRQ_ADC1_INT2;     /* interrupt 1 */
 3003524:	06300793          	li	a5,99
 3003528:	d4bc                	sw	a5,104(s1)
    g_adc1.ADC_IntxParam[2].irqNum = IRQ_ADC1_INT3;     /* interrupt 2 */
 300352a:	06400793          	li	a5,100
 300352e:	d8bc                	sw	a5,112(s1)
    g_adc1.ADC_IntxParam[3].irqNum = IRQ_ADC1_INT4;     /* interrupt 3 */
 3003530:	06500793          	li	a5,101
 3003534:	29fd                	jal	ra,3003a32 <SystemInit+0x1448>
    HAL_ADC_Init(&g_adc1);
 3003536:	29c5                	jal	ra,3003a26 <SystemInit+0x143c>
    socParam.adcInput = ADC_CH_ADCINB2; /* PIN7(ADC INB2) */
 3003538:	47a9                	li	a5,10
 300353a:	ce3e                	sw	a5,28(sp)
    socParam.sampleHoldTime =  2; /* adc sample holed time 2 adc_clk */
 300353c:	d26e                	sw	s11,36(sp)
    socParam.sampleTotalTime = 3; /* adc sample total time 3 adc_clk */
 300353e:	d06a                	sw	s10,32(sp)
 3003540:	d622                	sw	s0,44(sp)
    HAL_ADC_ConfigureSoc(&g_adc1, ADC_SOC_NUM0, &socParam);
 3003542:	4581                	li	a1,0
 3003544:	29c9                	jal	ra,3003a16 <SystemInit+0x142c>
    socParam.adcInput = ADC_CH_ADCINA2; /* PIN6(ADC INA2) */
 3003546:	ce6e                	sw	s11,28(sp)
 3003548:	29e9                	jal	ra,3003a22 <SystemInit+0x1438>
 300354a:	d622                	sw	s0,44(sp)
    HAL_ADC_ConfigureSoc(&g_adc1, ADC_SOC_NUM1, &socParam);
 300354c:	85a2                	mv	a1,s0
 300354e:	21e1                	jal	ra,3003a16 <SystemInit+0x142c>
    socParam.adcInput = ADC_CH_ADCINA4; /* PIN10(ADC INA4) */
 3003550:	ce66                	sw	s9,28(sp)
 3003552:	29c1                	jal	ra,3003a22 <SystemInit+0x1438>
    socParam.periphTrigSource = ADC_TRIGSOC_APT0_SOCB;
 3003554:	d66e                	sw	s11,44(sp)
    HAL_ADC_ConfigureSoc(&g_adc1, ADC_SOC_NUM2, &socParam);
 3003556:	85ee                	mv	a1,s11
 3003558:	297d                	jal	ra,3003a16 <SystemInit+0x142c>
    socParam.adcInput = ADC_CH_ADCINA5; /* PIN11(ADC INA5) */
 300355a:	4795                	li	a5,5
    HAL_ADC_ConfigureSoc(&g_adc1, ADC_SOC_NUM3, &socParam);
 300355c:	0870                	addi	a2,sp,28
 300355e:	85ea                	mv	a1,s10
 3003560:	21c1                	jal	ra,3003a20 <SystemInit+0x1436>
 3003562:	d66e                	sw	s11,44(sp)
 3003564:	da22                	sw	s0,52(sp)
 3003566:	2955                	jal	ra,3003a1a <SystemInit+0x1430>
    socParam.adcInput = ADC_CH_ADCINB4; /* PIN3(ADC INB4) */
 3003568:	47b1                	li	a5,12
    HAL_ADC_ConfigureSoc(&g_adc1, ADC_SOC_NUM4, &socParam);
 300356a:	85e6                	mv	a1,s9
 300356c:	0870                	addi	a2,sp,28
 300356e:	294d                	jal	ra,3003a20 <SystemInit+0x1436>
 3003570:	d66e                	sw	s11,44(sp)
 3003572:	da22                	sw	s0,52(sp)
 3003574:	215d                	jal	ra,3003a1a <SystemInit+0x1430>
    socParam.adcInput = ADC_CH_ADCINB5; /* PIN4(ADC INB5) */
 3003576:	47b5                	li	a5,13
 3003578:	2165                	jal	ra,3003a20 <SystemInit+0x1436>
    socParam.periphTrigSource = ADC_TRIGSOC_APT0_SOCB;
 300357a:	d66e                	sw	s11,44(sp)
 300357c:	da22                	sw	s0,52(sp)
    HAL_ADC_ConfigureSoc(&g_adc1, ADC_SOC_NUM5, &socParam);
 300357e:	0870                	addi	a2,sp,28
 3003580:	4595                	li	a1,5
 3003582:	2961                	jal	ra,3003a1a <SystemInit+0x1430>
    HAL_CRG_IpEnableSet(ADC2_BASE, IP_CLK_ENABLE);
 3003584:	18002537          	lui	a0,0x18002
 3003588:	29e5                	jal	ra,3003a80 <SystemInit+0x1496>
    HAL_CRG_IpClkSelectSet(ADC2_BASE, CRG_ADC_CLK_SELECT_PLL_DIV);
 300358a:	18002537          	lui	a0,0x18002
 300358e:	85ee                	mv	a1,s11
 3003590:	2975                	jal	ra,3003a4c <SystemInit+0x1462>
    HAL_CRG_IpClkDivSet(ADC2_BASE, CRG_ADC_DIV_5);
 3003592:	18002537          	lui	a0,0x18002
 3003596:	2959                	jal	ra,3003a2c <SystemInit+0x1442>
    g_adc2.baseAddress = ADC2;
 3003598:	180027b7          	lui	a5,0x18002
 300359c:	ff418493          	addi	s1,gp,-12 # 4000648 <g_adc2>
 30035a0:	c09c                	sw	a5,0(s1)
    g_adc2.irqNumOver = IRQ_ADC2_OVINT;
 30035a2:	06600793          	li	a5,102
 30035a6:	29b1                	jal	ra,3003a02 <SystemInit+0x1418>
 30035a8:	c89c                	sw	a5,16(s1)
    g_adc2.ADC_IntxParam[1].irqNum = IRQ_ADC2_INT2;     /* interrupt 1 */
 30035aa:	06800793          	li	a5,104
    g_adc2.ADC_IntxParam[0].irqNum = IRQ_ADC2_INT1;     /* interrupt 0 */
 30035ae:	06700713          	li	a4,103
    g_adc2.ADC_IntxParam[1].irqNum = IRQ_ADC2_INT2;     /* interrupt 1 */
 30035b2:	d4bc                	sw	a5,104(s1)
    g_adc2.ADC_IntxParam[2].irqNum = IRQ_ADC2_INT3;     /* interrupt 2 */
 30035b4:	06900793          	li	a5,105
 30035b8:	d8bc                	sw	a5,112(s1)
    g_adc2.ADC_IntxParam[0].irqNum = IRQ_ADC2_INT1;     /* interrupt 0 */
 30035ba:	d0b8                	sw	a4,96(s1)
    g_adc2.ADC_IntxParam[3].irqNum = IRQ_ADC2_INT4;     /* interrupt 3 */
 30035bc:	06a00793          	li	a5,106
 30035c0:	298d                	jal	ra,3003a32 <SystemInit+0x1448>
    HAL_ADC_Init(&g_adc2);
 30035c2:	2195                	jal	ra,3003a26 <SystemInit+0x143c>
    socParam.periphTrigSource = ADC_TRIGSOC_APT8_SOCA;
 30035c4:	47c5                	li	a5,17
    socParam.adcInput = ADC_CH_ADCINA4; /* PIN48(ADC INA4) */
 30035c6:	ce66                	sw	s9,28(sp)
    socParam.sampleHoldTime =  2; /* adc sample holed time 2 adc_clk */
 30035c8:	d26e                	sw	s11,36(sp)
    socParam.sampleTotalTime = 3; /* adc sample total time 3 adc_clk */
 30035ca:	d06a                	sw	s10,32(sp)
    socParam.periphTrigSource = ADC_TRIGSOC_APT8_SOCA;
 30035cc:	d63e                	sw	a5,44(sp)
    socParam.finishMode = ADC_SOCFINISH_INT1;
 30035ce:	da6a                	sw	s10,52(sp)
    HAL_ADC_ConfigureSoc(&g_adc2, ADC_SOC_NUM0, &socParam);
 30035d0:	4581                	li	a1,0
 30035d2:	2199                	jal	ra,3003a18 <SystemInit+0x142e>
    socParam.adcInput = ADC_CH_ADCINA3; /* PIN47(ADC INA3) */
 30035d4:	ce6a                	sw	s10,28(sp)
 30035d6:	21b1                	jal	ra,3003a22 <SystemInit+0x1438>
    socParam.periphTrigSource = ADC_TRIGSOC_APT8_SOCB;
 30035d8:	47c9                	li	a5,18
 30035da:	d63e                	sw	a5,44(sp)
    HAL_ADC_ConfigureSoc(&g_adc2, ADC_SOC_NUM1, &socParam);
 30035dc:	85a2                	mv	a1,s0
 30035de:	2925                	jal	ra,3003a16 <SystemInit+0x142c>
    HAL_ADC_RegisterCallBack(&g_adc2, ADC_CALLBACK_INT1, ADC2Interrupt1Callback);
 30035e0:	4581                	li	a1,0
 30035e2:	8526                	mv	a0,s1
 30035e4:	0300 25b4 061f      	l.li	a2,0x30025b4
 30035ea:	b5ffd0ef          	jal	ra,3001148 <HAL_ADC_RegisterCallBack>
    IRQ_SetPriority(IRQ_ADC2_INT1, 6);
 30035ee:	4599                	li	a1,6
 30035f0:	06700513          	li	a0,103
 30035f4:	2149                	jal	ra,3003a76 <SystemInit+0x148c>
    IRQ_EnableN(IRQ_ADC2_INT1);
 30035f6:	06700513          	li	a0,103
 30035fa:	2149                	jal	ra,3003a7c <SystemInit+0x1492>
    HAL_ADC_IrqService(&g_adc2);
 30035fc:	8526                	mv	a0,s1
 30035fe:	b17fd0ef          	jal	ra,3001114 <HAL_ADC_IrqService>
    HAL_CRG_IpEnableSet(PGA0_BASE, IP_CLK_ENABLE);
 3003602:	18200537          	lui	a0,0x18200
 3003606:	29ad                	jal	ra,3003a80 <SystemInit+0x1496>
    g_pga0.baseAddress = PGA0_BASE;
 3003608:	4cc18513          	addi	a0,gp,1228 # 4000b20 <g_pga0>
 300360c:	182007b7          	lui	a5,0x18200
 3003610:	c11c                	sw	a5,0(a0)
    g_pga0.enable = BASE_CFG_ENABLE;
 3003612:	a940                	sb	s0,20(a0)
    g_pga0.extLoopbackEn = BASE_CFG_ENABLE;
 3003614:	b940                	sb	s0,21(a0)
    g_pga0.pgaMux = PGA_EXT_RES_VI0;
 3003616:	01952223          	sw	s9,4(a0) # 18200004 <RAM_END+0x141fc004>
 300361a:	2105                	jal	ra,3003a3a <SystemInit+0x1450>
    HAL_CRG_IpEnableSet(PGA1_BASE, IP_CLK_ENABLE);
 300361c:	18201537          	lui	a0,0x18201
 3003620:	2185                	jal	ra,3003a80 <SystemInit+0x1496>
    g_pga1.baseAddress = PGA1_BASE;
 3003622:	4e418513          	addi	a0,gp,1252 # 4000b38 <g_pga1>
 3003626:	182017b7          	lui	a5,0x18201
 300362a:	c11c                	sw	a5,0(a0)
    g_pga1.enable = BASE_CFG_ENABLE;
 300362c:	a940                	sb	s0,20(a0)
    g_pga1.extLoopbackEn = BASE_CFG_DISABLE;
 300362e:	01450aa3          	sb	s4,21(a0) # 18201015 <RAM_END+0x141fd015>
    g_pga1.pgaMux = PGA_INTER_RES_VI0;
 3003632:	01452223          	sw	s4,4(a0)
 3003636:	2111                	jal	ra,3003a3a <SystemInit+0x1450>
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER0) / 1000000u * 160;
 3003638:	14300537          	lui	a0,0x14300
 300363c:	2129                	jal	ra,3003a46 <SystemInit+0x145c>
 300363e:	c62a                	sw	a0,12(sp)
    HAL_CRG_IpEnableSet(TIMER0_BASE, IP_CLK_ENABLE);
 3003640:	14300537          	lui	a0,0x14300
 3003644:	2935                	jal	ra,3003a80 <SystemInit+0x1496>
    HAL_CRG_IpClkSelectSet(TIMER0_BASE, CRG_PLL_NO_PREDV);
 3003646:	14300537          	lui	a0,0x14300
 300364a:	2101                	jal	ra,3003a4a <SystemInit+0x1460>
    g_timer0.baseAddress = TIMER0;
 300364c:	4fc18493          	addi	s1,gp,1276 # 4000b50 <g_timer0>
    g_timer0.irqNum = IRQ_TIMER0;
 3003650:	02000693          	li	a3,32
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER0) / 1000000u * 160;
 3003654:	4632                	lw	a2,12(sp)
    g_timer0.irqNum = IRQ_TIMER0;
 3003656:	ccd4                	sw	a3,28(s1)
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER0) / 1000000u * 160;
 3003658:	000f46b7          	lui	a3,0xf4
 300365c:	24068593          	addi	a1,a3,576 # f4240 <FLASH_SIZE+0xcc244>
 3003660:	02b65533          	divu	a0,a2,a1
    g_timer0.baseAddress = TIMER0;
 3003664:	14300737          	lui	a4,0x14300
 3003668:	c098                	sw	a4,0(s1)
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER0) / 1000000u * 160;
 300366a:	a0a0155b          	muliadd	a0,zero,a0,160
 300366e:	26cd                	jal	ra,3003a50 <SystemInit+0x1466>
    HAL_TIMER_RegisterCallback(&g_timer0, TIMER0CallbackFunction);
 3003670:	0300 25ac 059f      	l.li	a1,0x30025ac
 3003676:	2ee5                	jal	ra,3003a6e <SystemInit+0x1484>
    IRQ_SetPriority(g_timer0.irqNum, 3);
 3003678:	85ea                	mv	a1,s10
 300367a:	2eed                	jal	ra,3003a74 <SystemInit+0x148a>
 300367c:	2efd                	jal	ra,3003a7a <SystemInit+0x1490>
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER1) / 1000000u * 320;
 300367e:	143004b7          	lui	s1,0x14300
 3003682:	02048513          	addi	a0,s1,32 # 14300020 <RAM_END+0x102fc020>
 3003686:	26c1                	jal	ra,3003a46 <SystemInit+0x145c>
 3003688:	c62a                	sw	a0,12(sp)
    HAL_CRG_IpEnableSet(TIMER1_BASE, IP_CLK_ENABLE);
 300368a:	02048513          	addi	a0,s1,32
 300368e:	2ecd                	jal	ra,3003a80 <SystemInit+0x1496>
    HAL_CRG_IpClkSelectSet(TIMER1_BASE, CRG_PLL_NO_PREDV);
 3003690:	02048513          	addi	a0,s1,32
 3003694:	2e5d                	jal	ra,3003a4a <SystemInit+0x1460>
    g_timer1.baseAddress = TIMER1;
 3003696:	14300737          	lui	a4,0x14300
 300369a:	02070793          	addi	a5,a4,32 # 14300020 <RAM_END+0x102fc020>
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER1) / 1000000u * 320;
 300369e:	4732                	lw	a4,12(sp)
 30036a0:	000f46b7          	lui	a3,0xf4
 30036a4:	24068613          	addi	a2,a3,576 # f4240 <FLASH_SIZE+0xcc244>
 30036a8:	02c75533          	divu	a0,a4,a2
    g_timer1.baseAddress = TIMER1;
 30036ac:	52418493          	addi	s1,gp,1316 # 4000b78 <g_timer1>
 30036b0:	c09c                	sw	a5,0(s1)
    g_timer1.irqNum = IRQ_TIMER1;
 30036b2:	02100793          	li	a5,33
 30036b6:	ccdc                	sw	a5,28(s1)
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER1) / 1000000u * 320;
 30036b8:	14000793          	li	a5,320
 30036bc:	02f50533          	mul	a0,a0,a5
 30036c0:	2e41                	jal	ra,3003a50 <SystemInit+0x1466>
    HAL_TIMER_RegisterCallback(&g_timer1, TIMER1CallbackFunction);
 30036c2:	0300 25b0 059f      	l.li	a1,0x30025b0
 30036c8:	265d                	jal	ra,3003a6e <SystemInit+0x1484>
    IRQ_SetPriority(g_timer1.irqNum, 2);
 30036ca:	85ee                	mv	a1,s11
 30036cc:	2665                	jal	ra,3003a74 <SystemInit+0x148a>
 30036ce:	2675                	jal	ra,3003a7a <SystemInit+0x1490>
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER2) / 1000000u * 1000;
 30036d0:	14301537          	lui	a0,0x14301
 30036d4:	2e8d                	jal	ra,3003a46 <SystemInit+0x145c>
 30036d6:	8daa                	mv	s11,a0
    HAL_CRG_IpEnableSet(TIMER2_BASE, IP_CLK_ENABLE);
 30036d8:	14301537          	lui	a0,0x14301
 30036dc:	2655                	jal	ra,3003a80 <SystemInit+0x1496>
    HAL_CRG_IpClkSelectSet(TIMER2_BASE, CRG_PLL_NO_PREDV);
 30036de:	14301537          	lui	a0,0x14301
 30036e2:	26a5                	jal	ra,3003a4a <SystemInit+0x1460>
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER2) / 1000000u * 1000;
 30036e4:	000f46b7          	lui	a3,0xf4
 30036e8:	24068713          	addi	a4,a3,576 # f4240 <FLASH_SIZE+0xcc244>
 30036ec:	02edd533          	divu	a0,s11,a4
    g_timer2.baseAddress = TIMER2;
 30036f0:	54c18493          	addi	s1,gp,1356 # 4000ba0 <g_timer2>
 30036f4:	143017b7          	lui	a5,0x14301
 30036f8:	c09c                	sw	a5,0(s1)
    g_timer2.irqNum = IRQ_TIMER2;
 30036fa:	02200793          	li	a5,34
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER2) / 1000000u * 1000;
 30036fe:	3e800d93          	li	s11,1000
    g_timer2.irqNum = IRQ_TIMER2;
 3003702:	ccdc                	sw	a5,28(s1)
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER2) / 1000000u * 1000;
 3003704:	03b50533          	mul	a0,a0,s11
 3003708:	26a1                	jal	ra,3003a50 <SystemInit+0x1466>
    HAL_TIMER_RegisterCallback(&g_timer2, TIMER2CallbackFunction);
 300370a:	0300 25ae 059f      	l.li	a1,0x30025ae
 3003710:	2eb9                	jal	ra,3003a6e <SystemInit+0x1484>
    IRQ_SetPriority(g_timer2.irqNum, 1);
 3003712:	85a2                	mv	a1,s0
 3003714:	2685                	jal	ra,3003a74 <SystemInit+0x148a>
 3003716:	2695                	jal	ra,3003a7a <SystemInit+0x1490>
    HAL_CRG_IpEnableSet(GPIO1_BASE, IP_CLK_ENABLE);
 3003718:	14501537          	lui	a0,0x14501
 300371c:	2695                	jal	ra,3003a80 <SystemInit+0x1496>
    g_gpio1.baseAddress = GPIO1;
 300371e:	3c418493          	addi	s1,gp,964 # 4000a18 <g_gpio1>
 3003722:	145017b7          	lui	a5,0x14501
 3003726:	2685                	jal	ra,3003a86 <SystemInit+0x149c>
    g_gpio1.interruptMode = GPIO_INT_TYPE_NONE;
 3003728:	4d95                	li	s11,5
    g_gpio1.pins = GPIO_PIN_6 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4;
 300372a:	05a00793          	li	a5,90
 300372e:	268d                	jal	ra,3003a90 <SystemInit+0x14a6>
    g_gpio1.dir = GPIO_OUTPUT_MODE;
 3003730:	c480                	sw	s0,8(s1)
    g_gpio1.value = GPIO_HIGH_LEVEL;
 3003732:	c880                	sw	s0,16(s1)
    g_gpio1.interruptMode = GPIO_INT_TYPE_NONE;
 3003734:	01b4a623          	sw	s11,12(s1)
    g_gpio1.pins = GPIO_PIN_0;
 3003738:	c0c0                	sw	s0,4(s1)
 300373a:	2eb1                	jal	ra,3003a96 <SystemInit+0x14ac>
    HAL_CRG_IpEnableSet(GPIO5_BASE, IP_CLK_ENABLE);
 300373c:	14505537          	lui	a0,0x14505
 3003740:	2681                	jal	ra,3003a80 <SystemInit+0x1496>
    g_gpio5.baseAddress = GPIO5;
 3003742:	41c18513          	addi	a0,gp,1052 # 4000a70 <g_gpio5>
 3003746:	145057b7          	lui	a5,0x14505
 300374a:	c11c                	sw	a5,0(a0)
    g_gpio5.pins = GPIO_PIN_0 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 300374c:	0e100793          	li	a5,225
    g_gpio5.dir = GPIO_OUTPUT_MODE;
 3003750:	c500                	sw	s0,8(a0)
    g_gpio5.value = GPIO_HIGH_LEVEL;
 3003752:	c900                	sw	s0,16(a0)
 3003754:	01b52623          	sw	s11,12(a0) # 1450500c <RAM_END+0x1050100c>
    g_gpio5.pins = GPIO_PIN_0 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 3003758:	c15c                	sw	a5,4(a0)
 300375a:	2e3d                	jal	ra,3003a98 <SystemInit+0x14ae>
    HAL_CRG_IpEnableSet(GPIO6_BASE, IP_CLK_ENABLE);
 300375c:	14506537          	lui	a0,0x14506
 3003760:	2605                	jal	ra,3003a80 <SystemInit+0x1496>
    g_gpio6.baseAddress = GPIO6;
 3003762:	47418513          	addi	a0,gp,1140 # 4000ac8 <g_gpio6>
 3003766:	145067b7          	lui	a5,0x14506
 300376a:	c11c                	sw	a5,0(a0)
    g_gpio6.pins = GPIO_PIN_2 | GPIO_PIN_4;
 300376c:	47d1                	li	a5,20
    g_gpio6.dir = GPIO_OUTPUT_MODE;
 300376e:	c500                	sw	s0,8(a0)
    g_gpio6.value = GPIO_LOW_LEVEL;
 3003770:	01452823          	sw	s4,16(a0) # 14506010 <RAM_END+0x10502010>
 3003774:	01b52623          	sw	s11,12(a0)
    g_gpio6.pins = GPIO_PIN_2 | GPIO_PIN_4;
 3003778:	c15c                	sw	a5,4(a0)
 300377a:	2e39                	jal	ra,3003a98 <SystemInit+0x14ae>
    HAL_CRG_IpEnableSet(GPIO0_BASE, IP_CLK_ENABLE);
 300377c:	14500537          	lui	a0,0x14500
 3003780:	2601                	jal	ra,3003a80 <SystemInit+0x1496>
    g_gpio0.baseAddress = GPIO0;
 3003782:	36c18493          	addi	s1,gp,876 # 40009c0 <g_gpio0>
 3003786:	145007b7          	lui	a5,0x14500
 300378a:	2cf5                	jal	ra,3003a86 <SystemInit+0x149c>
    g_gpio0.pins = GPIO_PIN_5;
 300378c:	02000693          	li	a3,32
    g_gpio0.interruptMode = GPIO_INT_TYPE_NONE;
 3003790:	01b4a623          	sw	s11,12(s1)
    g_gpio0.pins = GPIO_PIN_5;
 3003794:	c0d4                	sw	a3,4(s1)
 3003796:	2601                	jal	ra,3003a96 <SystemInit+0x14ac>
    g_gpio0.dir = GPIO_OUTPUT_MODE;
 3003798:	c480                	sw	s0,8(s1)
    g_gpio0.value = GPIO_HIGH_LEVEL;
 300379a:	c880                	sw	s0,16(s1)
    g_gpio0.pins = GPIO_PIN_6 | GPIO_PIN_7;
 300379c:	0c000793          	li	a5,192
 30037a0:	2cc5                	jal	ra,3003a90 <SystemInit+0x14a6>
    HAL_APT_MasterSyncInit(&g_apt3, APT_SYNC_OUT_ON_CNTR_ZERO);
 30037a2:	854e                	mv	a0,s3
 30037a4:	2ce5                	jal	ra,3003a9c <SystemInit+0x14b2>
    HAL_APT_MasterSyncInit(&g_apt0, APT_SYNC_OUT_ON_CNTR_ZERO);
 30037a6:	854a                	mv	a0,s2
 30037a8:	2cd5                	jal	ra,3003a9c <SystemInit+0x14b2>
    HAL_APT_SlaveSyncInit(&g_apt4, &aptSlave);
 30037aa:	8556                	mv	a0,s5
 30037ac:	2cdd                	jal	ra,3003aa2 <SystemInit+0x14b8>
 30037ae:	2609                	jal	ra,3003ab0 <SystemInit+0x14c6>
    HAL_APT_SlaveSyncInit(&g_apt5, &aptSlave);
 30037b0:	8562                	mv	a0,s8
 30037b2:	2cc5                	jal	ra,3003aa2 <SystemInit+0x14b8>
 30037b4:	2cf5                	jal	ra,3003ab0 <SystemInit+0x14c6>
    HAL_APT_SlaveSyncInit(&g_apt1, &aptSlave);
 30037b6:	855a                	mv	a0,s6
 30037b8:	2ccd                	jal	ra,3003aaa <SystemInit+0x14c0>
    HAL_APT_SlaveSyncInit(&g_apt2, &aptSlave);
 30037ba:	855e                	mv	a0,s7
 30037bc:	24fd                	jal	ra,3003aaa <SystemInit+0x14c0>
    APT_SyncMasterInit();
    APT_SyncSlaveInit();

    /* USER CODE BEGIN system_init */
    /* USER CODE END system_init */
 30037be:	84d4                	popret	{ra,s0-s11},128
    iconfig->iocmg_17.BIT.sr = IO_SPEED_SLOW;
 30037c0:	c398                	sw	a4,0(a5)
    iconfig->iocmg_17.BIT.se = BASE_CFG_DISABLE;
 30037c2:	4398                	lw	a4,0(a5)
 30037c4:	8082                	ret
    iconfig->iocmg_43.BIT.sr = IO_SPEED_SLOW;
 30037c6:	d7b8                	sw	a4,104(a5)
    iconfig->iocmg_43.BIT.se = BASE_CFG_DISABLE;
 30037c8:	57b8                	lw	a4,104(a5)
 30037ca:	8082                	ret
    iconfig->iocmg_48.BIT.func = 0x0; /* 0x0 is GPIO5_5 */
 30037cc:	dff8                	sw	a4,124(a5)
    iconfig->iocmg_48.BIT.ds = IO_DRV_LEVEL2;
 30037ce:	5ff8                	lw	a4,124(a5)
 30037d0:	8082                	ret
    iconfig->iocmg_49.BIT.sr = IO_SPEED_SLOW;
 30037d2:	08e7a023          	sw	a4,128(a5) # 14500080 <RAM_END+0x104fc080>
    iconfig->iocmg_49.BIT.se = BASE_CFG_DISABLE;
 30037d6:	0807a703          	lw	a4,128(a5)
 30037da:	8082                	ret
    iconfig->iocmg_50.BIT.sr = IO_SPEED_SLOW;
 30037dc:	08e7a223          	sw	a4,132(a5)
    iconfig->iocmg_50.BIT.se = BASE_CFG_DISABLE;
 30037e0:	0847a703          	lw	a4,132(a5)
 30037e4:	8082                	ret
    iconfig->iocmg_53.BIT.sr = IO_SPEED_SLOW;
 30037e6:	08e7a823          	sw	a4,144(a5)
    iconfig->iocmg_53.BIT.se = BASE_CFG_DISABLE;
 30037ea:	0907a703          	lw	a4,144(a5)
 30037ee:	8082                	ret
    iconfig->iocmg_55.BIT.ds = IO_DRV_LEVEL2;
 30037f0:	fcf77713          	andi	a4,a4,-49
 30037f4:	02076713          	ori	a4,a4,32
 30037f8:	8082                	ret
    iconfig->iocmg_55.BIT.pd = BASE_CFG_DISABLE;
 30037fa:	f7f77713          	andi	a4,a4,-129
 30037fe:	8082                	ret
    iconfig->iocmg_55.BIT.pu = BASE_CFG_DISABLE;
 3003800:	eff77713          	andi	a4,a4,-257
 3003804:	8082                	ret
    iconfig->iocmg_55.BIT.sr = IO_SPEED_SLOW;
 3003806:	20076713          	ori	a4,a4,512
 300380a:	8082                	ret
 300380c:	08e7ac23          	sw	a4,152(a5)
    iconfig->iocmg_55.BIT.se = BASE_CFG_DISABLE;
 3003810:	0987a703          	lw	a4,152(a5)
 3003814:	8082                	ret
 3003816:	bff77713          	andi	a4,a4,-1025
 300381a:	8082                	ret
    iconfig->iocmg_8.BIT.sr = IO_SPEED_SLOW;
 300381c:	c754                	sw	a3,12(a4)
    iconfig->iocmg_8.BIT.se = BASE_CFG_DISABLE;
 300381e:	4754                	lw	a3,12(a4)
 3003820:	8082                	ret
    iconfig->iocmg_9.BIT.pd = BASE_CFG_DISABLE;
 3003822:	cb14                	sw	a3,16(a4)
    iconfig->iocmg_9.BIT.pu = BASE_CFG_DISABLE;
 3003824:	4b14                	lw	a3,16(a4)
 3003826:	8082                	ret
    iconfig->iocmg_10.BIT.sr = IO_SPEED_SLOW;
 3003828:	cb54                	sw	a3,20(a4)
    iconfig->iocmg_10.BIT.se = BASE_CFG_DISABLE;
 300382a:	4b54                	lw	a3,20(a4)
 300382c:	8082                	ret
    iconfig->iocmg_11.BIT.sr = IO_SPEED_SLOW;
 300382e:	cf14                	sw	a3,24(a4)
    iconfig->iocmg_11.BIT.se = BASE_CFG_DISABLE;
 3003830:	4f14                	lw	a3,24(a4)
 3003832:	8082                	ret
    iconfig->iocmg_12.BIT.sr = IO_SPEED_SLOW;
 3003834:	cf54                	sw	a3,28(a4)
    iconfig->iocmg_12.BIT.se = BASE_CFG_DISABLE;
 3003836:	4f54                	lw	a3,28(a4)
 3003838:	8082                	ret
    iconfig->iocmg_14.BIT.sr = IO_SPEED_SLOW;
 300383a:	d354                	sw	a3,36(a4)
    iconfig->iocmg_14.BIT.se = BASE_CFG_DISABLE;
 300383c:	5354                	lw	a3,36(a4)
 300383e:	8082                	ret
    iconfig->iocmg_15.BIT.sr = IO_SPEED_SLOW;
 3003840:	d714                	sw	a3,40(a4)
    iconfig->iocmg_15.BIT.se = BASE_CFG_DISABLE;
 3003842:	5714                	lw	a3,40(a4)
 3003844:	8082                	ret
    iconfig->iocmg_18.BIT.sr = IO_SPEED_SLOW;
 3003846:	c3d4                	sw	a3,4(a5)
    iconfig->iocmg_18.BIT.se = BASE_CFG_DISABLE;
 3003848:	43d4                	lw	a3,4(a5)
 300384a:	8082                	ret
    iconfig->iocmg_21.BIT.sr = IO_SPEED_SLOW;
 300384c:	cb94                	sw	a3,16(a5)
    iconfig->iocmg_21.BIT.se = BASE_CFG_DISABLE;
 300384e:	4b94                	lw	a3,16(a5)
 3003850:	8082                	ret
    iconfig->iocmg_22.BIT.sr = IO_SPEED_SLOW;
 3003852:	cbd4                	sw	a3,20(a5)
    iconfig->iocmg_22.BIT.se = BASE_CFG_DISABLE;
 3003854:	4bd4                	lw	a3,20(a5)
 3003856:	8082                	ret
    iconfig->iocmg_23.BIT.sr = IO_SPEED_SLOW;
 3003858:	cf94                	sw	a3,24(a5)
    iconfig->iocmg_23.BIT.se = BASE_CFG_DISABLE;
 300385a:	4f94                	lw	a3,24(a5)
 300385c:	8082                	ret
    iconfig->iocmg_26.BIT.sr = IO_SPEED_SLOW;
 300385e:	d3d4                	sw	a3,36(a5)
    iconfig->iocmg_26.BIT.se = BASE_CFG_DISABLE;
 3003860:	53d4                	lw	a3,36(a5)
 3003862:	8082                	ret
    iconfig->iocmg_27.BIT.sr = IO_SPEED_SLOW;
 3003864:	d794                	sw	a3,40(a5)
    iconfig->iocmg_27.BIT.se = BASE_CFG_DISABLE;
 3003866:	5794                	lw	a3,40(a5)
 3003868:	8082                	ret
    iconfig->iocmg_19.BIT.sr = IO_SPEED_SLOW;
 300386a:	c794                	sw	a3,8(a5)
    iconfig->iocmg_19.BIT.se = BASE_CFG_DISABLE;
 300386c:	4794                	lw	a3,8(a5)
 300386e:	8082                	ret
    iconfig->iocmg_20.BIT.sr = IO_SPEED_SLOW;
 3003870:	c7d4                	sw	a3,12(a5)
    iconfig->iocmg_20.BIT.se = BASE_CFG_DISABLE;
 3003872:	47d4                	lw	a3,12(a5)
 3003874:	8082                	ret
    iconfig->iocmg_24.BIT.func = 0x8; /* 0x8 is PGA1_ANA_EXT */
 3003876:	9ac1                	andi	a3,a3,-16
 3003878:	0086e693          	ori	a3,a3,8
 300387c:	8082                	ret
    iconfig->iocmg_24.BIT.pu = BASE_CFG_DISABLE;
 300387e:	cfd4                	sw	a3,28(a5)
    iconfig->iocmg_24.BIT.sr = IO_SPEED_SLOW;
 3003880:	4fd4                	lw	a3,28(a5)
 3003882:	8082                	ret
    iconfig->iocmg_25.BIT.sr = IO_SPEED_SLOW;
 3003884:	d390                	sw	a2,32(a5)
    iconfig->iocmg_25.BIT.se = BASE_CFG_DISABLE;
 3003886:	5390                	lw	a2,32(a5)
 3003888:	8082                	ret
    iconfig->iocmg_54.BIT.sr = IO_SPEED_SLOW;
 300388a:	08c7aa23          	sw	a2,148(a5)
    iconfig->iocmg_54.BIT.se = BASE_CFG_DISABLE;
 300388e:	0947a603          	lw	a2,148(a5)
 3003892:	8082                	ret
    iconfig->iocmg_28.BIT.sr = IO_SPEED_SLOW;
 3003894:	d7d0                	sw	a2,44(a5)
    iconfig->iocmg_28.BIT.se = BASE_CFG_DISABLE;
 3003896:	57d0                	lw	a2,44(a5)
 3003898:	8082                	ret
    iconfig->iocmg_32.BIT.sr = IO_SPEED_SLOW;
 300389a:	dfd0                	sw	a2,60(a5)
    iconfig->iocmg_32.BIT.se = BASE_CFG_DISABLE;
 300389c:	5fd0                	lw	a2,60(a5)
 300389e:	8082                	ret
    iconfig->iocmg_35.BIT.sr = IO_SPEED_SLOW;
 30038a0:	c7b0                	sw	a2,72(a5)
    iconfig->iocmg_35.BIT.se = BASE_CFG_DISABLE;
 30038a2:	47b0                	lw	a2,72(a5)
 30038a4:	8082                	ret
    iconfig->iocmg_33.BIT.sr = IO_SPEED_SLOW;
 30038a6:	c3b0                	sw	a2,64(a5)
    iconfig->iocmg_33.BIT.se = BASE_CFG_DISABLE;
 30038a8:	43b0                	lw	a2,64(a5)
 30038aa:	8082                	ret
    iconfig->iocmg_36.BIT.sr = IO_SPEED_SLOW;
 30038ac:	c7f0                	sw	a2,76(a5)
    iconfig->iocmg_36.BIT.se = BASE_CFG_DISABLE;
 30038ae:	47f0                	lw	a2,76(a5)
 30038b0:	8082                	ret
    iconfig->iocmg_34.BIT.sr = IO_SPEED_SLOW;
 30038b2:	c3f0                	sw	a2,68(a5)
    iconfig->iocmg_34.BIT.se = BASE_CFG_DISABLE;
 30038b4:	43f0                	lw	a2,68(a5)
 30038b6:	8082                	ret
    iconfig->iocmg_37.BIT.func = 0x3; /* 0x3 is APT2_PWMB */
 30038b8:	9a41                	andi	a2,a2,-16
 30038ba:	00366613          	ori	a2,a2,3
 30038be:	8082                	ret
    iconfig->iocmg_37.BIT.sr = IO_SPEED_SLOW;
 30038c0:	cbb0                	sw	a2,80(a5)
    iconfig->iocmg_37.BIT.se = BASE_CFG_DISABLE;
 30038c2:	4bb0                	lw	a2,80(a5)
 30038c4:	8082                	ret
    iconfig->iocmg_38.BIT.sr = IO_SPEED_SLOW;
 30038c6:	cbf0                	sw	a2,84(a5)
    iconfig->iocmg_38.BIT.se = BASE_CFG_DISABLE;
 30038c8:	4bf0                	lw	a2,84(a5)
 30038ca:	8082                	ret
    iconfig->iocmg_39.BIT.pu = BASE_CFG_DISABLE;
 30038cc:	cfb0                	sw	a2,88(a5)
    iconfig->iocmg_39.BIT.sr = IO_SPEED_SLOW;
 30038ce:	4fb0                	lw	a2,88(a5)
 30038d0:	8082                	ret
    iconfig->iocmg_40.BIT.sr = IO_SPEED_SLOW;
 30038d2:	cff0                	sw	a2,92(a5)
    iconfig->iocmg_40.BIT.se = BASE_CFG_DISABLE;
 30038d4:	4ff0                	lw	a2,92(a5)
 30038d6:	8082                	ret
    iconfig->iocmg_41.BIT.sr = IO_SPEED_SLOW;
 30038d8:	d3b0                	sw	a2,96(a5)
    iconfig->iocmg_41.BIT.se = BASE_CFG_DISABLE;
 30038da:	53b0                	lw	a2,96(a5)
 30038dc:	8082                	ret
    iconfig->iocmg_42.BIT.sr = IO_SPEED_SLOW;
 30038de:	d3f0                	sw	a2,100(a5)
    iconfig->iocmg_42.BIT.se = BASE_CFG_DISABLE;
 30038e0:	53f0                	lw	a2,100(a5)
 30038e2:	8082                	ret
    iconfig->iocmg_58.BIT.sr = IO_SPEED_SLOW;
 30038e4:	0ac7a223          	sw	a2,164(a5)
    iconfig->iocmg_58.BIT.se = BASE_CFG_DISABLE;
 30038e8:	0a47a603          	lw	a2,164(a5)
 30038ec:	8082                	ret
    iconfig->iocmg_61.BIT.sr = IO_SPEED_SLOW;
 30038ee:	0ac7a823          	sw	a2,176(a5)
    iconfig->iocmg_61.BIT.se = BASE_CFG_DISABLE;
 30038f2:	0b07a603          	lw	a2,176(a5)
 30038f6:	8082                	ret
    iconfig->iocmg_59.BIT.sr = IO_SPEED_SLOW;
 30038f8:	0ac7a423          	sw	a2,168(a5)
    iconfig->iocmg_59.BIT.se = BASE_CFG_DISABLE;
 30038fc:	0a87a603          	lw	a2,168(a5)
 3003900:	8082                	ret
    iconfig->iocmg_62.BIT.sr = IO_SPEED_SLOW;
 3003902:	0ac7aa23          	sw	a2,180(a5)
    iconfig->iocmg_62.BIT.se = BASE_CFG_DISABLE;
 3003906:	0b47a603          	lw	a2,180(a5)
 300390a:	8082                	ret
    iconfig->iocmg_60.BIT.sr = IO_SPEED_SLOW;
 300390c:	0ac7a623          	sw	a2,172(a5)
    iconfig->iocmg_60.BIT.se = BASE_CFG_DISABLE;
 3003910:	0ac7a603          	lw	a2,172(a5)
 3003914:	8082                	ret
    iconfig->iocmg_63.BIT.func = 0x1; /* 0x1 is APT5_PWMB */
 3003916:	9a41                	andi	a2,a2,-16
 3003918:	00166613          	ori	a2,a2,1
 300391c:	8082                	ret
    iconfig->iocmg_63.BIT.sr = IO_SPEED_SLOW;
 300391e:	0ac7ac23          	sw	a2,184(a5)
    iconfig->iocmg_63.BIT.se = BASE_CFG_DISABLE;
 3003922:	0b87a603          	lw	a2,184(a5)
 3003926:	8082                	ret
    iconfig->iocmg_67.BIT.sr = IO_SPEED_SLOW;
 3003928:	c6d0                	sw	a2,12(a3)
    iconfig->iocmg_67.BIT.se = BASE_CFG_DISABLE;
 300392a:	46d0                	lw	a2,12(a3)
 300392c:	8082                	ret
    iconfig->iocmg_66.BIT.func = 0x8; /* 0x8 is ADC2_ANA_A3 */
 300392e:	9a41                	andi	a2,a2,-16
 3003930:	00866613          	ori	a2,a2,8
 3003934:	8082                	ret
    iconfig->iocmg_66.BIT.ds = IO_DRV_LEVEL2;
 3003936:	fcf67613          	andi	a2,a2,-49
 300393a:	02066613          	ori	a2,a2,32
 300393e:	8082                	ret
    iconfig->iocmg_66.BIT.pd = BASE_CFG_DISABLE;
 3003940:	f7f67613          	andi	a2,a2,-129
 3003944:	8082                	ret
    iconfig->iocmg_66.BIT.pu = BASE_CFG_DISABLE;
 3003946:	eff67613          	andi	a2,a2,-257
 300394a:	8082                	ret
    iconfig->iocmg_66.BIT.sr = IO_SPEED_SLOW;
 300394c:	20066613          	ori	a2,a2,512
 3003950:	8082                	ret
 3003952:	c690                	sw	a2,8(a3)
    iconfig->iocmg_66.BIT.se = BASE_CFG_DISABLE;
 3003954:	4690                	lw	a2,8(a3)
 3003956:	8082                	ret
 3003958:	bff67613          	andi	a2,a2,-1025
 300395c:	8082                	ret
    iconfig->iocmg_6.BIT.sr = IO_SPEED_SLOW;
 300395e:	c354                	sw	a3,4(a4)
    iconfig->iocmg_6.BIT.se = BASE_CFG_DISABLE;
 3003960:	4354                	lw	a3,4(a4)
 3003962:	8082                	ret
 3003964:	bff6f693          	andi	a3,a3,-1025
 3003968:	8082                	ret
    iconfig->iocmg_7.BIT.ds = IO_DRV_LEVEL2;
 300396a:	fcf6f693          	andi	a3,a3,-49
 300396e:	0206e693          	ori	a3,a3,32
 3003972:	8082                	ret
    iconfig->iocmg_7.BIT.pd = BASE_CFG_DISABLE;
 3003974:	f7f6f693          	andi	a3,a3,-129
 3003978:	8082                	ret
    iconfig->iocmg_7.BIT.pu = BASE_CFG_DISABLE;
 300397a:	eff6f693          	andi	a3,a3,-257
 300397e:	8082                	ret
 3003980:	c714                	sw	a3,8(a4)
    iconfig->iocmg_7.BIT.sr = IO_SPEED_SLOW;
 3003982:	4714                	lw	a3,8(a4)
 3003984:	8082                	ret
 3003986:	2006e693          	ori	a3,a3,512
 300398a:	8082                	ret
    iconfig->iocmg_51.BIT.sr = IO_SPEED_SLOW;
 300398c:	08e7a423          	sw	a4,136(a5)
    iconfig->iocmg_51.BIT.se = BASE_CFG_DISABLE;
 3003990:	0887a703          	lw	a4,136(a5)
 3003994:	8082                	ret
    iconfig->iocmg_52.BIT.sr = IO_SPEED_SLOW;
 3003996:	08e7a623          	sw	a4,140(a5)
    iconfig->iocmg_52.BIT.se = BASE_CFG_DISABLE;
 300399a:	08c7a703          	lw	a4,140(a5)
 300399e:	8082                	ret
    g_uart2.parity = UART_PARITY_NONE;
 30039a0:	01452823          	sw	s4,16(a0) # 14500010 <RAM_END+0x104fc010>
    g_uart2.txMode = UART_MODE_BLOCKING;
 30039a4:	c944                	sw	s1,20(a0)
    g_uart2.rxMode = UART_MODE_BLOCKING;
 30039a6:	cd04                	sw	s1,24(a0)
 30039a8:	8082                	ret
    g_uart2.fifoMode = BASE_CFG_ENABLE;
 30039aa:	03550623          	sb	s5,44(a0)
    g_uart2.fifoTxThr = UART_FIFOFULL_ONE_TWO;
 30039ae:	03452823          	sw	s4,48(a0)
    g_uart2.fifoRxThr = UART_FIFOFULL_ONE_TWO;
 30039b2:	03452a23          	sw	s4,52(a0)
    g_uart2.hwFlowCtr = BASE_CFG_DISABLE;
 30039b6:	dd04                	sw	s1,56(a0)
    HAL_UART_Init(&g_uart2);
 30039b8:	b1ffe06f          	j	30024d6 <HAL_UART_Init>
    protectApt.cbcClrModeEx = APT_CLEAR_CBC_ON_CNTR_ZERO;
 30039bc:	d222                	sw	s0,36(sp)
    protectApt.ocActionEx = APT_OUT_CTRL_ACTION_LOW;
 30039be:	d422                	sw	s0,40(sp)
 30039c0:	8082                	ret
 30039c2:	01510e23          	sb	s5,28(sp)
 30039c6:	d222                	sw	s0,36(sp)
 30039c8:	d422                	sw	s0,40(sp)
 30039ca:	d86e                	sw	s11,48(sp)
 30039cc:	da4e                	sw	s3,52(sp)
 30039ce:	dc4e                	sw	s3,56(sp)
 30039d0:	086c                	addi	a1,sp,28
    HAL_APT_ProtectInitEx(&g_apt2, &protectApt);
 30039d2:	c7bfd06f          	j	300164c <HAL_APT_ProtectInitEx>
    HAL_APT_IRQService(&g_apt3);
 30039d6:	854e                	mv	a0,s3
 30039d8:	ee7fd06f          	j	30018be <HAL_APT_IRQService>
    APT_OutCtrlProtectEx protectApt = {0};
 30039dc:	01c10813          	addi	a6,sp,28
 30039e0:	866a                	mv	a2,s10
 30039e2:	4581                	li	a1,0
 30039e4:	8542                	mv	a0,a6
 30039e6:	8082                	ret
    protectApt.ocSysEvent = APT_SYS_EVT_DEBUG | APT_SYS_EVT_CLK | APT_SYS_EVT_MEM;
 30039e8:	d86e                	sw	s11,48(sp)
    protectApt.originalEvtEx = APT_EM_ORIGINAL_SRC_POE2;
 30039ea:	da66                	sw	s9,52(sp)
    protectApt.evtPolarityMaskEx = APT_EM_POE2_INVERT_BIT;
 30039ec:	dc66                	sw	s9,56(sp)
 30039ee:	8082                	ret
    APT_OutCtrlProtectEx protectApt = {0};
 30039f0:	866a                	mv	a2,s10
 30039f2:	4581                	li	a1,0
 30039f4:	0868                	addi	a0,sp,28
 30039f6:	a0d1                	j	3003aba <memset>
    HAL_APT_PWMInit(&g_apt8);
 30039f8:	845fd06f          	j	300123c <HAL_APT_PWMInit>
 30039fc:	85a2                	mv	a1,s0
    HAL_APT_RegisterCallBack(&g_apt8, APT_EVENT_INTERRUPT, APT8EventCallback);
 30039fe:	edffd06f          	j	30018dc <HAL_APT_RegisterCallBack>
    g_adc0.socPriority = ADC_PRIMODE_ALL_ROUND;
 3003a02:	0144a223          	sw	s4,4(s1)
    g_adc0.vrefBuf = ADC_VREF_2P5V;
 3003a06:	cc80                	sw	s0,24(s1)
 3003a08:	8082                	ret
 3003a0a:	4721                	li	a4,8
 3003a0c:	d26e                	sw	s11,36(sp)
 3003a0e:	d06a                	sw	s10,32(sp)
 3003a10:	d402                	sw	zero,40(sp)
 3003a12:	d802                	sw	zero,48(sp)
 3003a14:	d63a                	sw	a4,44(sp)
 3003a16:	da22                	sw	s0,52(sp)
 3003a18:	0870                	addi	a2,sp,28
    HAL_ADC_ConfigureSoc(&g_adc0, ADC_SOC_NUM2, &socParam);
 3003a1a:	8526                	mv	a0,s1
 3003a1c:	dbafd06f          	j	3000fd6 <HAL_ADC_ConfigureSoc>
    socParam.adcInput = ADC_CH_ADCINB5; /* PIN4(ADC INB5) */
 3003a20:	ce3e                	sw	a5,28(sp)
    socParam.sampleHoldTime =  2; /* adc sample holed time 2 adc_clk */
 3003a22:	d26e                	sw	s11,36(sp)
    socParam.sampleTotalTime = 3; /* adc sample total time 3 adc_clk */
 3003a24:	d06a                	sw	s10,32(sp)
    socParam.softTrigSource = ADC_TRIGSOC_NONESOFT;
 3003a26:	d402                	sw	zero,40(sp)
    socParam.intTrigSource = ADC_TRIGSOC_NONEINT;
 3003a28:	d802                	sw	zero,48(sp)
 3003a2a:	8082                	ret
 3003a2c:	45a1                	li	a1,8
    HAL_CRG_IpClkDivSet(ADC2_BASE, CRG_ADC_DIV_5);
 3003a2e:	813fe06f          	j	3002240 <HAL_CRG_IpClkDivSet>
    g_adc2.ADC_IntxParam[3].irqNum = IRQ_ADC2_INT4;     /* interrupt 3 */
 3003a32:	dcbc                	sw	a5,120(s1)
    HAL_ADC_Init(&g_adc2);
 3003a34:	8526                	mv	a0,s1
 3003a36:	c8afd06f          	j	3000ec0 <HAL_ADC_Init>
    g_pga1.pgaSwVinN = PGA_SW_VIN0;
 3003a3a:	c540                	sw	s0,12(a0)
    g_pga1.pgaSwVinP = PGA_SW_VIN0;
 3003a3c:	c500                	sw	s0,8(a0)
    g_pga1.gain = PGA_GAIN_1X;
 3003a3e:	01452823          	sw	s4,16(a0)
    HAL_PGA_Init(&g_pga1);
 3003a42:	957fe06f          	j	3002398 <HAL_PGA_Init>
    unsigned int load = HAL_CRG_GetIpFreq((void *)TIMER2) / 1000000u * 1000;
 3003a46:	f00fe06f          	j	3002146 <HAL_CRG_GetIpFreq>
 3003a4a:	4581                	li	a1,0
    HAL_CRG_IpClkSelectSet(TIMER2_BASE, CRG_PLL_NO_PREDV);
 3003a4c:	fcafe06f          	j	3002216 <HAL_CRG_IpClkSelectSet>
    g_timer2.load        = load - 1; /* Set timer value immediately */
 3003a50:	157d                	addi	a0,a0,-1
 3003a52:	c0c8                	sw	a0,4(s1)
    g_timer2.bgLoad      = load - 1; /* Set timer value */
 3003a54:	cc88                	sw	a0,24(s1)
    HAL_TIMER_Init(&g_timer2);
 3003a56:	8526                	mv	a0,s1
    g_timer2.mode        = TIMER_MODE_RUN_PERIODIC; /* Run in period mode */
 3003a58:	c480                	sw	s0,8(s1)
    g_timer2.prescaler   = TIMERPRESCALER_NO_DIV; /* Don't frequency division */
 3003a5a:	0144a823          	sw	s4,16(s1)
    g_timer2.size        = TIMER_SIZE_32BIT; /* 1 for 32bit, 0 for 16bit */
 3003a5e:	c8c0                	sw	s0,20(s1)
    g_timer2.dmaAdcSingleReqEnable = BASE_CFG_DISABLE;
 3003a60:	02048223          	sb	zero,36(s1)
    g_timer2.dmaBurstReqEnable = BASE_CFG_DISABLE;
 3003a64:	020482a3          	sb	zero,37(s1)
    g_timer2.interruptEn = BASE_CFG_ENABLE;
 3003a68:	c4c0                	sw	s0,12(s1)
    HAL_TIMER_Init(&g_timer2);
 3003a6a:	99dfe06f          	j	3002406 <HAL_TIMER_Init>
    HAL_TIMER_RegisterCallback(&g_timer2, TIMER2CallbackFunction);
 3003a6e:	8526                	mv	a0,s1
 3003a70:	a4bfe06f          	j	30024ba <HAL_TIMER_RegisterCallback>
    IRQ_SetPriority(g_timer2.irqNum, 1);
 3003a74:	4cc8                	lw	a0,28(s1)
 3003a76:	fc7fd06f          	j	3001a3c <IRQ_SetPriority>
    IRQ_EnableN(g_timer2.irqNum);
 3003a7a:	4cc8                	lw	a0,28(s1)
 3003a7c:	f5bfd06f          	j	30019d6 <IRQ_EnableN>
 3003a80:	85a2                	mv	a1,s0
    HAL_CRG_IpEnableSet(GPIO0_BASE, IP_CLK_ENABLE);
 3003a82:	f6afe06f          	j	30021ec <HAL_CRG_IpEnableSet>
    g_gpio0.baseAddress = GPIO0;
 3003a86:	c09c                	sw	a5,0(s1)
    g_gpio0.dir = GPIO_OUTPUT_MODE;
 3003a88:	c480                	sw	s0,8(s1)
    g_gpio0.value = GPIO_LOW_LEVEL;
 3003a8a:	0144a823          	sw	s4,16(s1)
 3003a8e:	8082                	ret
 3003a90:	01b4a623          	sw	s11,12(s1)
    g_gpio0.pins = GPIO_PIN_6 | GPIO_PIN_7;
 3003a94:	c0dc                	sw	a5,4(s1)
    HAL_GPIO_Init(&g_gpio0);
 3003a96:	8526                	mv	a0,s1
 3003a98:	895fe06f          	j	300232c <HAL_GPIO_Init>
 3003a9c:	85a2                	mv	a1,s0
    HAL_APT_MasterSyncInit(&g_apt0, APT_SYNC_OUT_ON_CNTR_ZERO);
 3003a9e:	da9fd06f          	j	3001846 <HAL_APT_MasterSyncInit>
 3003aa2:	ce02                	sw	zero,28(sp)
 3003aa4:	d022                	sw	s0,32(sp)
 3003aa6:	d26a                	sw	s10,36(sp)
 3003aa8:	8082                	ret
 3003aaa:	ce02                	sw	zero,28(sp)
 3003aac:	d022                	sw	s0,32(sp)
 3003aae:	d202                	sw	zero,36(sp)
 3003ab0:	086c                	addi	a1,sp,28
 3003ab2:	03911423          	sh	s9,40(sp)
    HAL_APT_SlaveSyncInit(&g_apt2, &aptSlave);
 3003ab6:	db9fd06f          	j	300186e <HAL_APT_SlaveSyncInit>

03003aba <memset>:
 3003aba:	c25d                	beqz	a2,3003b60 <memset+0xa6>
 3003abc:	0ff5f793          	andi	a5,a1,255
 3003ac0:	00f50023          	sb	a5,0(a0)
 3003ac4:	00c50733          	add	a4,a0,a2
 3003ac8:	fef70fa3          	sb	a5,-1(a4)
 3003acc:	4689                	li	a3,2
 3003ace:	08c6f963          	bgeu	a3,a2,3003b60 <memset+0xa6>
 3003ad2:	00f500a3          	sb	a5,1(a0)
 3003ad6:	00f50123          	sb	a5,2(a0)
 3003ada:	fef70f23          	sb	a5,-2(a4)
 3003ade:	fef70ea3          	sb	a5,-3(a4)
 3003ae2:	4699                	li	a3,6
 3003ae4:	06c6fe63          	bgeu	a3,a2,3003b60 <memset+0xa6>
 3003ae8:	00f501a3          	sb	a5,3(a0)
 3003aec:	fef70e23          	sb	a5,-4(a4)
 3003af0:	46a1                	li	a3,8
 3003af2:	06c6f763          	bgeu	a3,a2,3003b60 <memset+0xa6>
 3003af6:	40a007b3          	neg	a5,a0
 3003afa:	8b8d                	andi	a5,a5,3
 3003afc:	00f50733          	add	a4,a0,a5
 3003b00:	8e1d                	sub	a2,a2,a5
 3003b02:	010107b7          	lui	a5,0x1010
 3003b06:	10178793          	addi	a5,a5,257 # 1010101 <FLASH_SIZE+0xfe8105>
 3003b0a:	0ff5f593          	andi	a1,a1,255
 3003b0e:	02f585b3          	mul	a1,a1,a5
 3003b12:	9a71                	andi	a2,a2,-4
 3003b14:	00c707b3          	add	a5,a4,a2
 3003b18:	c30c                	sw	a1,0(a4)
 3003b1a:	feb7ae23          	sw	a1,-4(a5)
 3003b1e:	04c6f163          	bgeu	a3,a2,3003b60 <memset+0xa6>
 3003b22:	c34c                	sw	a1,4(a4)
 3003b24:	c70c                	sw	a1,8(a4)
 3003b26:	feb7aa23          	sw	a1,-12(a5)
 3003b2a:	feb7ac23          	sw	a1,-8(a5)
 3003b2e:	46e1                	li	a3,24
 3003b30:	02c6f863          	bgeu	a3,a2,3003b60 <memset+0xa6>
 3003b34:	c74c                	sw	a1,12(a4)
 3003b36:	cb0c                	sw	a1,16(a4)
 3003b38:	cb4c                	sw	a1,20(a4)
 3003b3a:	cf0c                	sw	a1,24(a4)
 3003b3c:	feb7a223          	sw	a1,-28(a5)
 3003b40:	feb7a423          	sw	a1,-24(a5)
 3003b44:	feb7a623          	sw	a1,-20(a5)
 3003b48:	feb7a823          	sw	a1,-16(a5)
 3003b4c:	00477793          	andi	a5,a4,4
 3003b50:	07e1                	addi	a5,a5,24
 3003b52:	97ba                	add	a5,a5,a4
 3003b54:	46fd                	li	a3,31
 3003b56:	9732                	add	a4,a4,a2
 3003b58:	40f70633          	sub	a2,a4,a5
 3003b5c:	00c6e363          	bltu	a3,a2,3003b62 <memset+0xa8>
 3003b60:	8082                	ret
 3003b62:	c38c                	sw	a1,0(a5)
 3003b64:	c3cc                	sw	a1,4(a5)
 3003b66:	c78c                	sw	a1,8(a5)
 3003b68:	c7cc                	sw	a1,12(a5)
 3003b6a:	cb8c                	sw	a1,16(a5)
 3003b6c:	cbcc                	sw	a1,20(a5)
 3003b6e:	cf8c                	sw	a1,24(a5)
 3003b70:	cfcc                	sw	a1,28(a5)
 3003b72:	02078793          	addi	a5,a5,32
 3003b76:	b7cd                	j	3003b58 <memset+0x9e>

03003b78 <__rodata_start>:
 3003b78:	6666 3b4b 295f      	0x66663b4b295f
 3003b7e:	3f26                	lhu	s1,58(a4)
 3003b80:	0000                	unimp
 3003b82:	3980                	lbu	s0,17(a1)
 3003b84:	0000                	unimp
 3003b86:	3f00                	lbu	s0,25(a4)
 3003b88:	0000                	unimp
 3003b8a:	4500                	lw	s0,8(a0)

03003b8c <g_crgIpMatch>:
 3003b8c:	0000 1400 0000 0000 0030 0000 1000 1400     ........0.......
 3003b9c:	0000 0000 0034 0000 2000 1400 0000 0000     ....4.... ......
 3003bac:	0038 0000 0000 1430 0000 0000 003c 0000     8.....0.....<...
 3003bbc:	0020 1430 0000 0000 003c 0000 1000 1430      .0.....<.....0.
 3003bcc:	0000 0000 0040 0000 1020 1430 0000 0000     ....@... .0.....
 3003bdc:	0040 0000 0000 1470 0000 0000 0044 0000     @.....p.....D...
 3003bec:	1000 1470 0000 0000 0048 0000 0000 1440     ..p.....H.....@.
 3003bfc:	0000 0000 004c 0000 0000 1420 0000 0000     ....L..... .....
 3003c0c:	0050 0000 0000 1460 0002 0000 0054 0000     P.....`.....T...
 3003c1c:	0000 14b0 0001 0000 0058 0000 1000 14b0     ........X.......
 3003c2c:	0001 0000 0058 0001 2000 14b0 0001 0000     ....X.... ......
 3003c3c:	0058 0002 0000 1c00 0001 0000 005c 0000     X...........\...
 3003c4c:	0000 1450 0001 0000 0064 0000 1000 1450     ..P.....d.....P.
 3003c5c:	0001 0000 0064 0001 2000 1450 0001 0000     ....d.... P.....
 3003c6c:	0064 0002 3000 1450 0001 0000 0064 0003     d....0P.....d...
 3003c7c:	4000 1450 0001 0000 0064 0004 5000 1450     .@P.....d....PP.
 3003c8c:	0001 0000 0064 0005 6000 1450 0001 0000     ....d....`P.....
 3003c9c:	0064 0006 7000 1450 0001 0000 0064 0007     d....pP.....d...
 3003cac:	0000 1410 0001 0000 0068 0000 1000 1440     ........h.....@.
 3003cbc:	0006 0000 006c 0000 0000 14c0 0001 0000     ....l...........
 3003ccc:	0070 0000 0000 147d 0001 0000 0074 0000     p.....}.....t...
 3003cdc:	0000 1480 0001 0000 007c 0000 0000 14a0     ........|.......
 3003cec:	0001 0000 0080 0000 1000 14a0 0001 0000     ................
 3003cfc:	0080 0001 2000 14a0 0001 0000 0080 0002     ..... ..........
 3003d0c:	3000 14a0 0001 0000 0080 0003 4000 14a0     .0...........@..
 3003d1c:	0001 0000 0080 0004 5000 14a0 0001 0000     .........P......
 3003d2c:	0080 0005 6000 14a0 0001 0000 0080 0006     .....`..........
 3003d3c:	7000 14a0 0001 0000 0080 0007 8000 14a0     .p..............
 3003d4c:	0001 0000 0080 0008 0008 1830 0001 0000     ..........0.....
 3003d5c:	0090 0000 1008 1830 0001 0000 0090 0001     ......0.........
 3003d6c:	2008 1830 0001 0000 0090 0002 0000 1820     . 0........... .
 3003d7c:	0001 0000 0098 0000 1000 1820 0001 0000     .......... .....
 3003d8c:	0098 0001 2000 1820 0001 0000 0098 0002     .....  .........
 3003d9c:	0000 1800 0003 0000 0084 0000 1000 1800     ................
 3003dac:	0003 0000 0088 0000 2000 1800 0003 0000     ......... ......
 3003dbc:	008c 0000 0000 1830 0004 0000 0094 0000     ......0.........
 3003dcc:	1000 1830 0004 0000 0094 0001 2000 1830     ..0.......... 0.
 3003ddc:	0004 0000 0094 0002 0000 1471 0005 0000     ..........q.....
 3003dec:	0060 0000                                   `...

03003df0 <g_ipClkProc>:
 3003df0:	0000 0000 1bc2 0300 1b8c 0300 1bf0 0300     ................
 3003e00:	0000 0000 1bde 0300 1bb2 0300 1c0a 0300     ................
 3003e10:	0000 0000 0001 0000 1c9c 0300 1c1c 0300     ................
	...
 3003e28:	1ce0 0300 1c7c 0300 0000 0000 0000 0000     ....|...........
 3003e38:	0002 0000 1c9c 0300 1c1c 0300 0000 0000     ................
 3003e48:	0000 0000 1ce0 0300 1c7c 0300 0000 0000     ........|.......
 3003e58:	0000 0000 0003 0000 1dc8 0300 1d00 0300     ................
 3003e68:	1d6e 0300 1d9c 0300 1e1a 0300 1d52 0300     n...........R...
 3003e78:	1d8a 0300 1db6 0300 0004 0000 1f42 0300     ............B...
 3003e88:	1e38 0300 0000 0000 1eb4 0300 1f94 0300     8...............
 3003e98:	1e9c 0300 0000 0000 1f26 0300 0005 0000     ........&.......
 3003ea8:	0000 0000 1fae 0300 0000 0000 0000 0000     ................
 3003eb8:	0000 0000 1fc4 0300 0000 0000 0000 0000     ................
 3003ec8:	0006 0000 1c9c 0300 1c1c 0300 0000 0000     ................
 3003ed8:	0000 0000 1ce0 0300 1c7c 0300 0000 0000     ........|.......
 3003ee8:	0000 0000                                   ....
