# @copyright Copyright (c) 2022, HiSilicon (Shanghai) Technologies Co., Ltd. All rights reserved.
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
# disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
# products derived from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# config.gni Function implementation: Global parameter definition and template configuration 

declare_args() {
    build_type = ""
    build_compiler_specified = ""
}

template("hcc_toolchain") {
    toolchain(target_name) {
        assert(defined(invoker.ar), "gcc toolchain must specify a \"ar\" value")
        assert(defined(invoker.cc), "gcc toolchain must specify a \"cc\" value")
        assert(defined(invoker.cxx), "gcc toolchain must specify a \"cxx\" value")
        assert(defined(invoker.ld), "gcc toolchain must specify a \"ld\" value")

        cc = invoker.cc
        cxx = invoker.cxx
        ar = invoker.ar
        ld = invoker.ld

        need_strip = false
        if(defined(invoker.strip)) {
            strip = invoker.strip
            need_strip = true
        }

        tool("cc") {
            depfile = "{{output}}.d"
            command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            description = "cross compiler {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.o",
            ]
        }
        tool("cxx") {
            depfile = "{{output}}.d"
            command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            description = "CXX {{output}}"
            outputs = [
                "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
            ]
        }
        tool("asm") {
            depfile = "{{output}}.d"
            command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{asmflags}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            description = "cross compiler {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.o"
            ]
        }
        tool("alink") {
            outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
            rspfile = "{{output}}.rsp"
            rspfile_content = "{{inputs}}"
            command = "$ar cr {{output}} @\"$rspfile\""

            description = "AR {{output}}"
            outputs = [
                outfile
            ]

            default_output_dir = "{{root_out_dir}}/libs"
            default_output_extension = ".a"
            output_prefix = "lib"
        }
        tool("solink") {
            outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
            rspfile = "{{output}}.rsp"
            rspfile_content = "{{inputs}}"
            command = "$ld -shared -Wl,--start-group {{ldflags}} " +
                      "{{inputs}} {{libs}} -Wl,--end-group -o $outfile"
            if(need_strip) {
                command += "&& $strip $outfile"
            }
            description = "SOLINK $outfile"
            outputs = [
                outfile
            ]

            default_output_dir = "{{root_out_dir}}"
            default_output_extension = ".so"
            output_prefix = "lib"
        }
        tool("link") {
            outfile = "{{output_dir}}/bin/{{target_output_name}}{{output_extension}}"
            rspfile = "$outfile.rsp"
            command = "$ld -Wl,--start-group {{ldflags}} " +
                      "-Wl,--whole-archive @$rspfile -Wl,--no-whole-archive {{libs}} -Wl,--end-group -o $outfile"
            if(need_strip) {
                command += "&& $strip $outfile"
            }

            description = "LINK $outfile"
            default_output_dir = "{{root_out_dir}}"
            rspfile_content = "{{inputs}}"
            outputs = [
                outfile
            ]
        }
        tool("stamp") {
            if (host_os == "win") {
                command = "cmd /c type nul > \"{{output}}\""
            } else {
                command = "/usr/bin/touch {{output}}"
            }
            description = "STAMP {{output}}"
        }
        tool("copy") {
            command = "cp -afd {{source}} {{output}}"
            description = "COPY {{source}} {{output}}"
        }
    }
}